The following text is a Git repository with code. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encounted. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.
----
README.md
# GitHub.gg

A modern GitHub repository analyzer built with Next.js, NextAuth.js, and Octokit, powered by Bun.

## Features

- üîí Secure authentication with GitHub OAuth
- üìä Repository analysis and statistics
- üöÄ Fast and responsive UI
- ‚ö° Optimized for performance with Bun
- üèóÔ∏è TypeScript first-class support
- üß™ Built-in testing with Bun

## Getting Started

### Prerequisites

- [Bun](https://bun.sh/) (recommended) or Node.js 18+
- GitHub OAuth App credentials

### Quick Start with Bun

```bash
# Install Bun (if not installed)
curl -fsSL https://bun.sh/install | bash

# Install dependencies
bun install

# Start development server
bun dev
```

### Traditional Setup (Node.js)

If you prefer using Node.js:

```bash
# Install dependencies
npm install
# or
yarn

# Start development server
npm run dev
# or
yarn dev
```

### Environment Setup

1. Create a `.env.local` file in the root directory:
   ```bash
   cp .env.local.example .env.local
   ```

2. Configure the environment variables (see [docs/ENVIRONMENT.md](docs/ENVIRONMENT.md) for details):
   ```env
   # NextAuth
   NEXTAUTH_SECRET=your-secret-here
   NEXTAUTH_URL=http://localhost:3000
   
   # GitHub OAuth
   GITHUB_CLIENT_ID=your-github-client-id
   GITHUB_CLIENT_SECRET=your-github-client-secret
   ```

3. Install dependencies:
   ```bash
   npm install
   # or
   yarn
   ```

### Development

1. Start the development server:
   ```bash
   npm run dev
   # or
   yarn dev
   ```

2. Open [http://localhost:3000](http://localhost:3000) in your browser.

### Testing Authentication

To test the authentication flow:

1. Start the development server
2. Navigate to the login page or click the "Sign in with GitHub" button
3. Authorize the application with your GitHub account
4. You should be redirected back to the application

For automated testing, you can use the test script:

```bash
npx tsx scripts/test-auth.ts
```

## Production Deployment

### Vercel

1. Push your code to a GitHub repository
2. Import the repository on [Vercel](https://vercel.com/import)
3. Add the required environment variables in the Vercel dashboard
4. Deploy!

## API Reference

### Authentication

All API routes are protected and require authentication. Include the session token in your requests.

### Rate Limiting

- Unauthenticated: 10 requests per hour
- Authenticated: 100 requests per hour

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## License

Distributed under the MIT License. See `LICENSE` for more information.

## Contact

Your Name - [@yourtwitter](https://twitter.com/yourtwitter) - email@example.com

Project Link: [https://github.com/yourusername/github.gg](https://github.com/yourusername/github.gg)

----
app/[user]/[repo]/actions/page.tsx
import type { Metadata } from "next"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { CheckCircleIcon, XCircleIcon, ClockIcon } from "lucide-react"
import { getRepoData } from "@/lib/github"

export async function generateMetadata({ params }: { params: { user: string; repo: string } }): Promise<Metadata> {
  return {
    title: `Actions ¬∑ ${params.user}/${params.repo} - GitHub.GG`,
    description: `CI/CD workflows and actions for ${params.user}/${params.repo}`,
  }
}

export default async function RepoActionsPage({ params }: { params: { user: string; repo: string } }) {
  const repoData = await getRepoData(params.user, params.repo)

  // Mock workflows data
  const workflows = [
    {
      id: "ci",
      name: "CI",
      description: "Continuous Integration workflow",
      runs: [
        {
          id: "12345",
          status: "success",
          conclusion: "success",
          created_at: "2023-06-01T10:00:00Z",
          updated_at: "2023-06-01T10:15:00Z",
          branch: "main",
          commit: {
            message: "Update dependencies",
            sha: "abc1234",
          },
        },
        {
          id: "12344",
          status: "completed",
          conclusion: "failure",
          created_at: "2023-05-30T14:00:00Z",
          updated_at: "2023-05-30T14:20:00Z",
          branch: "feature/new-api",
          commit: {
            message: "Add new API endpoints",
            sha: "def5678",
          },
        },
      ],
    },
    {
      id: "deploy",
      name: "Deploy",
      description: "Deployment workflow",
      runs: [
        {
          id: "12343",
          status: "completed",
          conclusion: "success",
          created_at: "2023-06-01T11:00:00Z",
          updated_at: "2023-06-01T11:10:00Z",
          branch: "main",
          commit: {
            message: "Update dependencies",
            sha: "abc1234",
          },
        },
      ],
    },
  ]

  return (
    <div className="container py-4">
      <div className="space-y-6">
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
          <h1 className="text-2xl font-bold">Actions</h1>
          <div className="flex items-center gap-3">
            <Button>New workflow</Button>
          </div>
        </div>

        <Tabs defaultValue="workflows" className="w-full">
          <TabsList className="grid grid-cols-2 w-full max-w-md">
            <TabsTrigger value="workflows">Workflows</TabsTrigger>
            <TabsTrigger value="runs">Workflow runs</TabsTrigger>
          </TabsList>

          <TabsContent value="workflows" className="mt-6">
            <Card className="bg-black/70 border-border/50">
              <CardHeader>
                <CardTitle className="text-lg">Workflows</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {workflows.map((workflow) => (
                    <div key={workflow.id} className="border border-border/50 rounded-lg p-4">
                      <div className="flex items-start justify-between">
                        <div>
                          <h3 className="text-lg font-medium">{workflow.name}</h3>
                          <p className="text-sm text-muted-foreground">{workflow.description}</p>
                        </div>
                        <Button variant="outline" size="sm">
                          Run workflow
                        </Button>
                      </div>
                      <div className="mt-4 space-y-2">
                        <h4 className="text-sm font-medium">Recent runs</h4>
                        {workflow.runs.map((run) => (
                          <div key={run.id} className="flex items-center justify-between bg-gray-900/30 p-3 rounded-md">
                            <div className="flex items-center gap-3">
                              {run.conclusion === "success" ? (
                                <CheckCircleIcon className="h-5 w-5 text-green-500" />
                              ) : (
                                <XCircleIcon className="h-5 w-5 text-red-500" />
                              )}
                              <div>
                                <div className="font-medium">{run.commit.message}</div>
                                <div className="text-xs text-muted-foreground">
                                  {run.branch} ‚Ä¢ {run.commit.sha.substring(0, 7)}
                                </div>
                              </div>
                            </div>
                            <div className="text-sm text-muted-foreground">
                              <ClockIcon className="h-3.5 w-3.5 inline mr-1" />
                              {new Date(run.updated_at).toLocaleString()}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="runs" className="mt-6">
            <Card className="bg-black/70 border-border/50">
              <CardHeader>
                <CardTitle className="text-lg">Workflow Runs</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {workflows.flatMap((workflow) =>
                    workflow.runs.map((run) => (
                      <div key={run.id} className="border-b border-border/50 pb-4 last:border-0 last:pb-0">
                        <div className="flex items-start gap-3">
                          <div className="mt-1">
                            {run.conclusion === "success" ? (
                              <CheckCircleIcon className="h-5 w-5 text-green-500" />
                            ) : (
                              <XCircleIcon className="h-5 w-5 text-red-500" />
                            )}
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center gap-2">
                              <span className="font-medium">{workflow.name}</span>
                              <Badge
                                variant="outline"
                                className={`${
                                  run.conclusion === "success"
                                    ? "bg-green-500/10 text-green-400 border-green-500/30"
                                    : "bg-red-500/10 text-red-400 border-red-500/30"
                                }`}
                              >
                                {run.conclusion}
                              </Badge>
                            </div>
                            <div className="mt-1 text-sm">{run.commit.message}</div>
                            <div className="flex flex-wrap items-center gap-x-4 gap-y-2 mt-2 text-xs text-muted-foreground">
                              <span>
                                {run.branch} ‚Ä¢ {run.commit.sha.substring(0, 7)}
                              </span>
                              <span className="flex items-center gap-1">
                                <ClockIcon className="h-3.5 w-3.5" />
                                {new Date(run.updated_at).toLocaleString()}
                              </span>
                            </div>
                          </div>
                          <Button variant="outline" size="sm">
                            View run
                          </Button>
                        </div>
                      </div>
                    )),
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}

----
app/[user]/[repo]/commit/[sha]/page.tsx
import type { Metadata } from "next"
import { notFound } from "next/navigation"
import RepoCommitDetail from "@/components/repo/repo-commit-detail"
import { getRepoData, getCommitData } from "@/lib/github"

export async function generateMetadata({
  params,
}: {
  params: { user: string; repo: string; sha: string }
}): Promise<Metadata> {
  try {
    const commitData = await getCommitData(params.user, params.repo, params.sha)

    return {
      title: `${commitData.message.split("\n")[0]} ¬∑ ${params.sha.substring(0, 7)} ¬∑ ${params.user}/${params.repo} - GitHub.GG`,
      description: `AI-powered analysis of commit ${params.sha.substring(0, 7)} in ${params.user}/${params.repo}`,
    }
  } catch (error) {
    return {
      title: `Commit ${params.sha.substring(0, 7)} ¬∑ ${params.user}/${params.repo} - GitHub.GG`,
      description: `AI-powered analysis of commit ${params.sha.substring(0, 7)} in ${params.user}/${params.repo}`,
    }
  }
}

export default async function RepoCommitPage({
  params,
}: {
  params: { user: string; repo: string; sha: string }
}) {
  try {
    const repoData = await getRepoData(params.user, params.repo)
    const commitData = await getCommitData(params.user, params.repo, params.sha)

    return (
      <div className="container py-4">
        <RepoCommitDetail
          username={params.user}
          reponame={params.repo}
          sha={params.sha}
          repoData={repoData}
          commitData={commitData}
        />
      </div>
    )
  } catch (error) {
    console.error("Error fetching commit data:", error)
    notFound()
  }
}

----
app/[user]/[repo]/compare/[...refs]/page.tsx
import type { Metadata } from "next"
import { notFound } from "next/navigation"
import RepoCompare from "@/components/repo/repo-compare"
import { getRepoData, getCompareData } from "@/lib/github"

export async function generateMetadata({
  params,
}: {
  params: { user: string; repo: string; refs: string[] }
}): Promise<Metadata> {
  const compareString = params.refs.join("...")

  return {
    title: `Comparing ${compareString} ¬∑ ${params.user}/${params.repo} - GitHub.GG`,
    description: `AI-powered analysis of changes between ${compareString} in ${params.user}/${params.repo}`,
  }
}

export default async function RepoComparePage({
  params,
}: {
  params: { user: string; repo: string; refs: string[] }
}) {
  try {
    const repoData = await getRepoData(params.user, params.repo)

    // Handle different compare formats (base...head or base..head)
    let base: string, head: string

    if (params.refs.length === 1) {
      // Handle the case where it's passed as a single string with ... or .. in it
      const parts = params.refs[0].split(/\.\.\.|\.\./)
      base = parts[0]
      head = parts[1] || "HEAD"
    } else if (params.refs.length === 2) {
      base = params.refs[0]
      head = params.refs[1]
    } else {
      throw new Error("Invalid compare format")
    }

    const compareData = await getCompareData(params.user, params.repo, base, head)

    return (
      <div className="container py-4">
        <RepoCompare
          username={params.user}
          reponame={params.repo}
          base={base}
          head={head}
          repoData={repoData}
          compareData={compareData}
        />
      </div>
    )
  } catch (error) {
    console.error("Error fetching compare data:", error)
    notFound()
  }
}

----
app/[user]/[repo]/diagram/page.tsx
import { Suspense } from "react"
import { Loader2Icon } from "lucide-react"
import { getAllRepoFiles, getRepoData } from "@/lib/github"
import ClientWrapper from "../sigma/client-wrapper"

interface PageProps {
  params: {
    user: string
    repo: string
  }
}

export default async function DiagramPage({ params }: PageProps) {
  const { user, repo } = params

  // Fetch repo info to determine default branch
  const repoInfo = await getRepoData(user, repo)
  const branch = repoInfo?.default_branch || "main"

  // Fetch files server-side to avoid client-side loading issues
  let files: any[] = []
  try {
    const result = await getAllRepoFiles(user, repo, branch)
    files = result.files
  } catch (error) {
    console.error("Error fetching repo files:", error)
    // We'll continue with empty files and let the client component handle the error
  }

  const repoData = { owner: user, repo }

  return (
    <div className="container py-6">
      <Suspense
        fallback={
          <div className="flex items-center justify-center py-12">
            <Loader2Icon className="h-8 w-8 animate-spin mr-3" />
            <span>Loading repository diagram...</span>
          </div>
        }
      >
        <ClientWrapper
          files={files}
          repoData={repoData}
          owner={user}
          repo={repo}
          branch={branch}
          defaultTab="diagram"
        />
      </Suspense>
    </div>
  )
}

----
app/[user]/[repo]/insights/client-page.tsx
"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { GitGraphIcon, UsersIcon, CodeIcon, GitCommitIcon } from "lucide-react"
import { ContributorsChart, CommitsChart, SimpleLineChart } from "@/components/insights-charts"

interface RepoInsightsClientPageProps {
  params: { user: string; repo: string }
  contributorsData: any[]
  commitsData: any[]
  topContributors: any[]
}

export default function RepoInsightsClientPage({
  params,
  contributorsData,
  commitsData,
  topContributors,
}: RepoInsightsClientPageProps) {
  return (
    <div className="container py-4">
      <div className="space-y-6">
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
          <h1 className="text-2xl font-bold">Insights</h1>
        </div>

        <Tabs defaultValue="pulse" className="w-full">
          <TabsList className="grid grid-cols-4 w-full max-w-md">
            <TabsTrigger value="pulse">Pulse</TabsTrigger>
            <TabsTrigger value="contributors">Contributors</TabsTrigger>
            <TabsTrigger value="traffic">Traffic</TabsTrigger>
            <TabsTrigger value="commits">Commits</TabsTrigger>
          </TabsList>

          <TabsContent value="pulse" className="mt-6">
            <Card className="bg-black/70 border-border/50">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <GitGraphIcon className="h-5 w-5 text-primary" />
                  Repository Pulse
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Activity Overview</h3>
                    <div className="space-y-4">
                      <div className="flex items-center justify-between p-3 bg-gray-900/30 rounded-md">
                        <span>Active pull requests</span>
                        <span className="font-medium">7</span>
                      </div>
                      <div className="flex items-center justify-between p-3 bg-gray-900/30 rounded-md">
                        <span>Active issues</span>
                        <span className="font-medium">12</span>
                      </div>
                      <div className="flex items-center justify-between p-3 bg-gray-900/30 rounded-md">
                        <span>Merged pull requests</span>
                        <span className="font-medium">23</span>
                      </div>
                      <div className="flex items-center justify-between p-3 bg-gray-900/30 rounded-md">
                        <span>Closed issues</span>
                        <span className="font-medium">18</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium mb-4">Contribution Activity</h3>
                    <div className="h-[250px]">
                      <ContributorsChart data={contributorsData} />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="contributors" className="mt-6">
            <Card className="bg-black/70 border-border/50">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <UsersIcon className="h-5 w-5 text-primary" />
                  Contributors
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead>
                        <tr className="border-b border-border/50">
                          <th className="text-left py-3 px-4 font-medium">Contributor</th>
                          <th className="text-left py-3 px-4 font-medium">Commits</th>
                          <th className="text-left py-3 px-4 font-medium">Additions</th>
                          <th className="text-left py-3 px-4 font-medium">Deletions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {topContributors.map((contributor, index) => (
                          <tr key={index} className="border-b border-border/50 last:border-0">
                            <td className="py-3 px-4">
                              <a href={`/${contributor.name}`} className="text-blue-400 hover:underline">
                                {contributor.name}
                              </a>
                            </td>
                            <td className="py-3 px-4">{contributor.commits}</td>
                            <td className="py-3 px-4 text-green-400">+{contributor.additions}</td>
                            <td className="py-3 px-4 text-red-400">-{contributor.deletions}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium mb-4">Contribution Timeline</h3>
                    <div className="h-[250px]">
                      <ContributorsChart data={contributorsData} />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="traffic" className="mt-6">
            <Card className="bg-black/70 border-border/50">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CodeIcon className="h-5 w-5 text-primary" />
                  Traffic
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Visitors</h3>
                    <div className="h-[250px]">
                      <SimpleLineChart
                        data={[
                          { date: "6/1", visitors: 45 },
                          { date: "6/2", visitors: 52 },
                          { date: "6/3", visitors: 49 },
                          { date: "6/4", visitors: 63 },
                          { date: "6/5", visitors: 58 },
                          { date: "6/6", visitors: 48 },
                          { date: "6/7", visitors: 42 },
                          { date: "6/8", visitors: 39 },
                          { date: "6/9", visitors: 47 },
                          { date: "6/10", visitors: 54 },
                          { date: "6/11", visitors: 59 },
                          { date: "6/12", visitors: 65 },
                          { date: "6/13", visitors: 72 },
                          { date: "6/14", visitors: 68 },
                        ]}
                        dataKey="visitors"
                        color="#3498db"
                      />
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium mb-4">Clones</h3>
                    <div className="h-[250px]">
                      <SimpleLineChart
                        data={[
                          { date: "6/1", clones: 12 },
                          { date: "6/2", clones: 15 },
                          { date: "6/3", clones: 10 },
                          { date: "6/4", clones: 18 },
                          { date: "6/5", clones: 14 },
                          { date: "6/6", clones: 11 },
                          { date: "6/7", clones: 9 },
                          { date: "6/8", clones: 8 },
                          { date: "6/9", clones: 13 },
                          { date: "6/10", clones: 16 },
                          { date: "6/11", clones: 19 },
                          { date: "6/12", clones: 21 },
                          { date: "6/13", clones: 17 },
                          { date: "6/14", clones: 14 },
                        ]}
                        dataKey="clones"
                        color="#e74c3c"
                      />
                    </div>
                  </div>
                </div>

                <div className="mt-6">
                  <h3 className="text-lg font-medium mb-4">Popular Content</h3>
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead>
                        <tr className="border-b border-border/50">
                          <th className="text-left py-3 px-4 font-medium">Content</th>
                          <th className="text-left py-3 px-4 font-medium">Views</th>
                          <th className="text-left py-3 px-4 font-medium">Unique visitors</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr className="border-b border-border/50">
                          <td className="py-3 px-4">README.md</td>
                          <td className="py-3 px-4">342</td>
                          <td className="py-3 px-4">187</td>
                        </tr>
                        <tr className="border-b border-border/50">
                          <td className="py-3 px-4">src/index.ts</td>
                          <td className="py-3 px-4">256</td>
                          <td className="py-3 px-4">143</td>
                        </tr>
                        <tr className="border-b border-border/50">
                          <td className="py-3 px-4">docs/API.md</td>
                          <td className="py-3 px-4">198</td>
                          <td className="py-3 px-4">112</td>
                        </tr>
                        <tr>
                          <td className="py-3 px-4">package.json</td>
                          <td className="py-3 px-4">165</td>
                          <td className="py-3 px-4">94</td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="commits" className="mt-6">
            <Card className="bg-black/70 border-border/50">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <GitCommitIcon className="h-5 w-5 text-primary" />
                  Commits
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Commit Frequency</h3>
                    <div className="h-[250px]">
                      <CommitsChart data={commitsData} />
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium mb-4">Recent Commits</h3>
                    <div className="space-y-4">
                      {[
                        {
                          sha: "abc1234",
                          message: "Update dependencies",
                          author: "developer1",
                          date: "2023-06-01T10:00:00Z",
                        },
                        {
                          sha: "def5678",
                          message: "Fix bug in authentication flow",
                          author: "developer2",
                          date: "2023-05-30T14:00:00Z",
                        },
                        {
                          sha: "ghi9012",
                          message: "Add new API endpoints for user management",
                          author: "developer3",
                          date: "2023-05-28T09:00:00Z",
                        },
                        {
                          sha: "jkl3456",
                          message: "Improve error handling in data processing pipeline",
                          author: "developer1",
                          date: "2023-05-25T16:00:00Z",
                        },
                        {
                          sha: "mno7890",
                          message: "Update documentation for new features",
                          author: "developer4",
                          date: "2023-05-22T11:00:00Z",
                        },
                      ].map((commit, index) => (
                        <div key={index} className="border-b border-border/50 pb-4 last:border-0 last:pb-0">
                          <div className="flex items-start gap-3">
                            <div className="mt-1">
                              <GitCommitIcon className="h-5 w-5 text-blue-400" />
                            </div>
                            <div className="flex-1">
                              <a
                                href={`/${params.user}/${params.repo}/commit/${commit.sha}`}
                                className="font-medium hover:text-blue-400 transition-colors"
                              >
                                {commit.message}
                              </a>
                              <div className="flex flex-wrap items-center gap-x-4 gap-y-2 mt-1 text-sm text-muted-foreground">
                                <span>{commit.sha.substring(0, 7)}</span>
                                <span>
                                  by{" "}
                                  <a href={`/${commit.author}`} className="hover:text-blue-400 transition-colors">
                                    {commit.author}
                                  </a>
                                </span>
                                <span>{new Date(commit.date).toLocaleDateString()}</span>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}

----
app/[user]/[repo]/insights/page.tsx
import type { Metadata } from "next"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { GitGraphIcon, UsersIcon, CodeIcon, GitCommitIcon } from "lucide-react"
import { getRepoData } from "@/lib/github"

export async function generateMetadata({ params }: { params: { user: string; repo: string } }): Promise<Metadata> {
  return {
    title: `Insights ¬∑ ${params.user}/${params.repo} - GitHub.GG`,
    description: `Analytics and insights for ${params.user}/${params.repo}`,
  }
}

export default async function RepoInsightsPage({ params }: { params: { user: string; repo: string } }) {
  const repoData = await getRepoData(params.user, params.repo)

  // Mock insights data
  const contributorsData = [
    { name: "Jan", contributions: 45 },
    { name: "Feb", contributions: 32 },
    { name: "Mar", contributions: 67 },
    { name: "Apr", contributions: 89 },
    { name: "May", contributions: 54 },
    { name: "Jun", contributions: 78 },
    { name: "Jul", contributions: 92 },
    { name: "Aug", contributions: 63 },
    { name: "Sep", contributions: 71 },
    { name: "Oct", contributions: 84 },
    { name: "Nov", contributions: 52 },
    { name: "Dec", contributions: 33 },
  ]

  const commitsData = [
    { name: "Jan", commits: 120 },
    { name: "Feb", commits: 98 },
    { name: "Mar", commits: 143 },
    { name: "Apr", commits: 165 },
    { name: "May", commits: 127 },
    { name: "Jun", commits: 150 },
    { name: "Jul", commits: 180 },
    { name: "Aug", commits: 134 },
    { name: "Sep", commits: 162 },
    { name: "Oct", commits: 187 },
    { name: "Nov", commits: 110 },
    { name: "Dec", commits: 85 },
  ]

  const topContributors = [
    { name: "developer1", commits: 342, additions: 15420, deletions: 8753 },
    { name: "developer2", commits: 217, additions: 9876, deletions: 5432 },
    { name: "developer3", commits: 184, additions: 7654, deletions: 3210 },
    { name: "developer4", commits: 156, additions: 6543, deletions: 2987 },
    { name: "developer5", commits: 123, additions: 5432, deletions: 1876 },
  ]

  return (
    <div className="container py-4">
      <div className="space-y-6">
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
          <h1 className="text-2xl font-bold">Insights</h1>
        </div>

        <Tabs defaultValue="pulse" className="w-full">
          <TabsList className="grid grid-cols-4 w-full max-w-md">
            <TabsTrigger value="pulse">Pulse</TabsTrigger>
            <TabsTrigger value="contributors">Contributors</TabsTrigger>
            <TabsTrigger value="traffic">Traffic</TabsTrigger>
            <TabsTrigger value="commits">Commits</TabsTrigger>
          </TabsList>

          <TabsContent value="pulse" className="mt-6">
            <Card className="bg-black/70 border-border/50">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <GitGraphIcon className="h-5 w-5 text-primary" />
                  Repository Pulse
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Activity Overview</h3>
                    <div className="space-y-4">
                      <div className="flex items-center justify-between p-3 bg-gray-900/30 rounded-md">
                        <span>Active pull requests</span>
                        <span className="font-medium">7</span>
                      </div>
                      <div className="flex items-center justify-between p-3 bg-gray-900/30 rounded-md">
                        <span>Active issues</span>
                        <span className="font-medium">12</span>
                      </div>
                      <div className="flex items-center justify-between p-3 bg-gray-900/30 rounded-md">
                        <span>Merged pull requests</span>
                        <span className="font-medium">23</span>
                      </div>
                      <div className="flex items-center justify-between p-3 bg-gray-900/30 rounded-md">
                        <span>Closed issues</span>
                        <span className="font-medium">18</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium mb-4">Contribution Activity</h3>
                    <div className="h-[250px]">
                      {/* Client-side only chart component */}
                      <div className="w-full h-full bg-gray-800/30 rounded-md flex items-center justify-center">
                        <p className="text-muted-foreground">Chart loads on client side</p>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="contributors" className="mt-6">
            <Card className="bg-black/70 border-border/50">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <UsersIcon className="h-5 w-5 text-primary" />
                  Contributors
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead>
                        <tr className="border-b border-border/50">
                          <th className="text-left py-3 px-4 font-medium">Contributor</th>
                          <th className="text-left py-3 px-4 font-medium">Commits</th>
                          <th className="text-left py-3 px-4 font-medium">Additions</th>
                          <th className="text-left py-3 px-4 font-medium">Deletions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {topContributors.map((contributor, index) => (
                          <tr key={index} className="border-b border-border/50 last:border-0">
                            <td className="py-3 px-4">
                              <a href={`/${contributor.name}`} className="text-blue-400 hover:underline">
                                {contributor.name}
                              </a>
                            </td>
                            <td className="py-3 px-4">{contributor.commits}</td>
                            <td className="py-3 px-4 text-green-400">+{contributor.additions}</td>
                            <td className="py-3 px-4 text-red-400">-{contributor.deletions}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium mb-4">Contribution Timeline</h3>
                    <div className="h-[250px]">
                      {/* Client-side only chart component */}
                      <div className="w-full h-full bg-gray-800/30 rounded-md flex items-center justify-center">
                        <p className="text-muted-foreground">Chart loads on client side</p>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="traffic" className="mt-6">
            <Card className="bg-black/70 border-border/50">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CodeIcon className="h-5 w-5 text-primary" />
                  Traffic
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Visitors</h3>
                    <div className="h-[250px]">
                      {/* Client-side only chart component */}
                      <div className="w-full h-full bg-gray-800/30 rounded-md flex items-center justify-center">
                        <p className="text-muted-foreground">Chart loads on client side</p>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium mb-4">Clones</h3>
                    <div className="h-[250px]">
                      {/* Client-side only chart component */}
                      <div className="w-full h-full bg-gray-800/30 rounded-md flex items-center justify-center">
                        <p className="text-muted-foreground">Chart loads on client side</p>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="mt-6">
                  <h3 className="text-lg font-medium mb-4">Popular Content</h3>
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead>
                        <tr className="border-b border-border/50">
                          <th className="text-left py-3 px-4 font-medium">Content</th>
                          <th className="text-left py-3 px-4 font-medium">Views</th>
                          <th className="text-left py-3 px-4 font-medium">Unique visitors</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr className="border-b border-border/50">
                          <td className="py-3 px-4">README.md</td>
                          <td className="py-3 px-4">342</td>
                          <td className="py-3 px-4">187</td>
                        </tr>
                        <tr className="border-b border-border/50">
                          <td className="py-3 px-4">src/index.ts</td>
                          <td className="py-3 px-4">256</td>
                          <td className="py-3 px-4">143</td>
                        </tr>
                        <tr className="border-b border-border/50">
                          <td className="py-3 px-4">docs/API.md</td>
                          <td className="py-3 px-4">198</td>
                          <td className="py-3 px-4">112</td>
                        </tr>
                        <tr>
                          <td className="py-3 px-4">package.json</td>
                          <td className="py-3 px-4">165</td>
                          <td className="py-3 px-4">94</td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="commits" className="mt-6">
            <Card className="bg-black/70 border-border/50">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <GitCommitIcon className="h-5 w-5 text-primary" />
                  Commits
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Commit Frequency</h3>
                    <div className="h-[250px]">
                      {/* Client-side only chart component */}
                      <div className="w-full h-full bg-gray-800/30 rounded-md flex items-center justify-center">
                        <p className="text-muted-foreground">Chart loads on client side</p>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium mb-4">Recent Commits</h3>
                    <div className="space-y-4">
                      {[
                        {
                          sha: "abc1234",
                          message: "Update dependencies",
                          author: "developer1",
                          date: "2023-06-01T10:00:00Z",
                        },
                        {
                          sha: "def5678",
                          message: "Fix bug in authentication flow",
                          author: "developer2",
                          date: "2023-05-30T14:00:00Z",
                        },
                        {
                          sha: "ghi9012",
                          message: "Add new API endpoints for user management",
                          author: "developer3",
                          date: "2023-05-28T09:00:00Z",
                        },
                        {
                          sha: "jkl3456",
                          message: "Improve error handling in data processing pipeline",
                          author: "developer1",
                          date: "2023-05-25T16:00:00Z",
                        },
                        {
                          sha: "mno7890",
                          message: "Update documentation for new features",
                          author: "developer4",
                          date: "2023-05-22T11:00:00Z",
                        },
                      ].map((commit, index) => (
                        <div key={index} className="border-b border-border/50 pb-4 last:border-0 last:pb-0">
                          <div className="flex items-start gap-3">
                            <div className="mt-1">
                              <GitCommitIcon className="h-5 w-5 text-blue-400" />
                            </div>
                            <div className="flex-1">
                              <a
                                href={`/${params.user}/${params.repo}/commit/${commit.sha}`}
                                className="font-medium hover:text-blue-400 transition-colors"
                              >
                                {commit.message}
                              </a>
                              <div className="flex flex-wrap items-center gap-x-4 gap-y-2 mt-1 text-sm text-muted-foreground">
                                <span>{commit.sha.substring(0, 7)}</span>
                                <span>
                                  by{" "}
                                  <a href={`/${commit.author}`} className="hover:text-blue-400 transition-colors">
                                    {commit.author}
                                  </a>
                                </span>
                                <span>{new Date(commit.date).toLocaleDateString()}</span>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}

----
app/[user]/[repo]/issues/[id]/page.tsx
import type { Metadata } from "next"
import { notFound } from "next/navigation"
import RepoIssueDetail from "@/components/repo/repo-issue-detail"
import { getRepoData, getIssueData } from "@/lib/github"

export async function generateMetadata({
  params,
}: {
  params: { user: string; repo: string; id: string }
}): Promise<Metadata> {
  try {
    const issueData = await getIssueData(params.user, params.repo, params.id)

    return {
      title: `${issueData.title} ¬∑ Issue #${params.id} ¬∑ ${params.user}/${params.repo} - GitHub.GG`,
      description: `AI-powered analysis of issue #${params.id} in ${params.user}/${params.repo}`,
    }
  } catch (error) {
    return {
      title: `Issue #${params.id} ¬∑ ${params.user}/${params.repo} - GitHub.GG`,
      description: `AI-powered analysis of issue #${params.id} in ${params.user}/${params.repo}`,
    }
  }
}

export default async function RepoIssuePage({
  params,
}: {
  params: { user: string; repo: string; id: string }
}) {
  try {
    const repoData = await getRepoData(params.user, params.repo)
    const issueData = await getIssueData(params.user, params.repo, params.id)

    return (
      <div className="container py-4">
        <RepoIssueDetail
          username={params.user}
          reponame={params.repo}
          issueId={params.id}
          repoData={repoData}
          issueData={issueData}
        />
      </div>
    )
  } catch (error) {
    console.error("Error fetching issue data:", error)
    notFound()
  }
}

----
app/[user]/[repo]/issues/page.tsx
import type { Metadata } from "next"
import RepoIssuesList from "@/components/repo/repo-issues-list"
import { getRepoData, getRepoIssues } from "@/lib/github"

export async function generateMetadata({
  params,
}: {
  params: { user: string; repo: string }
}): Promise<Metadata> {
  return {
    title: `Issues ¬∑ ${params.user}/${params.repo} - GitHub.GG`,
    description: `AI-powered analysis of issues in ${params.user}/${params.repo}`,
  }
}

export default async function RepoIssuesPage({
  params,
  searchParams,
}: {
  params: { user: string; repo: string }
  searchParams: { [key: string]: string | string[] | undefined }
}) {
  const repoData = await getRepoData(params.user, params.repo)
  const page = typeof searchParams.page === "string" ? Number.parseInt(searchParams.page) : 1
  const state = typeof searchParams.state === "string" ? searchParams.state : "open"

  const issuesData = await getRepoIssues(params.user, params.repo, {
    page,
    state: state as "open" | "closed" | "all",
  })

  return (
    <div className="container py-4">
      <RepoIssuesList
        username={params.user}
        reponame={params.repo}
        repoData={repoData}
        issuesData={issuesData}
        currentPage={page}
        currentState={state as "open" | "closed" | "all"}
      />
    </div>
  )
}

----
app/[user]/[repo]/layout.tsx
import type React from "react"
import { Suspense } from "react"
import RepoHeader from "@/components/repo/repo-header"
import RepoNavigation from "@/components/repo/repo-navigation"
import LoadingSpinner from "@/components/ui/loading-spinner"
import { getRepoData } from "@/lib/github"

export default async function RepoLayout({
  children,
  params,
}: {
  children: React.ReactNode
  params: { user: string; repo: string }
}) {
  try {
    const repoData = await getRepoData(params.user, params.repo)

    return (
      <div className="flex flex-col min-h-screen">
        <RepoHeader username={params.user} reponame={params.repo} repoData={repoData} />
        <RepoNavigation username={params.user} reponame={params.repo} repoData={repoData} />
        <main className="flex-1 bg-background">
          <Suspense fallback={<LoadingSpinner />}>{children}</Suspense>
        </main>
      </div>
    )
  } catch (error) {
    console.error("Error fetching repo data for layout:", error)
    return (
      <div className="container py-6">
        <p className="text-red-500">Failed to load repository data. Please try again later.</p>
      </div>
    )
  }
}

----
app/[user]/[repo]/page.tsx
import { redirect } from "next/navigation"

export default function RepoPage({ params }: { params: { user: string; repo: string } }) {
  const { user, repo } = params

  // Use a more resilient approach for redirection
  if (typeof window === "undefined") {
    // Server-side: use redirect
    redirect(`/${user}/${repo}/sigma`)
  } else {
    // Client-side: use window.location for direct navigation
    window.location.href = `/${user}/${repo}/sigma`
    // Return a loading state while redirecting
    return <div className="container py-6">Redirecting to code visualization...</div>
  }
}

----
app/[user]/[repo]/pulls/page.tsx
import type { Metadata } from "next"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { GitPullRequestIcon, MessageCircleIcon, ClockIcon } from "lucide-react"
import { getRepoData } from "@/lib/github"

export async function generateMetadata({ params }: { params: { user: string; repo: string } }): Promise<Metadata> {
  return {
    title: `Pull Requests ¬∑ ${params.user}/${params.repo} - GitHub.GG`,
    description: `AI-powered analysis of pull requests in ${params.user}/${params.repo}`,
  }
}

export default async function RepoPullsPage({
  params,
  searchParams,
}: {
  params: { user: string; repo: string }
  searchParams: { [key: string]: string | string[] | undefined }
}) {
  const repoData = await getRepoData(params.user, params.repo)
  const page = typeof searchParams.page === "string" ? Number.parseInt(searchParams.page) : 1
  const state = typeof searchParams.state === "string" ? searchParams.state : "open"

  // Mock pull requests data
  const pullsData = [
    {
      number: 123,
      title: "Add new feature for user authentication",
      state: "open",
      user: {
        login: "developer1",
        avatar_url: "https://github.com/developer1.png",
      },
      created_at: "2023-05-15T00:00:00Z",
      updated_at: "2023-05-16T00:00:00Z",
      comments: 7,
      base: "main",
      head: "feature/auth",
    },
    {
      number: 122,
      title: "Fix bug in data processing pipeline",
      state: "closed",
      user: {
        login: "developer2",
        avatar_url: "https://github.com/developer2.png",
      },
      created_at: "2023-05-10T00:00:00Z",
      updated_at: "2023-05-12T00:00:00Z",
      comments: 3,
      base: "main",
      head: "bugfix/data-processing",
    },
  ]

  // Filter by state
  const filteredPulls = state === "all" ? pullsData : pullsData.filter((pr) => pr.state === state)

  return (
    <div className="container py-4">
      <div className="space-y-6">
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
          <h1 className="text-2xl font-bold">Pull Requests</h1>
          <div className="flex items-center gap-3">
            <Button>New Pull Request</Button>
          </div>
        </div>

        <Tabs defaultValue={state} className="w-full">
          <TabsList className="grid grid-cols-3 w-full max-w-md">
            <TabsTrigger value="open" asChild>
              <Link href={`/${params.user}/${params.repo}/pulls?state=open`}>
                <GitPullRequestIcon className="h-4 w-4 mr-2" />
                Open
              </Link>
            </TabsTrigger>
            <TabsTrigger value="closed" asChild>
              <Link href={`/${params.user}/${params.repo}/pulls?state=closed`}>
                <GitPullRequestIcon className="h-4 w-4 mr-2" />
                Closed
              </Link>
            </TabsTrigger>
            <TabsTrigger value="all" asChild>
              <Link href={`/${params.user}/${params.repo}/pulls?state=all`}>All</Link>
            </TabsTrigger>
          </TabsList>

          <TabsContent value={state} className="mt-6">
            <Card className="bg-black/70 border-border/50">
              <CardHeader>
                <CardTitle className="text-lg">
                  {state === "open" ? "Open" : state === "closed" ? "Closed" : "All"} Pull Requests
                </CardTitle>
              </CardHeader>
              <CardContent>
                {filteredPulls.length > 0 ? (
                  <div className="space-y-4">
                    {filteredPulls.map((pr) => (
                      <div key={pr.number} className="border-b border-border/50 pb-4 last:border-0 last:pb-0">
                        <div className="flex items-start gap-3">
                          <div className="mt-1">
                            <GitPullRequestIcon
                              className={`h-5 w-5 ${pr.state === "open" ? "text-green-500" : "text-purple-500"}`}
                            />
                          </div>
                          <div className="flex-1">
                            <Link
                              href={`/${params.user}/${params.repo}/pull/${pr.number}`}
                              className="text-lg font-medium hover:text-blue-400 transition-colors"
                            >
                              {pr.title}
                            </Link>
                            <div className="flex flex-wrap items-center gap-x-4 gap-y-2 mt-1 text-sm text-muted-foreground">
                              <span>#{pr.number}</span>
                              <span className="flex items-center gap-1">
                                <ClockIcon className="h-3.5 w-3.5" />
                                Opened {new Date(pr.created_at).toLocaleDateString()}
                              </span>
                              <span className="flex items-center gap-1">
                                <MessageCircleIcon className="h-3.5 w-3.5" />
                                {pr.comments} comments
                              </span>
                              <span>
                                by{" "}
                                <Link href={`/${pr.user.login}`} className="hover:text-blue-400 transition-colors">
                                  {pr.user.login}
                                </Link>
                              </span>
                            </div>
                            <div className="mt-2 text-sm">
                              <span className="text-muted-foreground">
                                {pr.head} into {pr.base}
                              </span>
                            </div>
                          </div>
                          {pr.state === "closed" && (
                            <Badge variant="outline" className="bg-purple-500/10 text-purple-400 border-purple-500/30">
                              Closed
                            </Badge>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    No {state === "all" ? "" : state} pull requests found
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Pagination */}
        {filteredPulls.length > 0 && (
          <div className="flex justify-center mt-6">
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" disabled={page <= 1} asChild={page > 1}>
                {page > 1 ? (
                  <Link href={`/${params.user}/${params.repo}/pulls?page=${page - 1}&state=${state}`}>Previous</Link>
                ) : (
                  "Previous"
                )}
              </Button>
              <span className="text-sm">Page {page}</span>
              <Button variant="outline" size="sm" asChild>
                <Link href={`/${params.user}/${params.repo}/pulls?page=${page + 1}&state=${state}`}>Next</Link>
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

----
app/[user]/[repo]/security/page.tsx
import { Badge } from "@/components/ui/badge"
import type { Metadata } from "next"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ShieldIcon, AlertTriangleIcon, LockIcon, ShieldCheckIcon, ExternalLinkIcon } from "lucide-react"
import { getRepoData } from "@/lib/github"
import { analyzeRepositoryWithSocket } from "@/lib/socket-api-service"

export async function generateMetadata({ params }: { params: { user: string; repo: string } }): Promise<Metadata> {
  return {
    title: `Security ¬∑ ${params.user}/${params.repo} - GitHub.GG`,
    description: `Security overview and vulnerabilities for ${params.user}/${params.repo}`,
  }
}

export default async function RepoSecurityPage({ params }: { params: { user: string; repo: string } }) {
  const repoData = await getRepoData(params.user, params.repo)

  // Use Socket API to analyze repository security
  const securityData = await analyzeRepositoryWithSocket(params.user, params.repo)

  return (
    <div className="container py-4">
      <div className="space-y-6">
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
          <h1 className="text-2xl font-bold">Security</h1>
          <div className="flex items-center gap-3">
            <Button>Security overview</Button>
            <Button variant="outline" className="flex items-center gap-2">
              <ExternalLinkIcon className="h-4 w-4" />
              Socket Security
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card className="bg-black/70 border-border/50">
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle className="flex items-center gap-2">
                <AlertTriangleIcon className="h-5 w-5 text-primary" />
                Vulnerabilities
              </CardTitle>
              <div className="flex items-center gap-2">
                <Badge variant="outline" className="bg-red-500/10 text-red-400 border-red-500/30">
                  {securityData.overallScore.issues.critical + securityData.overallScore.issues.high} High
                </Badge>
                <Badge variant="outline" className="bg-yellow-500/10 text-yellow-400 border-yellow-500/30">
                  {securityData.overallScore.issues.medium} Medium
                </Badge>
                <Badge variant="outline" className="bg-blue-500/10 text-blue-400 border-blue-500/30">
                  {securityData.overallScore.issues.low} Low
                </Badge>
              </div>
            </CardHeader>
            <CardContent>
              {securityData.vulnerabilities.length > 0 ? (
                <div className="space-y-4">
                  {securityData.vulnerabilities.map((vuln) => (
                    <div key={vuln.id} className="border-b border-border/50 pb-4 last:border-0 last:pb-0">
                      <div className="flex items-start gap-3">
                        <div
                          className={`px-2 py-1 text-xs font-medium rounded ${
                            vuln.severity === "critical"
                              ? "bg-purple-500/20 text-purple-400"
                              : vuln.severity === "high"
                                ? "bg-red-500/20 text-red-400"
                                : vuln.severity === "medium"
                                  ? "bg-yellow-500/20 text-yellow-400"
                                  : "bg-blue-500/20 text-blue-400"
                          }`}
                        >
                          {vuln.severity}
                        </div>
                        <div className="flex-1">
                          <h3 className="font-medium">{vuln.cve || vuln.id}</h3>
                          <p className="text-sm text-muted-foreground mt-1">{vuln.description}</p>
                          <div className="mt-2 text-sm">
                            <span className="text-muted-foreground">
                              {vuln.package} {vuln.currentVersion} ‚Üí {vuln.patchedVersion}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-muted-foreground">No vulnerabilities found</div>
              )}
            </CardContent>
          </Card>

          <Card className="bg-black/70 border-border/50">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <ShieldIcon className="h-5 w-5 text-primary" />
                Security Policies
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center justify-between p-3 bg-gray-900/30 rounded-md">
                  <div className="flex items-center gap-3">
                    <ShieldCheckIcon className="h-5 w-5 text-green-500" />
                    <span>Security policy</span>
                  </div>
                  <Badge
                    variant="outline"
                    className={`${
                      securityData.securityPolicies.hasSecurityPolicy
                        ? "bg-green-500/10 text-green-400 border-green-500/30"
                        : "bg-red-500/10 text-red-400 border-red-500/30"
                    }`}
                  >
                    {securityData.securityPolicies.hasSecurityPolicy ? "Enabled" : "Disabled"}
                  </Badge>
                </div>

                <div className="flex items-center justify-between p-3 bg-gray-900/30 rounded-md">
                  <div className="flex items-center gap-3">
                    <LockIcon className="h-5 w-5 text-green-500" />
                    <span>Dependabot alerts</span>
                  </div>
                  <Badge
                    variant="outline"
                    className={`${
                      securityData.securityPolicies.hasDependabotEnabled
                        ? "bg-green-500/10 text-green-400 border-green-500/30"
                        : "bg-red-500/10 text-red-400 border-red-500/30"
                    }`}
                  >
                    {securityData.securityPolicies.hasDependabotEnabled ? "Enabled" : "Disabled"}
                  </Badge>
                </div>

                <div className="flex items-center justify-between p-3 bg-gray-900/30 rounded-md">
                  <div className="flex items-center gap-3">
                    <ShieldIcon className="h-5 w-5 text-red-500" />
                    <span>Code scanning</span>
                  </div>
                  <Badge
                    variant="outline"
                    className={`${
                      securityData.securityPolicies.hasCodeScanning
                        ? "bg-green-500/10 text-green-400 border-green-500/30"
                        : "bg-red-500/10 text-red-400 border-red-500/30"
                    }`}
                  >
                    {securityData.securityPolicies.hasCodeScanning ? "Enabled" : "Disabled"}
                  </Badge>
                </div>

                <div className="flex items-center justify-between p-3 bg-gray-900/30 rounded-md">
                  <div className="flex items-center gap-3">
                    <LockIcon className="h-5 w-5 text-green-500" />
                    <span>Secret scanning</span>
                  </div>
                  <Badge
                    variant="outline"
                    className={`${
                      securityData.securityPolicies.hasSecretScanning
                        ? "bg-green-500/10 text-green-400 border-green-500/30"
                        : "bg-red-500/10 text-red-400 border-red-500/30"
                    }`}
                  >
                    {securityData.securityPolicies.hasSecretScanning ? "Enabled" : "Disabled"}
                  </Badge>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <Card className="bg-black/70 border-border/50">
          <CardHeader>
            <CardTitle className="text-lg">Security Score</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col md:flex-row gap-6">
              <div className="flex-1 flex items-center justify-center">
                <div className="relative w-40 h-40 flex items-center justify-center">
                  <svg className="w-full h-full" viewBox="0 0 100 100">
                    <circle cx="50" cy="50" r="45" fill="none" stroke="#1e293b" strokeWidth="10" />
                    <circle
                      cx="50"
                      cy="50"
                      r="45"
                      fill="none"
                      stroke={
                        securityData.overallScore.grade === "A"
                          ? "#22c55e"
                          : securityData.overallScore.grade === "B"
                            ? "#3b82f6"
                            : securityData.overallScore.grade === "C"
                              ? "#eab308"
                              : securityData.overallScore.grade === "D"
                                ? "#f97316"
                                : "#ef4444"
                      }
                      strokeWidth="10"
                      strokeDasharray="283"
                      strokeDashoffset={283 - (283 * securityData.overallScore.score) / 100}
                      transform="rotate(-90 50 50)"
                    />
                  </svg>
                  <div className="absolute flex flex-col items-center justify-center">
                    <span className="text-4xl font-bold">{securityData.overallScore.score}</span>
                    <span className="text-sm text-muted-foreground">Grade {securityData.overallScore.grade}</span>
                  </div>
                </div>
              </div>
              <div className="flex-1">
                <h3 className="text-lg font-medium mb-3">Dependency Analysis</h3>
                <div className="space-y-3">
                  {securityData.dependencies.map((dep) => (
                    <div key={dep.name} className="flex items-center justify-between p-3 bg-gray-900/30 rounded-md">
                      <div className="flex items-center gap-2">
                        <div
                          className={`w-3 h-3 rounded-full ${
                            dep.securityScore.grade === "A"
                              ? "bg-green-500"
                              : dep.securityScore.grade === "B"
                                ? "bg-blue-500"
                                : dep.securityScore.grade === "C"
                                  ? "bg-yellow-500"
                                  : dep.securityScore.grade === "D"
                                    ? "bg-orange-500"
                                    : "bg-red-500"
                          }`}
                        />
                        <span>{dep.name}</span>
                        <span className="text-xs text-muted-foreground">{dep.version}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="text-xs px-2 py-1 rounded bg-gray-800">
                          {dep.vulnerabilities.length} issues
                        </span>
                        <Badge variant="outline" className="bg-gray-800/50">
                          {dep.securityScore.score}/100
                        </Badge>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-black/70 border-border/50">
          <CardHeader>
            <CardTitle className="text-lg">Security Recommendations</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
              <p className="text-sm text-muted-foreground">
                Based on the repository's security profile, here are some recommendations:
              </p>
              <ul className="mt-3 space-y-2 text-sm text-muted-foreground">
                {securityData.vulnerabilities.map((vuln) => (
                  <li key={vuln.id} className="flex items-start gap-2">
                    <AlertTriangleIcon className="h-4 w-4 text-yellow-500 mt-0.5 flex-shrink-0" />
                    <span>
                      Update <strong>{vuln.package}</strong> to version {vuln.patchedVersion} to fix a {vuln.severity}{" "}
                      severity vulnerability
                    </span>
                  </li>
                ))}
                {!securityData.securityPolicies.hasCodeScanning && (
                  <li className="flex items-start gap-2">
                    <ShieldIcon className="h-4 w-4 text-primary mt-0.5 flex-shrink-0" />
                    <span>Enable code scanning to detect security vulnerabilities in your code</span>
                  </li>
                )}
              </ul>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

----
app/[user]/[repo]/settings/page.tsx
"use client"

import { useState } from "react"
import { useParams } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { AlertCircle, CheckCircle2, Webhook, Bot, Shield, Code, GitBranch } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

export default function SettingsPage() {
  const params = useParams()
  const { user, repo } = params as { user: string; repo: string }

  const [webhookUrl, setWebhookUrl] = useState("")
  const [secretToken, setSecretToken] = useState("")
  const [botEnabled, setBotEnabled] = useState(false)
  const [codeAnalysisEnabled, setCodeAnalysisEnabled] = useState(true)
  const [saveSuccess, setSaveSuccess] = useState(false)
  const [saveError, setSaveError] = useState(false)

  const handleSaveWebhook = () => {
    // Simulate saving webhook configuration
    if (webhookUrl) {
      setSaveSuccess(true)
      setSaveError(false)
      setTimeout(() => setSaveSuccess(false), 3000)
    } else {
      setSaveError(true)
      setSaveSuccess(false)
      setTimeout(() => setSaveError(false), 3000)
    }
  }

  const eventTypes = [
    { id: "push", name: "Push", description: "Any Git push to the repository" },
    { id: "pull_request", name: "Pull Request", description: "Pull request opened, closed, or synchronized" },
    { id: "issues", name: "Issues", description: "Issue opened, edited, closed, etc." },
    { id: "commit_comment", name: "Commit Comment", description: "Commit or diff commented on" },
    { id: "code_scan", name: "Code Scan", description: "Code scanning alerts" },
  ]

  return (
    <div className="container py-6">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold">Repository Settings</h1>
        <div className="text-sm text-muted-foreground">
          {user}/{repo}
        </div>
      </div>

      <Tabs defaultValue="webhooks" className="space-y-6">
        <TabsList className="grid w-full grid-cols-3 lg:w-[400px]">
          <TabsTrigger value="webhooks">Webhooks</TabsTrigger>
          <TabsTrigger value="bots">Bots & Apps</TabsTrigger>
          <TabsTrigger value="analysis">Code Analysis</TabsTrigger>
        </TabsList>

        <TabsContent value="webhooks" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Webhook className="h-5 w-5" />
                Webhooks
              </CardTitle>
              <CardDescription>
                Webhooks allow external services to be notified when certain events happen in your repository.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="webhook-url">Payload URL</Label>
                <Input
                  id="webhook-url"
                  placeholder="https://example.com/webhook"
                  value={webhookUrl}
                  onChange={(e) => setWebhookUrl(e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="secret-token">Secret Token</Label>
                <Input
                  id="secret-token"
                  type="password"
                  placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                  value={secretToken}
                  onChange={(e) => setSecretToken(e.target.value)}
                />
                <p className="text-xs text-muted-foreground">Used to validate webhook payloads for security.</p>
              </div>

              <div className="space-y-2">
                <Label>Event Triggers</Label>
                <div className="space-y-2">
                  {eventTypes.map((event) => (
                    <div key={event.id} className="flex items-start space-x-3 space-y-0">
                      <Switch
                        id={`event-${event.id}`}
                        defaultChecked={event.id === "push" || event.id === "code_scan"}
                      />
                      <div className="space-y-1 leading-none">
                        <Label htmlFor={`event-${event.id}`}>{event.name}</Label>
                        <p className="text-xs text-muted-foreground">{event.description}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Test Webhook</Button>
              <Button onClick={handleSaveWebhook}>Save Webhook</Button>
            </CardFooter>
          </Card>

          {saveSuccess && (
            <Alert variant="default" className="bg-green-50 text-green-800 border-green-200">
              <CheckCircle2 className="h-4 w-4" />
              <AlertTitle>Success</AlertTitle>
              <AlertDescription>Your webhook has been saved successfully.</AlertDescription>
            </Alert>
          )}

          {saveError && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>Please provide a valid webhook URL.</AlertDescription>
            </Alert>
          )}
        </TabsContent>

        <TabsContent value="bots" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Bot className="h-5 w-5" />
                Bots & Integrations
              </CardTitle>
              <CardDescription>
                Configure automated bots to help with code reviews, testing, and deployments.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between space-x-2">
                <div className="flex flex-col space-y-1">
                  <Label htmlFor="bot-toggle" className="font-medium">
                    Enable Code Analysis Bot
                  </Label>
                  <p className="text-sm text-muted-foreground">
                    Automatically analyze code in pull requests and commits
                  </p>
                </div>
                <Switch id="bot-toggle" checked={botEnabled} onCheckedChange={setBotEnabled} />
              </div>

              <div className="space-y-2 pt-4">
                <Label htmlFor="bot-config">Bot Configuration</Label>
                <Textarea
                  id="bot-config"
                  placeholder="# YAML configuration for the bot
name: CodeAnalysisBot
version: 1.0
settings:
  autoReview: true
  severity: medium
  ignorePatterns:
    - '*.test.js'
    - 'docs/**'"
                  className="font-mono text-sm h-[200px]"
                  disabled={!botEnabled}
                />
                <p className="text-xs text-muted-foreground">Configure the bot behavior using YAML format.</p>
              </div>

              <div className="space-y-2 pt-2">
                <Label htmlFor="bot-type">Bot Type</Label>
                <Select disabled={!botEnabled} defaultValue="code-analysis">
                  <SelectTrigger id="bot-type">
                    <SelectValue placeholder="Select bot type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="code-analysis">Code Analysis</SelectItem>
                    <SelectItem value="security-scanner">Security Scanner</SelectItem>
                    <SelectItem value="dependency-updater">Dependency Updater</SelectItem>
                    <SelectItem value="custom">Custom Bot</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
            <CardFooter>
              <Button disabled={!botEnabled}>Save Bot Configuration</Button>
            </CardFooter>
          </Card>
        </TabsContent>

        <TabsContent value="analysis" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Code className="h-5 w-5" />
                Code Analysis Settings
              </CardTitle>
              <CardDescription>Configure automated code analysis tools and quality checks.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between space-x-2">
                <div className="flex flex-col space-y-1">
                  <Label htmlFor="analysis-toggle" className="font-medium">
                    Enable Code Analysis
                  </Label>
                  <p className="text-sm text-muted-foreground">Run automated code quality and security checks</p>
                </div>
                <Switch id="analysis-toggle" checked={codeAnalysisEnabled} onCheckedChange={setCodeAnalysisEnabled} />
              </div>

              <div className="space-y-2 pt-4">
                <Label>Analysis Tools</Label>
                <div className="space-y-2">
                  <div className="flex items-start space-x-3 space-y-0">
                    <Switch id="tool-linter" defaultChecked disabled={!codeAnalysisEnabled} />
                    <div className="space-y-1 leading-none">
                      <Label htmlFor="tool-linter">Code Linter</Label>
                      <p className="text-xs text-muted-foreground">Check code style and formatting issues</p>
                    </div>
                  </div>
                  <div className="flex items-start space-x-3 space-y-0">
                    <Switch id="tool-security" defaultChecked disabled={!codeAnalysisEnabled} />
                    <div className="space-y-1 leading-none">
                      <Label htmlFor="tool-security">Security Scanner</Label>
                      <p className="text-xs text-muted-foreground">Detect security vulnerabilities and issues</p>
                    </div>
                  </div>
                  <div className="flex items-start space-x-3 space-y-0">
                    <Switch id="tool-deps" defaultChecked disabled={!codeAnalysisEnabled} />
                    <div className="space-y-1 leading-none">
                      <Label htmlFor="tool-deps">Dependency Checker</Label>
                      <p className="text-xs text-muted-foreground">Check for outdated or vulnerable dependencies</p>
                    </div>
                  </div>
                  <div className="flex items-start space-x-3 space-y-0">
                    <Switch id="tool-complexity" disabled={!codeAnalysisEnabled} />
                    <div className="space-y-1 leading-none">
                      <Label htmlFor="tool-complexity">Complexity Analyzer</Label>
                      <p className="text-xs text-muted-foreground">Measure code complexity and suggest improvements</p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="space-y-2 pt-2">
                <Label htmlFor="analysis-branch">Analysis Target</Label>
                <div className="flex gap-2">
                  <Select disabled={!codeAnalysisEnabled} defaultValue="all-prs">
                    <SelectTrigger id="analysis-branch" className="flex-1">
                      <SelectValue placeholder="Select when to run analysis" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all-prs">All Pull Requests</SelectItem>
                      <SelectItem value="main-only">Main Branch Only</SelectItem>
                      <SelectItem value="all-branches">All Branches</SelectItem>
                      <SelectItem value="tagged-releases">Tagged Releases</SelectItem>
                    </SelectContent>
                  </Select>
                  <Button variant="outline" className="gap-1" disabled={!codeAnalysisEnabled}>
                    <GitBranch className="h-4 w-4" />
                    Configure Branches
                  </Button>
                </div>
              </div>
            </CardContent>
            <CardFooter>
              <Button disabled={!codeAnalysisEnabled}>Save Analysis Settings</Button>
            </CardFooter>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="h-5 w-5" />
                Security Policies
              </CardTitle>
              <CardDescription>Configure security policies and requirements for this repository.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-start space-x-3 space-y-0">
                <Switch id="require-reviews" defaultChecked />
                <div className="space-y-1 leading-none">
                  <Label htmlFor="require-reviews">Require Code Reviews</Label>
                  <p className="text-xs text-muted-foreground">Require at least one approved review before merging</p>
                </div>
              </div>
              <div className="flex items-start space-x-3 space-y-0">
                <Switch id="require-checks" defaultChecked />
                <div className="space-y-1 leading-none">
                  <Label htmlFor="require-checks">Require Status Checks</Label>
                  <p className="text-xs text-muted-foreground">Require branches to be up to date before merging</p>
                </div>
              </div>
              <div className="flex items-start space-x-3 space-y-0">
                <Switch id="require-signatures" />
                <div className="space-y-1 leading-none">
                  <Label htmlFor="require-signatures">Require Signed Commits</Label>
                  <p className="text-xs text-muted-foreground">Require all commits to be signed with GPG</p>
                </div>
              </div>
            </CardContent>
            <CardFooter>
              <Button>Save Security Policies</Button>
            </CardFooter>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

----
app/[user]/[repo]/sigma/client-wrapper.tsx
"use client"

import { useState, useEffect } from "react"
import { useSession } from "next-auth/react"
import SigmaCodeView from "@/components/repo/sigma-code-view"
import RepoStructureDiagram from "@/components/repo/repo-structure-diagram"
import { getAllRepoFiles } from "@/lib/github"
import { Loader2Icon } from "lucide-react"

interface ClientWrapperProps {
  files: any[]
  repoData: {
    owner: string
    repo: string
  }
  owner: string
  repo: string
  branch: string
  defaultTab?: "code" | "diagram"
}

export default function ClientWrapper({
  files: initialFiles,
  repoData,
  owner,
  repo,
  branch,
  defaultTab = "code",
}: ClientWrapperProps) {
  const [activeTab, setActiveTab] = useState<"code" | "diagram">(defaultTab)
  const [files, setFiles] = useState<any[]>(initialFiles)
  const [branchName, setBranchName] = useState(branch)
  const [isLoading, setIsLoading] = useState(initialFiles.length === 0)
  const [error, setError] = useState<string | null>(null)
  const { data: session } = useSession()
  const accessToken = session?.accessToken as string | undefined

  // Fetch files if not provided
  useEffect(() => {
    async function fetchFiles() {
      if (initialFiles && initialFiles.length > 0) {
        setFiles(initialFiles)
        setIsLoading(false)
        return
      }

      setIsLoading(true)
      setError(null)

      try {
        const { files: fetchedFiles, branch: fetchedBranch } = await getAllRepoFiles(
          owner, 
          repo, 
          branchName,
          accessToken
        )
        setFiles(fetchedFiles)
        setBranchName(fetchedBranch)
      } catch (err) {
        console.error("Error fetching repo files:", err)
        setError("Failed to fetch repository files")
      } finally {
        setIsLoading(false)
      }
    }

    fetchFiles()
  }, [owner, repo, branchName, initialFiles])

  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-12">
        <Loader2Icon className="h-8 w-8 animate-spin mr-3" />
        <span>Loading repository data...</span>
      </div>
    )
  }

  if (error) {
    return (
      <div className="text-center py-8">
        <p className="text-red-500 font-medium">{error}</p>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {activeTab === "code" ? (
        <SigmaCodeView files={files} repoData={repoData} owner={owner} repo={repo} branch={branchName} />
      ) : (
        <RepoStructureDiagram files={files} owner={owner} repo={repo} branch={branchName} />
      )}
    </div>
  )
}

----
app/[user]/[repo]/sigma/page.tsx
import { Suspense } from "react"
import { Loader2Icon } from "lucide-react"
import ClientWrapper from "./client-wrapper"

interface PageProps {
  params: {
    user: string
    repo: string
  }
}

export default async function SigmaPage({ params }: PageProps) {
  const { user, repo } = params

  // We'll pass empty initial files and let the client component fetch them
  const initialFiles: any[] = []
  const repoData = { owner: user, repo }

  return (
    <div className="container py-6">
      <Suspense
        fallback={
          <div className="flex items-center justify-center py-12">
            <Loader2Icon className="h-8 w-8 animate-spin mr-3" />
            <span>Loading code...</span>
          </div>
        }
      >
        <ClientWrapper files={initialFiles} repoData={repoData} owner={user} repo={repo} defaultTab="code" />
      </Suspense>
    </div>
  )
}

----
app/[user]/[repo]/structure/page.tsx
import { redirect } from "next/navigation"

interface PageProps {
  params: {
    user: string
    repo: string
  }
}

export default function StructurePage({ params }: PageProps) {
  const { user, repo } = params
  redirect(`/${user}/${repo}/diagram`)
}

----
app/[user]/[repo]/tree/[branch]/[...path]/page.tsx
import type { Metadata } from "next"
import { notFound } from "next/navigation"
import RepoFileTree from "@/components/repo/repo-file-tree"
import { getRepoData, getFileTreeData } from "@/lib/github"

export async function generateMetadata({
  params,
}: {
  params: { user: string; repo: string; branch: string; path: string[] }
}): Promise<Metadata> {
  const pathString = params.path.join("/")

  return {
    title: `${params.user}/${params.repo}/${pathString} at ${params.branch} - GitHub.GG`,
    description: `AI-powered analysis of ${pathString} directory in ${params.user}/${params.repo}`,
  }
}

export default async function RepoTreePage({
  params,
}: {
  params: { user: string; repo: string; branch: string; path: string[] }
}) {
  try {
    const repoData = await getRepoData(params.user, params.repo)
    const pathString = params.path.join("/")
    const treeData = await getFileTreeData(params.user, params.repo, params.branch, pathString)

    return (
      <div className="container py-4">
        <RepoFileTree
          username={params.user}
          reponame={params.repo}
          branch={params.branch}
          path={pathString}
          repoData={repoData}
          treeData={treeData}
        />
      </div>
    )
  } catch (error) {
    console.error("Error fetching tree data:", error)
    notFound()
  }
}

----
app/[user]/[repo]/tree/[branch]/page.tsx
import { notFound } from "next/navigation"
import { getRepoData, getFileTreeData } from "@/lib/github"
import RepoFileTree from "@/components/repo/repo-file-tree"
import { Card } from "@/components/ui/card"
import SideAdPlaceholders from "@/components/advertising/side-ad-placeholders"
import { AlertCircle } from "lucide-react"

export default async function RepoTreePage({
  params,
}: {
  params: { user: string; repo: string; branch: string }
}) {
  try {
    const repoData = await getRepoData(params.user, params.repo)
    if (!repoData) {
      notFound()
    }

    let treeData = []
    try {
      treeData = await getFileTreeData(params.user, params.repo, params.branch, "")
    } catch (error) {
      console.error("Error fetching file tree:", error)
    }

    return (
      <div className="container py-4">
        <div className="flex flex-col lg:flex-row gap-6">
          <div className="hidden lg:block w-[160px] flex-shrink-0">
            <SideAdPlaceholders position="left" />
          </div>

          <div className="flex-1">
            <Card className="bg-black/70 border-border/50 p-4">
              {treeData.length > 0 ? (
                <RepoFileTree
                  username={params.user}
                  reponame={params.repo}
                  branch={params.branch}
                  path=""
                  repoData={repoData}
                  treeData={treeData}
                />
              ) : (
                <div className="flex flex-col items-center justify-center p-8 text-center">
                  <AlertCircle className="h-12 w-12 text-yellow-500 mb-4" />
                  <h3 className="text-xl font-semibold mb-2">Unable to load repository files</h3>
                  <p className="text-muted-foreground max-w-md">
                    We couldn't load the files for this repository. This could be due to API rate limits or because the
                    repository is empty.
                  </p>
                </div>
              )}
            </Card>
          </div>
        </div>
      </div>
    )
  } catch (error) {
    console.error("Error in repo tree page:", error)
    notFound()
  }
}

----
app/[user]/layout.tsx
import type React from "react"
import type { Metadata } from "next"

export const metadata: Metadata = {
  title: "User Profile | GitHub.GG",
  description: "View user profile and repositories on GitHub.GG",
}

export default function UserLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <div className="container mx-auto py-6 px-4 md:px-6">{children}</div>
}

----
app/[user]/page.tsx
import type { Metadata } from "next"
import UserProfile from "@/components/user/user-profile"
import { getUserData } from "@/lib/github"
import { notFound } from "next/navigation"
import { getServerSession } from "next-auth"
import { authOptions } from "@/app/api/auth/[...nextauth]/route"

export async function generateMetadata({ params }: { params: { user: string } }): Promise<Metadata> {
  // Don't try to generate metadata for reserved paths
  if (params.user === "search") {
    return {
      title: "Search - GitHub.GG",
      description: "Search for repositories, users, and issues on GitHub.GG",
    }
  }

  try {
    const userData = await getUserData(params.user)
    return {
      title: `${userData?.name || params.user} - GitHub.GG`,
      description: `AI-powered analysis of ${params.user}'s GitHub profile and repositories`,
    }
  } catch (error) {
    return {
      title: "User Not Found - GitHub.GG",
      description: "The requested user profile could not be found",
    }
  }
}

export default async function UserPage({ params }: { params: { user: string } }) {
  // Handle reserved paths - only return notFound for "search" now
  // We're removing "docs" from this check to allow the docs route to work
  if (params.user === "search") {
    notFound()
    return null
  }

  // Get the user's session if they're logged in
  const session = await getServerSession(authOptions)
  const token = session?.accessToken as string | undefined

  try {
    // Fetch user data with the token if available
    const userData = await getUserData(params.user, token)

    if (!userData) {
      notFound()
      return null
    }

    return (
      <div className="container py-8">
        <UserProfile username={params.user} userData={userData} />
      </div>
    )
  } catch (error) {
    console.error("Error fetching user data:", error)
    notFound()
    return null
  }
}

----
app/api/auth/[...nextauth]/route.ts
import NextAuth, { type NextAuthOptions } from "next-auth"
import GitHubProvider from "next-auth/providers/github"

// Extend the default session type
declare module "next-auth" {
  interface Session {
    accessToken?: string
  }
}

// Define auth options
const authOptions: NextAuthOptions = {
  providers: [
    GitHubProvider({
      clientId: process.env.GITHUB_CLIENT_ID || "",
      clientSecret: process.env.GITHUB_CLIENT_SECRET || "",
      authorization: {
        params: {
          scope: "repo,read:user,user:email",
        },
      },
    }),
  ],
  callbacks: {
    async jwt({ token, account }: { token: any; account: any }) {
      // Initial sign in
      if (account) {
        token.accessToken = account.access_token
      }
      return token
    },
    async session({ session, token }: { session: any; token: any }) {
      // Send properties to the client
      session.accessToken = token.accessToken
      return session
    },
  },
  secret: process.env.NEXTAUTH_SECRET,
  debug: process.env.NODE_ENV !== "production",
}

// Initialize NextAuth
const handler = NextAuth(authOptions)

export { handler as GET, handler as POST, authOptions }

----
app/api/hello/route.ts
import { NextResponse } from "next/server"

export async function GET() {
  // Return a simple JSON response
  return NextResponse.json({ message: "Hello World" })
}

----
app/api/repos/[user]/[repo]/content/route.ts
import { NextResponse } from "next/server"
import { Octokit } from "@octokit/rest"

const PUBLIC_GITHUB_TOKEN = process.env.PUBLIC_GITHUB_TOKEN || ""

export async function GET(request: Request, { params }: { params: { user: string; repo: string } }) {
  const { user, repo } = params
  const { searchParams } = new URL(request.url)
  const path = searchParams.get("path")
  const ref = searchParams.get("ref") || "main"

  if (!path) {
    return NextResponse.json({ error: "Path parameter is required" }, { status: 400 })
  }

  try {
    const octokit = new Octokit({ auth: PUBLIC_GITHUB_TOKEN })
    const { data } = await octokit.rest.repos.getContent({
      owner: user,
      repo: repo,
      path: path,
      ref: ref,
    })

    if (Array.isArray(data)) {
      return NextResponse.json({ error: "Path points to a directory, not a file" }, { status: 400 })
    }

    if (data.type !== "file") {
      return NextResponse.json({ error: "Path does not point to a file" }, { status: 400 })
    }

    // Get the content
    const content = Buffer.from(data.content, "base64").toString("utf-8")

    // Check if content appears to be binary
    const isBinary = detectBinaryContent(content)

    return NextResponse.json({
      name: data.name,
      path: data.path,
      size: data.size,
      content: isBinary ? "Binary file not shown" : content,
      isBinary: isBinary,
      sha: data.sha,
      url: data.html_url,
    })
  } catch (error) {
    console.error("Error fetching file content:", error)
    return NextResponse.json({ error: "Failed to fetch file content", message: error.message }, { status: 500 })
  }
}

// Helper function to detect binary content
function detectBinaryContent(content: string): boolean {
  // Check for null bytes (a clear indicator of binary content)
  if (content.includes("\0")) {
    return true
  }

  // Count non-printable characters
  let nonPrintableCount = 0
  const sampleSize = Math.min(content.length, 1000) // Check first 1000 chars

  for (let i = 0; i < sampleSize; i++) {
    const code = content.charCodeAt(i)
    // Count control characters (except common whitespace) and other non-printable chars
    if ((code < 32 && ![9, 10, 13].includes(code)) || (code >= 127 && code <= 159)) {
      nonPrintableCount++
    }
  }

  // If more than 5% of characters are non-printable, consider it binary
  return nonPrintableCount / sampleSize > 0.05
}

----
app/api/repos/[user]/[repo]/issues/[id]/route.ts
import { NextResponse } from "next/server"

export async function GET(request: Request, { params }: { params: { user: string; repo: string; id: string } }) {
  const { user, repo, id } = params
  const issueId = Number.parseInt(id)

  // Mock issue data
  const isOpen = issueId % 2 === 0 // Even numbers are open, odd are closed

  const issueData = {
    id: issueId,
    number: issueId,
    title: `Issue #${issueId}: ${isOpen ? "Open" : "Closed"} issue in ${repo}`,
    state: isOpen ? "open" : "closed",
    user: {
      login: issueId % 3 === 0 ? user : `contributor-${(issueId % 5) + 1}`,
      avatar_url:
        issueId % 3 === 0
          ? `https://github.com/${user}.png`
          : `https://github.com/contributor-${(issueId % 5) + 1}.png`,
    },
    created_at: new Date(Date.now() - issueId * 86400000).toISOString(),
    updated_at: new Date(Date.now() - issueId * 43200000).toISOString(),
    closed_at: isOpen ? null : new Date(Date.now() - issueId * 21600000).toISOString(),
    comments: Math.floor(Math.random() * 10),
    body: `This is the body of issue #${issueId} in the ${repo} repository.

It contains a detailed description of the issue with multiple paragraphs.

## Steps to reproduce
1. Clone the repository
2. Run \`npm install\`
3. Start the application with \`npm start\`
4. Observe the issue

## Expected behavior
The application should work correctly.

## Actual behavior
The application crashes with an error.`,
    labels: [
      { name: "bug", color: "d73a4a" },
      { name: "enhancement", color: "a2eeef" },
    ],
  }

  // Mock comments
  const comments = Array.from({ length: issueData.comments }, (_, i) => {
    return {
      id: i + 1,
      user: {
        login: i % 2 === 0 ? user : `contributor-${(i % 5) + 1}`,
        avatar_url:
          i % 2 === 0 ? `https://github.com/${user}.png` : `https://github.com/contributor-${(i % 5) + 1}.png`,
      },
      created_at: new Date(Date.now() - (issueId + i) * 3600000).toISOString(),
      body: `This is comment #${i + 1} on issue #${issueId}.

It contains some text that discusses the issue.`,
    }
  })

  return NextResponse.json({
    issue: issueData,
    comments,
  })
}

----
app/api/repos/[user]/[repo]/issues/route.ts
import { NextResponse } from "next/server"

export async function GET(request: Request, { params }: { params: { user: string; repo: string } }) {
  const { user, repo } = params

  // Get query parameters
  const { searchParams } = new URL(request.url)
  const page = Number.parseInt(searchParams.get("page") || "1")
  const perPage = Number.parseInt(searchParams.get("per_page") || "10")
  const state = searchParams.get("state") || "open"

  // Generate mock issues
  const totalIssues = 42 // Mock total number of issues
  const openIssues = 28 // Mock number of open issues
  const closedIssues = totalIssues - openIssues

  const issueCount = state === "open" ? openIssues : state === "closed" ? closedIssues : totalIssues

  // Calculate pagination
  const totalPages = Math.ceil(issueCount / perPage)
  const currentPage = Math.min(page, totalPages)
  const startIndex = (currentPage - 1) * perPage
  const endIndex = Math.min(startIndex + perPage, issueCount)

  // Generate issues for the current page
  const issues = Array.from({ length: endIndex - startIndex }, (_, i) => {
    const issueIndex = startIndex + i + 1
    const isOpen = state === "open" ? true : state === "closed" ? false : issueIndex <= openIssues

    return {
      id: issueIndex,
      number: issueIndex,
      title: `Issue #${issueIndex}: ${isOpen ? "Open" : "Closed"} issue in ${repo}`,
      state: isOpen ? "open" : "closed",
      user: {
        login: issueIndex % 3 === 0 ? user : `contributor-${(issueIndex % 5) + 1}`,
        avatar_url:
          issueIndex % 3 === 0
            ? `https://github.com/${user}.png`
            : `https://github.com/contributor-${(issueIndex % 5) + 1}.png`,
      },
      created_at: new Date(Date.now() - issueIndex * 86400000).toISOString(), // Each issue is a day older
      updated_at: new Date(Date.now() - issueIndex * 43200000).toISOString(), // Each issue was updated 12 hours after creation
      comments: Math.floor(Math.random() * 10),
      body: `This is the body of issue #${issueIndex} in the ${repo} repository. It contains a detailed description of the issue.`,
      labels: [
        { name: "bug", color: "d73a4a" },
        { name: "enhancement", color: "a2eeef" },
      ],
    }
  })

  return NextResponse.json({
    issues,
    pagination: {
      page: currentPage,
      perPage,
      totalIssues: issueCount,
      totalPages,
    },
    stats: {
      openIssues,
      closedIssues,
      totalIssues,
    },
  })
}

----
app/api/repos/[user]/[repo]/route.ts
import { NextResponse } from "next/server"
import { Octokit } from "@octokit/rest"

const PUBLIC_GITHUB_TOKEN = process.env.PUBLIC_GITHUB_TOKEN || ""

export async function GET(
  _request: Request,
  { params }: { params: { user: string; repo: string } },
) {
  const { user, repo } = params

  try {
    const octokit = new Octokit({ auth: PUBLIC_GITHUB_TOKEN })
    const { data } = await octokit.rest.repos.get({ owner: user, repo })
    return NextResponse.json(data)
  } catch (error: any) {
    console.error("Error fetching repository data:", error)
    return NextResponse.json(
      { error: "Failed to fetch repository" },
      { status: 500 },
    )
  }
}

----
app/api/repos/[user]/route.ts
import { NextResponse } from "next/server"
import { Octokit } from "@octokit/rest"

const PUBLIC_GITHUB_TOKEN = process.env.PUBLIC_GITHUB_TOKEN || ""

export async function GET(
  request: Request,
  { params }: { params: { user: string } },
) {
  const { user } = params

  const { searchParams } = new URL(request.url)
  const page = Number.parseInt(searchParams.get("page") || "1")
  const perPage = Number.parseInt(searchParams.get("per_page") || "10")

  try {
    const octokit = new Octokit({ auth: PUBLIC_GITHUB_TOKEN })

    const { data: userData } = await octokit.rest.users.getByUsername({
      username: user,
    })

    const { data: repos } = await octokit.rest.repos.listForUser({
      username: user,
      per_page: perPage,
      page,
      sort: "updated",
    })

    return NextResponse.json({
      user: userData,
      repositories: repos,
      pagination: {
        page,
        perPage,
      },
    })
  } catch (error: any) {
    console.error("Error fetching repositories:", error)
    return NextResponse.json(
      { error: "Failed to fetch repositories" },
      { status: 500 },
    )
  }
}

----
app/api/send-email/route.ts
import { NextResponse } from "next/server"

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { to, from, subject, text } = body

    // In production, you would use Resend or another email service here
    console.log(`Sending email:
      To: ${to}
      From: ${from}
      Subject: ${subject}
      Text: ${text}
    `)

    // For demo purposes, we'll just log and return success
    return NextResponse.json({ success: true })
  } catch (error) {
    console.error("Error sending email:", error)
    return NextResponse.json({ error: "Failed to send email" }, { status: 500 })
  }
}

----
app/api/stats/route.ts
import { NextResponse } from "next/server"

// Sample data for user activity
export const userActivityData = [
  { month: "Jan", users: 12000 },
  { month: "Feb", users: 14000 },
  { month: "Mar", users: 15500 },
  { month: "Apr", users: 17000 },
  { month: "May", users: 18500 },
  { month: "Jun", users: 20000 },
  { month: "Jul", users: 21500 },
  { month: "Aug", users: 22000 },
  { month: "Sep", users: 23000 },
  { month: "Oct", users: 24000 },
  { month: "Nov", users: 24500 },
  { month: "Dec", users: 24738 },
]

// Sample data for repositories analyzed
export const reposAnalyzedData = [
  { month: "Jan", repos: 1200000 },
  { month: "Feb", repos: 1500000 },
  { month: "Mar", repos: 1700000 },
  { month: "Apr", repos: 1900000 },
  { month: "May", repos: 2100000 },
  { month: "Jun", repos: 2300000 },
  { month: "Jul", repos: 2500000 },
  { month: "Aug", repos: 2700000 },
  { month: "Sep", repos: 2900000 },
  { month: "Oct", repos: 3000000 },
  { month: "Nov", repos: 3100000 },
  { month: "Dec", repos: 3200000 },
]

export async function GET(request: Request) {
  // Get the query parameters
  const { searchParams } = new URL(request.url)
  const type = searchParams.get("type")
  const format = searchParams.get("format") || "full" // full or mobile

  let responseData = {}

  if (type === "user-activity") {
    // Return user activity data
    responseData = {
      data:
        format === "mobile"
          ? userActivityData.slice(-6) // Last 6 months for mobile
          : userActivityData,
      currentUsers: 24738,
      growthPercentage: 12.4,
    }
  } else if (type === "repos-analyzed") {
    // Return repositories analyzed data
    responseData = {
      data:
        format === "mobile"
          ? reposAnalyzedData.slice(-6) // Last 6 months for mobile
          : reposAnalyzedData,
      totalRepos: 3200000,
      growthPercentage: 18.7,
    }
  } else if (type === "tokens-used") {
    // Return token usage data
    responseData = {
      monthlyData: [35, 45, 60, 55, 70, 65, 90, 85, 95, 100, 120, 110],
      totalTokens: 1.2, // In billions
    }
  } else {
    // Return all stats
    responseData = {
      userActivity: {
        data: format === "mobile" ? userActivityData.slice(-6) : userActivityData,
        currentUsers: 24738,
        growthPercentage: 12.4,
      },
      reposAnalyzed: {
        data: format === "mobile" ? reposAnalyzedData.slice(-6) : reposAnalyzedData,
        totalRepos: 3200000,
        growthPercentage: 18.7,
      },
      tokensUsed: {
        monthlyData: [35, 45, 60, 55, 70, 65, 90, 85, 95, 100, 120, 110],
        totalTokens: 1.2, // In billions
      },
    }
  }

  return NextResponse.json(responseData)
}

----
app/api/test/route.ts
import { NextResponse } from "next/server"

export async function GET() {
  return NextResponse.json({ status: "ok", message: "API is working" })
}

----
app/docs/[repo]/page.tsx
import { notFound } from "next/navigation"
import Link from "next/link"
import { ArrowLeft, Star, GitFork, Eye } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"

// Mock repository data
const repositories = {
  "open-reusables": {
    name: "open-reusables",
    description: "A VS Code extension to open a reusable or variable file from a help article markdown file",
    language: "JavaScript",
    languageColor: "#f1e05a",
    stars: 124,
    forks: 18,
    watchers: 5,
    readme: `# Open Reusables

A VS Code extension that allows you to quickly open reusable components or variable files referenced in markdown documentation.

## Features

- Open referenced files directly from markdown
- Support for multiple file formats
- Customizable settings
- Works with GitHub-flavored markdown

## Installation

1. Open VS Code
2. Go to Extensions
3. Search for "Open Reusables"
4. Click Install

## Usage

When viewing a markdown file that references other files in your workspace, simply hover over the file path and click the "Open" button that appears.

## Configuration

You can customize the extension behavior in your settings.json file:

\`\`\`json
{
  "openReusables.enableHover": true,
  "openReusables.supportedFileTypes": [".js", ".ts", ".jsx", ".tsx", ".css"]
}
\`\`\`

## License

MIT
`,
  },
  "simple-php-website": {
    name: "simple-php-website",
    description: "A simple and minimal website built with PHP.",
    language: "HTML",
    languageColor: "#e34c26",
    stars: 87,
    forks: 32,
    watchers: 8,
    readme: `# Simple PHP Website

A simple and minimal website built with PHP.

## Features

- Clean, simple codebase
- No dependencies
- Easy to customize
- Responsive design

## Installation

1. Clone the repository
2. Upload to your web server
3. Navigate to the site in your browser

## Structure

\`\`\`
/
‚îú‚îÄ‚îÄ index.php
‚îú‚îÄ‚îÄ about.php
‚îú‚îÄ‚îÄ contact.php
‚îú‚îÄ‚îÄ includes/
‚îÇ   ‚îú‚îÄ‚îÄ header.php
‚îÇ   ‚îú‚îÄ‚îÄ footer.php
‚îÇ   ‚îî‚îÄ‚îÄ functions.php
‚îî‚îÄ‚îÄ assets/
    ‚îú‚îÄ‚îÄ css/
    ‚îú‚îÄ‚îÄ js/
    ‚îî‚îÄ‚îÄ images/
\`\`\`

## License

MIT
`,
  },
  "version-identifier": {
    name: "version-identifier",
    description: "A playground repo for experimenting on a new VS Code extension",
    language: "TypeScript",
    languageColor: "#3178c6",
    stars: 56,
    forks: 7,
    watchers: 3,
    readme: `# Version Identifier

A playground repository for experimenting with a new VS Code extension that helps identify and manage package versions.

## Features

- Detect version conflicts
- Suggest updates
- Track dependencies
- Visualize version relationships

## Development

This is an experimental project. To contribute:

1. Clone the repository
2. Run \`npm install\`
3. Open in VS Code
4. Press F5 to start debugging

## Project Structure

\`\`\`
/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ extension.ts
‚îÇ   ‚îú‚îÄ‚îÄ commands/
‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îî‚îÄ‚îÄ providers/
‚îú‚îÄ‚îÄ test/
‚îî‚îÄ‚îÄ package.json
\`\`\`

## License

MIT
`,
  },
  "onboarding-actions": {
    name: "onboarding-actions",
    description: "GitHub Actions for repository onboarding and setup automation",
    language: "YAML",
    languageColor: "#cb171e",
    stars: 42,
    forks: 12,
    watchers: 6,
    readme: `# Onboarding Actions

A collection of GitHub Actions workflows for repository onboarding and setup automation.

## Available Actions

- **repo-setup**: Initializes repository with standard labels, branch protection, and templates
- **team-notifier**: Notifies team members when a new repository is created
- **dependency-setup**: Sets up standard dependencies and configuration
- **ci-workflow**: Adds continuous integration workflow

## Usage

Add these actions to your organization's template repositories or include them directly in your workflow:

\`\`\`yaml
name: Repository Setup
on:
  push:
    branches: [main]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: your-org/onboarding-actions/repo-setup@main
        with:
          token: \${{ secrets.GITHUB_TOKEN }}
\`\`\`

## License

MIT
`,
  },
}

export default function RepoPage({ params }: { params: { repo: string } }) {
  const repo = repositories[params.repo]

  if (!repo) {
    notFound()
  }

  return (
    <div className="container py-8">
      <div className="mb-8">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="ghost" size="sm" asChild>
            <Link href="/docs">
              <ArrowLeft className="h-4 w-4 mr-1" />
              Back to docs
            </Link>
          </Button>
        </div>

        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-6">
          <div>
            <h1 className="text-3xl font-bold">{repo.name}</h1>
            <p className="text-muted-foreground">{repo.description}</p>
          </div>

          <div className="flex items-center gap-4">
            <div className="flex items-center gap-1 text-sm">
              <Eye className="h-4 w-4" />
              <span>{repo.watchers}</span>
              <span className="text-muted-foreground">watching</span>
            </div>
            <div className="flex items-center gap-1 text-sm">
              <Star className="h-4 w-4" />
              <span>{repo.stars}</span>
              <span className="text-muted-foreground">stars</span>
            </div>
            <div className="flex items-center gap-1 text-sm">
              <GitFork className="h-4 w-4" />
              <span>{repo.forks}</span>
              <span className="text-muted-foreground">forks</span>
            </div>
          </div>
        </div>

        <div className="border-b">
          <Tabs defaultValue="code" className="w-full">
            <TabsList className="h-10 bg-transparent">
              <TabsTrigger
                value="code"
                className="data-[state=active]:border-b-2 data-[state=active]:border-green-500 data-[state=active]:bg-transparent rounded-none px-4 h-10"
              >
                Code
              </TabsTrigger>
              <TabsTrigger
                value="issues"
                className="data-[state=active]:border-b-2 data-[state=active]:border-green-500 data-[state=active]:bg-transparent rounded-none px-4 h-10"
              >
                Issues
              </TabsTrigger>
              <TabsTrigger
                value="pull-requests"
                className="data-[state=active]:border-b-2 data-[state=active]:border-green-500 data-[state=active]:bg-transparent rounded-none px-4 h-10"
              >
                Pull Requests
              </TabsTrigger>
            </TabsList>
          </Tabs>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        <div className="md:col-span-2">
          <div className="border rounded-lg p-6">
            <div className="prose dark:prose-invert max-w-none">
              <div dangerouslySetInnerHTML={{ __html: repo.readme.replace(/\n/g, "<br />") }} />
            </div>
          </div>
        </div>

        <div className="space-y-6">
          <div className="border rounded-lg p-4">
            <h3 className="text-lg font-semibold mb-2">About</h3>
            <p className="text-sm text-muted-foreground mb-4">{repo.description}</p>
            <div className="flex items-center gap-2 text-sm">
              <span className="h-3 w-3 rounded-full" style={{ backgroundColor: repo.languageColor }}></span>
              <span>{repo.language}</span>
            </div>
          </div>

          <div className="border rounded-lg p-4">
            <h3 className="text-lg font-semibold mb-2">Releases</h3>
            <p className="text-sm text-muted-foreground">No releases published</p>
          </div>

          <div className="border rounded-lg p-4">
            <h3 className="text-lg font-semibold mb-2">Contributors</h3>
            <p className="text-sm text-muted-foreground">No contributors yet</p>
          </div>
        </div>
      </div>
    </div>
  )
}

----
app/docs/api/page.tsx
import type { Metadata } from "next"
import Link from "next/link"
import { Code2Icon, ArrowLeftIcon } from "lucide-react"

export const metadata: Metadata = {
  title: "API Reference | GitHub.GG",
  description:
    "API documentation for GitHub.GG - access repository analysis, code visualization, and insights programmatically.",
}

export default function ApiDocsPage() {
  return (
    <div className="container max-w-6xl py-10 px-4 md:px-6">
      <Link href="/docs" className="inline-flex items-center gap-2 text-muted-foreground hover:text-primary mb-8">
        <ArrowLeftIcon className="h-4 w-4" />
        Back to Documentation
      </Link>

      <div className="flex flex-col items-center text-center mb-12">
        <div className="w-16 h-16 bg-primary rounded-lg flex items-center justify-center mb-4">
          <Code2Icon className="h-8 w-8 text-primary-foreground" />
        </div>
        <h1 className="text-4xl font-bold tracking-tight mb-4">API Reference</h1>
        <p className="text-xl text-muted-foreground max-w-3xl">
          Access GitHub.GG features programmatically through our comprehensive API.
        </p>
      </div>

      <div className="space-y-12">
        <section>
          <h2 className="text-3xl font-bold mb-6 border-b pb-2">Authentication</h2>
          <p className="mb-4">To use the GitHub.GG API, you need to authenticate using an API key or OAuth token.</p>

          <h3 className="text-2xl font-semibold mb-3">API Keys</h3>
          <p className="mb-4">
            You can generate an API key in your account settings. Include the API key in the request header:
          </p>

          <div className="bg-muted p-4 rounded-md mb-6">
            <pre className="font-mono text-sm whitespace-pre-wrap">{`Authorization: Bearer YOUR_API_KEY`}</pre>
          </div>

          <h3 className="text-2xl font-semibold mb-3">OAuth Authentication</h3>
          <p className="mb-4">For applications that need to act on behalf of users, use OAuth 2.0:</p>

          <div className="bg-muted p-4 rounded-md mb-6">
            <pre className="font-mono text-sm whitespace-pre-wrap">
              {`GET https://github.gg/oauth/authorize?client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_REDIRECT_URI&scope=repo,user`}
            </pre>
          </div>
        </section>

        <section>
          <h2 className="text-3xl font-bold mb-6 border-b pb-2">Endpoints</h2>

          <div className="space-y-8">
            <div>
              <h3 className="text-2xl font-semibold mb-3">Repository Analysis</h3>
              <p className="mb-4">Get detailed analysis of a repository:</p>

              <div className="bg-muted p-4 rounded-md mb-4">
                <pre className="font-mono text-sm whitespace-pre-wrap">{`GET /api/repos/:owner/:repo/analysis`}</pre>
              </div>

              <h4 className="text-lg font-semibold mb-2">Parameters</h4>
              <ul className="list-disc pl-6 space-y-2 mb-4">
                <li>
                  <code className="bg-card px-1 py-0.5 rounded">owner</code> - Repository owner
                </li>
                <li>
                  <code className="bg-card px-1 py-0.5 rounded">repo</code> - Repository name
                </li>
              </ul>

              <h4 className="text-lg font-semibold mb-2">Response</h4>
              <div className="bg-muted p-4 rounded-md">
                <pre className="font-mono text-sm whitespace-pre-wrap">
                  {`{
  "codeQuality": {
    "score": 85,
    "issues": [
      { "type": "complexity", "count": 12, "details": "..." }
    ]
  },
  "dependencies": {
    "count": 45,
    "outdated": 3,
    "vulnerable": 1
  },
  "performance": {
    "score": 92,
    "metrics": { ... }
  }
}`}
                </pre>
              </div>
            </div>

            <div>
              <h3 className="text-2xl font-semibold mb-3">Code Structure</h3>
              <p className="mb-4">Get the structure of a repository as a Mermaid diagram:</p>

              <div className="bg-muted p-4 rounded-md mb-4">
                <pre className="font-mono text-sm whitespace-pre-wrap">{`GET /api/repos/:owner/:repo/diagram`}</pre>
              </div>

              <h4 className="text-lg font-semibold mb-2">Parameters</h4>
              <ul className="list-disc pl-6 space-y-2 mb-4">
                <li>
                  <code className="bg-card px-1 py-0.5 rounded">owner</code> - Repository owner
                </li>
                <li>
                  <code className="bg-card px-1 py-0.5 rounded">repo</code> - Repository name
                </li>
                <li>
                  <code className="bg-card px-1 py-0.5 rounded">type</code> (optional) - Diagram type (directory, class,
                  dependency)
                </li>
              </ul>

              <h4 className="text-lg font-semibold mb-2">Response</h4>
              <div className="bg-muted p-4 rounded-md">
                <pre className="font-mono text-sm whitespace-pre-wrap">
                  {`{
  "diagram": "graph TD;\\n  A[src] --> B[components];\\n  A --> C[pages];\\n  ...",
  "type": "directory"
}`}
                </pre>
              </div>
            </div>

            <div>
              <h3 className="text-2xl font-semibold mb-3">Search</h3>
              <p className="mb-4">Search within a repository:</p>

              <div className="bg-muted p-4 rounded-md mb-4">
                <pre className="font-mono text-sm whitespace-pre-wrap">
                  {`GET /api/repos/:owner/:repo/search?q=:query`}
                </pre>
              </div>

              <h4 className="text-lg font-semibold mb-2">Parameters</h4>
              <ul className="list-disc pl-6 space-y-2 mb-4">
                <li>
                  <code className="bg-card px-1 py-0.5 rounded">owner</code> - Repository owner
                </li>
                <li>
                  <code className="bg-card px-1 py-0.5 rounded">repo</code> - Repository name
                </li>
                <li>
                  <code className="bg-card px-1 py-0.5 rounded">q</code> - Search query
                </li>
                <li>
                  <code className="bg-card px-1 py-0.5 rounded">path</code> (optional) - Filter by file path
                </li>
                <li>
                  <code className="bg-card px-1 py-0.5 rounded">extension</code> (optional) - Filter by file extension
                </li>
              </ul>

              <h4 className="text-lg font-semibold mb-2">Response</h4>
              <div className="bg-muted p-4 rounded-md">
                <pre className="font-mono text-sm whitespace-pre-wrap">
                  {`{
  "results": [
    {
      "path": "src/components/Button.tsx",
      "line": 24,
      "content": "function handleClick() { ... }",
      "matches": [{ "start": 9, "end": 20 }]
    },
    ...
  ],
  "total": 15
}`}
                </pre>
              </div>
            </div>
          </div>
        </section>

        <section>
          <h2 className="text-3xl font-bold mb-6 border-b pb-2">Rate Limits</h2>
          <p className="mb-4">The GitHub.GG API has the following rate limits:</p>

          <ul className="list-disc pl-6 space-y-2 mb-4">
            <li>
              <strong>Free tier:</strong> 60 requests per hour
            </li>
            <li>
              <strong>Pro tier:</strong> 5,000 requests per hour
            </li>
            <li>
              <strong>Enterprise tier:</strong> 20,000 requests per hour
            </li>
          </ul>

          <p>Rate limit information is included in the response headers:</p>

          <div className="bg-muted p-4 rounded-md">
            <pre className="font-mono text-sm whitespace-pre-wrap">
              {`X-RateLimit-Limit: 60
X-RateLimit-Remaining: 58
X-RateLimit-Reset: 1635774000`}
            </pre>
          </div>
        </section>

        <section>
          <h2 className="text-3xl font-bold mb-6 border-b pb-2">Error Codes</h2>
          <p className="mb-4">The API uses standard HTTP status codes and returns detailed error messages:</p>

          <div className="overflow-x-auto">
            <table className="w-full border-collapse">
              <thead>
                <tr className="bg-muted">
                  <th className="border border-border p-2 text-left">Status Code</th>
                  <th className="border border-border p-2 text-left">Description</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td className="border border-border p-2">400</td>
                  <td className="border border-border p-2">Bad Request - Invalid parameters</td>
                </tr>
                <tr>
                  <td className="border border-border p-2">401</td>
                  <td className="border border-border p-2">Unauthorized - Authentication required</td>
                </tr>
                <tr>
                  <td className="border border-border p-2">403</td>
                  <td className="border border-border p-2">Forbidden - Insufficient permissions</td>
                </tr>
                <tr>
                  <td className="border border-border p-2">404</td>
                  <td className="border border-border p-2">Not Found - Resource doesn't exist</td>
                </tr>
                <tr>
                  <td className="border border-border p-2">429</td>
                  <td className="border border-border p-2">Too Many Requests - Rate limit exceeded</td>
                </tr>
                <tr>
                  <td className="border border-border p-2">500</td>
                  <td className="border border-border p-2">Internal Server Error</td>
                </tr>
              </tbody>
            </table>
          </div>
        </section>
      </div>

      <div className="mt-12 bg-muted p-6 rounded-lg border border-border">
        <h2 className="text-xl font-bold mb-4">Need Help with the API?</h2>
        <p className="mb-4">If you have any questions or need assistance with the API, feel free to reach out:</p>
        <div className="flex flex-wrap gap-4">
          <Link
            href="https://github.com/github-gg/api-docs/issues/new"
            className="inline-flex items-center gap-2 bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90"
          >
            Report an API Issue
          </Link>
          <Link
            href="mailto:api-support@github.gg"
            className="inline-flex items-center gap-2 bg-card border border-border px-4 py-2 rounded-md hover:bg-muted"
          >
            Contact API Support
          </Link>
        </div>
      </div>
    </div>
  )
}

----
app/docs/features/mermaid-diagrams/page.tsx
export default function MermaidDiagramsPage() {
  return (
    <div className="space-y-8">
      <div className="space-y-4">
        <h1 className="text-4xl font-bold tracking-tight">Mermaid Diagrams</h1>
        <p className="text-xl text-muted-foreground">
          Visualize repository structure and relationships with automatically generated Mermaid diagrams.
        </p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Overview</h2>
        <p className="leading-7">
          GitHub.GG automatically generates Mermaid diagrams to help you understand the structure and relationships
          within a repository. These diagrams provide visual representations of directory structures, component
          relationships, and code dependencies.
        </p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Accessing Diagrams</h2>
        <p className="leading-7">To view the Mermaid diagrams for a repository:</p>

        <ol className="list-decimal pl-6 space-y-2">
          <li>
            Navigate to any repository using the GitHub.GG domain (e.g.,{" "}
            <code className="bg-muted px-1.5 py-0.5 rounded-md">https://github.gg/facebook/react</code>)
          </li>
          <li>Click on the "Diagram" tab in the repository navigation</li>
          <li>The diagram will be automatically generated and displayed</li>
        </ol>

        <div className="my-6 border rounded-md overflow-hidden">
          <div className="bg-muted p-4 border-b">
            <p className="font-medium">Example Diagram View</p>
          </div>
          <div className="p-4 bg-background">
            <div className="aspect-video relative bg-muted rounded-md flex items-center justify-center">
              <p className="text-muted-foreground">Diagram preview placeholder</p>
            </div>
          </div>
        </div>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Types of Diagrams</h2>
        <p className="leading-7">
          GitHub.GG generates several types of diagrams to help you understand different aspects of a repository:
        </p>

        <div className="space-y-4">
          <div>
            <h3 className="text-xl font-semibold">Directory Structure</h3>
            <p className="leading-7">
              Visualizes the folder and file organization of the repository, helping you understand the project layout.
            </p>
          </div>

          <div>
            <h3 className="text-xl font-semibold">Component Relationships</h3>
            <p className="leading-7">
              Shows how different components or classes in the codebase relate to each other, including inheritance and
              composition relationships.
            </p>
          </div>

          <div>
            <h3 className="text-xl font-semibold">Dependency Graphs</h3>
            <p className="leading-7">
              Illustrates the dependencies between different modules or packages in the project.
            </p>
          </div>

          <div>
            <h3 className="text-xl font-semibold">Flow Charts</h3>
            <p className="leading-7">
              For certain types of code, GitHub.GG can generate flow charts that show the logical flow of operations.
            </p>
          </div>
        </div>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Interacting with Diagrams</h2>
        <p className="leading-7">The Mermaid diagrams in GitHub.GG are interactive:</p>

        <ul className="list-disc pl-6 space-y-2">
          <li>Hover over nodes to highlight relationships</li>
          <li>Click on nodes to focus on specific components</li>
          <li>Zoom in and out to explore complex diagrams</li>
          <li>Pan around to navigate large diagrams</li>
          <li>Export diagrams as SVG or PNG files</li>
        </ul>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Customizing Diagrams</h2>
        <p className="leading-7">You can customize the generated diagrams in several ways:</p>

        <ul className="list-disc pl-6 space-y-2">
          <li>Change the diagram type (flowchart, class diagram, etc.)</li>
          <li>Adjust the layout direction (top-down, left-right, etc.)</li>
          <li>Filter components to focus on specific parts of the codebase</li>
          <li>Change the theme to match your preferences</li>
        </ul>

        <p className="leading-7 mt-4">
          To access these customization options, look for the settings icon in the top-right corner of the diagram view.
        </p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Use Cases</h2>
        <p className="leading-7">Mermaid diagrams are particularly useful for:</p>

        <ul className="list-disc pl-6 space-y-2">
          <li>Onboarding new team members to a codebase</li>
          <li>Planning refactoring efforts</li>
          <li>Identifying architectural issues</li>
          <li>Documenting code structure</li>
          <li>Understanding complex dependencies</li>
        </ul>
      </div>
    </div>
  )
}

----
app/docs/features/sigma-code-view/page.tsx
export default function SigmaCodeViewPage() {
  return (
    <div className="space-y-8">
      <div className="space-y-4">
        <h1 className="text-4xl font-bold tracking-tight">Sigma Code View</h1>
        <p className="text-xl text-muted-foreground">
          Explore and navigate codebases with our interactive code visualization tool.
        </p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Overview</h2>
        <p className="leading-7">
          Sigma Code View is GitHub.GG's advanced code exploration tool that helps you understand complex codebases by
          visualizing relationships between files, functions, and classes. It provides an interactive interface for
          navigating code and understanding dependencies.
        </p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Accessing Sigma Code View</h2>
        <p className="leading-7">To access the Sigma Code View for a repository:</p>

        <ol className="list-decimal pl-6 space-y-2">
          <li>
            Navigate to any repository using the GitHub.GG domain (e.g.,{" "}
            <code className="bg-muted px-1.5 py-0.5 rounded-md">https://github.gg/facebook/react</code>)
          </li>
          <li>Click on the "Sigma" tab in the repository navigation</li>
          <li>The Sigma Code View will load and analyze the repository</li>
        </ol>

        <div className="my-6 border rounded-md overflow-hidden">
          <div className="bg-muted p-4 border-b">
            <p className="font-medium">Example Sigma Code View</p>
          </div>
          <div className="p-4 bg-background">
            <div className="aspect-video relative bg-muted rounded-md flex items-center justify-center">
              <p className="text-muted-foreground">Sigma Code View placeholder</p>
            </div>
          </div>
        </div>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Key Features</h2>

        <div className="space-y-4">
          <div>
            <h3 className="text-xl font-semibold">Interactive Code Navigation</h3>
            <p className="leading-7">
              Click on files, functions, or classes to navigate through the codebase. The visualization updates to show
              relationships and dependencies for the selected item.
            </p>
          </div>

          <div>
            <h3 className="text-xl font-semibold">Dependency Visualization</h3>
            <p className="leading-7">
              See which files import or are imported by the current file, helping you understand the impact of changes.
            </p>
          </div>

          <div>
            <h3 className="text-xl font-semibold">Function Call Graphs</h3>
            <p className="leading-7">
              Visualize which functions call other functions, making it easier to trace execution paths.
            </p>
          </div>

          <div>
            <h3 className="text-xl font-semibold">Code Search</h3>
            <p className="leading-7">
              Search for specific functions, classes, or patterns within the codebase and see results in context.
            </p>
          </div>

          <div>
            <h3 className="text-xl font-semibold">Syntax Highlighting</h3>
            <p className="leading-7">Code is displayed with full syntax highlighting for better readability.</p>
          </div>
        </div>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Navigation Controls</h2>
        <p className="leading-7">The Sigma Code View provides several controls for navigating and exploring code:</p>

        <ul className="list-disc pl-6 space-y-2">
          <li>
            <strong>Zoom:</strong> Use the mouse wheel or pinch gestures to zoom in and out
          </li>
          <li>
            <strong>Pan:</strong> Click and drag to move around the visualization
          </li>
          <li>
            <strong>Select:</strong> Click on nodes to select files or functions
          </li>
          <li>
            <strong>Expand/Collapse:</strong> Toggle visibility of dependencies
          </li>
          <li>
            <strong>Search:</strong> Use the search bar to find specific elements
          </li>
          <li>
            <strong>Filter:</strong> Filter by file type, directory, or other criteria
          </li>
        </ul>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Use Cases</h2>
        <p className="leading-7">Sigma Code View is particularly useful for:</p>

        <ul className="list-disc pl-6 space-y-2">
          <li>Understanding unfamiliar codebases</li>
          <li>Tracing execution paths through complex systems</li>
          <li>Identifying tightly coupled components</li>
          <li>Planning refactoring efforts</li>
          <li>Documenting code architecture</li>
          <li>Onboarding new team members</li>
        </ul>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Performance Considerations</h2>
        <p className="leading-7">
          For large repositories, the Sigma Code View may take some time to load as it analyzes the codebase. For
          optimal performance:
        </p>

        <ul className="list-disc pl-6 space-y-2">
          <li>Start with a specific directory rather than the entire repository</li>
          <li>Use filters to focus on relevant parts of the codebase</li>
          <li>Consider using a modern browser with good WebGL support</li>
          <li>For very large repositories, consider analyzing specific branches or tags</li>
        </ul>
      </div>
    </div>
  )
}

----
app/docs/getting-started/page.tsx
import Link from "next/link"
import { ArrowRight } from "lucide-react"

export default function GettingStartedPage() {
  return (
    <div className="space-y-8">
      <div className="space-y-4">
        <h1 className="text-4xl font-bold tracking-tight">Getting Started</h1>
        <p className="text-xl text-muted-foreground">
          Learn how to start using GitHub.GG to enhance your GitHub experience.
        </p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">How to Access GitHub.GG</h2>
        <p className="leading-7">
          GitHub.GG is a web-based tool that enhances your GitHub experience. You don't need to install anything -
          simply use our domain instead of the regular GitHub domain.
        </p>

        <div className="my-6 p-4 border rounded-md bg-muted">
          <h3 className="text-lg font-medium mb-2">URL Pattern</h3>
          <p className="font-mono mb-4">https://github.gg/owner/repository</p>

          <h3 className="text-lg font-medium mb-2">Example</h3>
          <p className="font-mono">https://github.gg/facebook/react</p>
        </div>

        <p className="leading-7">
          This will take you to our enhanced view of the repository with all GitHub.GG features available.
        </p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Repository Navigation</h2>
        <p className="leading-7">Once you're viewing a repository on GitHub.GG, you'll see our enhanced navigation:</p>

        <ul className="list-disc pl-6 space-y-2">
          <li>
            <strong>Code:</strong> Browse the repository files with our enhanced code viewer
          </li>
          <li>
            <strong>Diagram:</strong> View Mermaid diagrams of the repository structure
          </li>
          <li>
            <strong>Sigma:</strong> Explore the codebase with our advanced code navigation tool
          </li>
          <li>
            <strong>Issues:</strong> View and manage repository issues
          </li>
          <li>
            <strong>Pull Requests:</strong> Review and manage pull requests
          </li>
          <li>
            <strong>Actions:</strong> View GitHub Actions workflows
          </li>
          <li>
            <strong>Security:</strong> Access our enhanced security analysis
          </li>
          <li>
            <strong>Insights:</strong> Get detailed analytics about the repository
          </li>
        </ul>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Next Steps</h2>
        <p className="leading-7">
          Now that you know how to access GitHub.GG, explore these guides to learn more about specific features:
        </p>

        <ul className="space-y-2">
          <li>
            <Link href="/docs/features/code-browser" className="text-primary hover:underline flex items-center gap-1">
              <ArrowRight className="h-4 w-4" />
              Using the Enhanced Code Browser
            </Link>
          </li>
          <li>
            <Link
              href="/docs/features/mermaid-diagrams"
              className="text-primary hover:underline flex items-center gap-1"
            >
              <ArrowRight className="h-4 w-4" />
              Working with Mermaid Diagrams
            </Link>
          </li>
          <li>
            <Link
              href="/docs/features/sigma-code-view"
              className="text-primary hover:underline flex items-center gap-1"
            >
              <ArrowRight className="h-4 w-4" />
              Exploring Code with Sigma View
            </Link>
          </li>
          <li>
            <Link href="/docs/search/basic-search" className="text-primary hover:underline flex items-center gap-1">
              <ArrowRight className="h-4 w-4" />
              Using Advanced Search Features
            </Link>
          </li>
        </ul>
      </div>
    </div>
  )
}

----
app/docs/layout.tsx
import type React from "react"
import type { Metadata } from "next"

export const metadata: Metadata = {
  title: "GitHub.GG - Documentation",
  description:
    "A powerful tool for analyzing GitHub repositories and providing valuable insights about code quality, dependencies, and more.",
}

export default function DocsLayout({ children }: { children: React.ReactNode }) {
  return <>{children}</>
}

----
app/docs/loading.tsx
import { Skeleton } from "@/components/ui/skeleton"

export default function DocsLoading() {
  return (
    <div className="space-y-8">
      <div className="space-y-4">
        <Skeleton className="h-12 w-2/3" />
        <Skeleton className="h-6 w-full" />
      </div>

      <div className="space-y-4">
        <Skeleton className="h-8 w-1/3" />
        <Skeleton className="h-4 w-full" />
        <Skeleton className="h-4 w-5/6" />
        <Skeleton className="h-4 w-full" />
      </div>

      <div className="space-y-4">
        <Skeleton className="h-8 w-1/3" />
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {Array(6)
            .fill(0)
            .map((_, i) => (
              <div key={i} className="border rounded-md p-4 space-y-3">
                <Skeleton className="h-6 w-1/2" />
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-5/6" />
                <Skeleton className="h-4 w-1/4" />
              </div>
            ))}
        </div>
      </div>
    </div>
  )
}

----
app/docs/not-found.tsx
import Link from "next/link"
import { Button } from "@/components/ui/button"

export default function NotFound() {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center">
      <div className="text-center space-y-4">
        <h1 className="text-4xl font-bold">404</h1>
        <h2 className="text-2xl">Documentation Page Not Found</h2>
        <p className="text-muted-foreground">
          The documentation page you're looking for doesn't exist or has been moved.
        </p>
        <Button asChild>
          <Link href="/docs">Return to Docs</Link>
        </Button>
      </div>
    </div>
  )
}

----
app/docs/page.tsx
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"

export const metadata = {
  title: "GitHub.GG Documentation",
  description: "Documentation for GitHub.GG - A powerful tool for analyzing GitHub repositories",
}

export default function DocsPage() {
  return (
    <div className="flex min-h-screen flex-col">
      <main className="flex-1">
        <section className="w-full py-12 md:py-24 lg:py-32 bg-black">
          <div className="container px-4 md:px-6">
            <div className="flex flex-col items-center justify-center space-y-4 text-center">
              <div className="space-y-2">
                <div className="inline-block rounded-lg bg-black/20 px-3 py-1 text-sm text-green-500">
                  Documentation
                </div>
                <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl lg:text-6xl/none">
                  GitHub.GG
                </h1>
                <p className="mx-auto max-w-[700px] text-gray-400 md:text-xl">
                  A powerful tool for analyzing GitHub repositories and providing valuable insights about code quality,
                  dependencies, and more.
                </p>
              </div>
            </div>
          </div>
        </section>

        <section className="w-full py-12 md:py-24 lg:py-32 bg-black/90">
          <div className="container px-4 md:px-6">
            <div className="mx-auto grid max-w-5xl items-center gap-6 lg:grid-cols-2 lg:gap-12">
              <div className="space-y-4">
                <div className="inline-flex items-center gap-1 rounded-lg bg-green-500/10 px-3 py-1 text-sm text-green-500">
                  <span className="font-medium">How to Use</span>
                </div>
                <h2 className="text-3xl font-bold tracking-tighter md:text-4xl/tight">Simple and Straightforward</h2>
                <p className="text-gray-400 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">
                  Simply visit any GitHub repository using our domain:
                </p>
                <div className="rounded-lg bg-gray-900 p-4">
                  <code className="text-sm text-green-400">https://github.gg/owner/repository</code>
                </div>
                <p className="text-gray-400">For example:</p>
                <div className="rounded-lg bg-gray-900 p-4">
                  <code className="text-sm text-green-400">https://github.gg/lantos1618/inkwell_test</code>
                </div>
              </div>
              <div className="flex flex-col gap-2 min-h-[300px] items-center justify-center rounded-lg border border-gray-800 p-4">
                <div className="flex h-[200px] w-[200px] items-center justify-center rounded-full bg-gray-900">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="100"
                    height="100"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="text-green-500"
                  >
                    <path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4" />
                    <path d="M9 18c-4.51 2-5-2-7-2" />
                  </svg>
                </div>
                <div className="text-center">
                  <h3 className="text-xl font-bold">Instant Analysis</h3>
                  <p className="text-sm text-gray-400">Get immediate insights into any GitHub repository</p>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section className="w-full py-12 md:py-24 lg:py-32 bg-black">
          <div className="container px-4 md:px-6">
            <div className="mx-auto grid max-w-5xl gap-6">
              <div className="space-y-4">
                <h2 className="text-3xl font-bold tracking-tighter md:text-4xl/tight">Features</h2>
                <p className="text-gray-400 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">
                  GitHub.GG provides a comprehensive set of features to help you understand and analyze repositories.
                </p>
              </div>
              <div className="grid gap-6 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3">
                <Card className="bg-gray-900/50 border-gray-800">
                  <CardContent className="p-6">
                    <div className="space-y-4">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-green-500/10">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="h-5 w-5 text-green-500"
                        >
                          <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                          <polyline points="14 2 14 8 20 8" />
                          <path d="M12 18v-6" />
                          <path d="m9 15 3 3 3-3" />
                        </svg>
                      </div>
                      <div className="space-y-2">
                        <h3 className="text-xl font-bold">Code Visualization</h3>
                        <p className="text-gray-400">
                          Visualize code structure and dependencies with interactive diagrams.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                <Card className="bg-gray-900/50 border-gray-800">
                  <CardContent className="p-6">
                    <div className="space-y-4">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-green-500/10">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="h-5 w-5 text-green-500"
                        >
                          <path d="M12 20a8 8 0 1 0 0-16 8 8 0 0 0 0 16Z" />
                          <path d="M12 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z" />
                          <path d="M12 2v2" />
                          <path d="M12 22v-2" />
                          <path d="m17 20.66-1-1.73" />
                          <path d="M11 10.27 7 3.34" />
                          <path d="m20.66 17-1.73-1" />
                          <path d="m3.34 7 1.73 1" />
                          <path d="M14 12h8" />
                          <path d="M2 12h2" />
                          <path d="m20.66 7-1.73 1" />
                          <path d="m3.34 17 1.73-1" />
                          <path d="m17 3.34-1 1.73" />
                          <path d="m7 20.66 1-1.73" />
                        </svg>
                      </div>
                      <div className="space-y-2">
                        <h3 className="text-xl font-bold">Dependency Analysis</h3>
                        <p className="text-gray-400">
                          Identify and analyze dependencies to understand project structure.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                <Card className="bg-gray-900/50 border-gray-800">
                  <CardContent className="p-6">
                    <div className="space-y-4">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-green-500/10">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="h-5 w-5 text-green-500"
                        >
                          <path d="M22 12h-4l-3 9L9 3l-3 9H2" />
                        </svg>
                      </div>
                      <div className="space-y-2">
                        <h3 className="text-xl font-bold">Code Quality Metrics</h3>
                        <p className="text-gray-400">
                          Evaluate code quality with metrics like complexity and maintainability.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                <Card className="bg-gray-900/50 border-gray-800">
                  <CardContent className="p-6">
                    <div className="space-y-4">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-green-500/10">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="h-5 w-5 text-green-500"
                        >
                          <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10" />
                          <path d="m9 12 2 2 4-4" />
                        </svg>
                      </div>
                      <div className="space-y-2">
                        <h3 className="text-xl font-bold">Security Scanning</h3>
                        <p className="text-gray-400">Identify potential security vulnerabilities in the codebase.</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                <Card className="bg-gray-900/50 border-gray-800">
                  <CardContent className="p-6">
                    <div className="space-y-4">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-green-500/10">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="h-5 w-5 text-green-500"
                        >
                          <rect width="18" height="18" x="3" y="3" rx="2" />
                          <path d="M7 7h10" />
                          <path d="M7 12h10" />
                          <path d="M7 17h10" />
                        </svg>
                      </div>
                      <div className="space-y-2">
                        <h3 className="text-xl font-bold">Commit History</h3>
                        <p className="text-gray-400">Analyze commit patterns and contributor activity over time.</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                <Card className="bg-gray-900/50 border-gray-800">
                  <CardContent className="p-6">
                    <div className="space-y-4">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-green-500/10">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="h-5 w-5 text-green-500"
                        >
                          <path d="M2 9a3 3 0 0 1 0 6v-6Z" />
                          <path d="M14 9v6" />
                          <path d="M8 9v6" />
                          <path d="M22 9v6" />
                        </svg>
                      </div>
                      <div className="space-y-2">
                        <h3 className="text-xl font-bold">Performance Insights</h3>
                        <p className="text-gray-400">
                          Get insights into code performance and optimization opportunities.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </section>

        <section className="w-full py-12 md:py-24 lg:py-32 bg-black/90">
          <div className="container px-4 md:px-6">
            <div className="flex flex-col items-center justify-center space-y-4 text-center">
              <div className="space-y-2">
                <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">Ready to try GitHub.GG?</h2>
                <p className="mx-auto max-w-[700px] text-gray-400 md:text-xl">
                  Start analyzing your repositories today and gain valuable insights.
                </p>
              </div>
              <div className="space-x-4">
                <Button asChild size="lg" className="bg-green-600 hover:bg-green-700">
                  <Link href="https://github.gg">Try GitHub.GG</Link>
                </Button>
                <Button asChild variant="outline" size="lg">
                  <Link href="/docs/getting-started">Read Documentation</Link>
                </Button>
              </div>
            </div>
          </div>
        </section>

        <section className="w-full py-12 md:py-24 lg:py-32 bg-black">
          <div className="container px-4 md:px-6">
            <div className="mx-auto max-w-3xl space-y-4 text-center">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">Contact Us</h2>
              <p className="text-gray-400 md:text-xl">For feature requests, issues, or other questions, contact us:</p>
              <div className="flex justify-center space-x-4">
                <Link
                  href="https://github.com/lantos1618"
                  className="flex items-center space-x-2 text-green-500 hover:text-green-400"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="h-5 w-5"
                  >
                    <path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4" />
                    <path d="M9 18c-4.51 2-5-2-7-2" />
                  </svg>
                  <span>@lantos1618</span>
                </Link>
                <Link
                  href="https://github.com/nisten"
                  className="flex items-center space-x-2 text-green-500 hover:text-green-400"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="h-5 w-5"
                  >
                    <path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4" />
                    <path d="M9 18c-4.51 2-5-2-7-2" />
                  </svg>
                  <span>@nisten</span>
                </Link>
              </div>
            </div>
          </div>
        </section>
      </main>
    </div>
  )
}

----
app/docs/search/basic-search/page.tsx
export default function BasicSearchPage() {
  return (
    <div className="space-y-8">
      <div className="space-y-4">
        <h1 className="text-4xl font-bold tracking-tight">Basic Search</h1>
        <p className="text-xl text-muted-foreground">
          Learn how to use GitHub.GG's powerful search capabilities to find code and content.
        </p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Using the Search Bar</h2>
        <p className="leading-7">
          GitHub.GG provides an enhanced search experience compared to standard GitHub. To start searching:
        </p>

        <ol className="list-decimal pl-6 space-y-2">
          <li>Click on the search bar at the top of any GitHub.GG page</li>
          <li>Enter your search query</li>
          <li>Press Enter or click the search icon</li>
        </ol>

        <div className="my-6 border rounded-md overflow-hidden">
          <div className="bg-muted p-4 border-b">
            <p className="font-medium">Search Bar Location</p>
          </div>
          <div className="p-4 bg-background">
            <div className="aspect-video relative bg-muted rounded-md flex items-center justify-center">
              <p className="text-muted-foreground">Search bar screenshot placeholder</p>
            </div>
          </div>
        </div>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Search Syntax</h2>
        <p className="leading-7">
          GitHub.GG supports a variety of search operators to help you find exactly what you're looking for:
        </p>

        <div className="overflow-x-auto">
          <table className="w-full border-collapse">
            <thead>
              <tr className="bg-muted">
                <th className="border px-4 py-2 text-left">Operator</th>
                <th className="border px-4 py-2 text-left">Description</th>
                <th className="border px-4 py-2 text-left">Example</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td className="border px-4 py-2 font-mono">filename:</td>
                <td className="border px-4 py-2">Search for files with a specific name or extension</td>
                <td className="border px-4 py-2 font-mono">filename:*.js</td>
              </tr>
              <tr>
                <td className="border px-4 py-2 font-mono">path:</td>
                <td className="border px-4 py-2">Search within a specific directory path</td>
                <td className="border px-4 py-2 font-mono">path:src/components</td>
              </tr>
              <tr>
                <td className="border px-4 py-2 font-mono">language:</td>
                <td className="border px-4 py-2">Search for code in a specific language</td>
                <td className="border px-4 py-2 font-mono">language:typescript</td>
              </tr>
              <tr>
                <td className="border px-4 py-2 font-mono">repo:</td>
                <td className="border px-4 py-2">Search within a specific repository</td>
                <td className="border px-4 py-2 font-mono">repo:facebook/react</td>
              </tr>
              <tr>
                <td className="border px-4 py-2 font-mono">user:</td>
                <td className="border px-4 py-2">Search repositories owned by a specific user</td>
                <td className="border px-4 py-2 font-mono">user:facebook</td>
              </tr>
            </tbody>
          </table>
        </div>

        <p className="leading-7 mt-4">You can combine these operators to create more specific searches:</p>

        <div className="bg-muted p-4 rounded-md my-4">
          <p className="font-mono text-sm">useState language:typescript path:src/hooks</p>
        </div>

        <p className="leading-7">
          This would search for "useState" in TypeScript files within the src/hooks directory.
        </p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Search Results</h2>
        <p className="leading-7">
          Search results in GitHub.GG are organized to help you quickly find what you're looking for:
        </p>

        <ul className="list-disc pl-6 space-y-2">
          <li>
            <strong>Code Results:</strong> Matching code snippets with syntax highlighting
          </li>
          <li>
            <strong>File Results:</strong> Files that match your search criteria
          </li>
          <li>
            <strong>Repository Results:</strong> Repositories that match your search
          </li>
          <li>
            <strong>Issue Results:</strong> Issues that contain your search terms
          </li>
          <li>
            <strong>Pull Request Results:</strong> Pull requests that match your search
          </li>
        </ul>

        <p className="leading-7 mt-4">
          Results are ranked by relevance, with the most relevant matches appearing first.
        </p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Search Filters</h2>
        <p className="leading-7">After performing a search, you can further refine your results using filters:</p>

        <ul className="list-disc pl-6 space-y-2">
          <li>
            <strong>Language:</strong> Filter by programming language
          </li>
          <li>
            <strong>File Type:</strong> Filter by file extension
          </li>
          <li>
            <strong>Repository:</strong> Filter by repository
          </li>
          <li>
            <strong>User:</strong> Filter by user
          </li>
          <li>
            <strong>Date Range:</strong> Filter by when the code was committed
          </li>
        </ul>

        <p className="leading-7 mt-4">These filters appear in the sidebar of the search results page.</p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold tracking-tight">Next Steps</h2>
        <p className="leading-7">
          Now that you understand the basics of searching in GitHub.GG, you might want to explore:
        </p>

        <ul className="list-disc pl-6 space-y-2">
          <li>
            <a href="/docs/search/advanced-filters" className="text-primary hover:underline">
              Advanced Filters
            </a>{" "}
            - Learn about more sophisticated filtering options
          </li>
          <li>
            <a href="/docs/search/regex-search" className="text-primary hover:underline">
              Regex Search
            </a>{" "}
            - Use regular expressions for powerful pattern matching
          </li>
          <li>
            <a href="/docs/features/code-browser" className="text-primary hover:underline">
              Code Browser
            </a>{" "}
            - Navigate search results in context
          </li>
        </ul>
      </div>
    </div>
  )
}

----
app/explore/page.tsx
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"
import Image from "next/image"

// Mock trending repositories data
const trendingRepos = [
  {
    id: 1,
    name: "vercel/next.js",
    description: "The React Framework for the Web",
    stars: 112500,
    forks: 24800,
    language: "TypeScript",
    languageColor: "#3178c6",
  },
  {
    id: 2,
    name: "facebook/react",
    description: "A declarative, efficient, and flexible JavaScript library for building user interfaces.",
    stars: 213000,
    forks: 44200,
    language: "JavaScript",
    languageColor: "#f1e05a",
  },
  {
    id: 3,
    name: "microsoft/vscode",
    description: "Visual Studio Code",
    stars: 149000,
    forks: 26300,
    language: "TypeScript",
    languageColor: "#3178c6",
  },
  {
    id: 4,
    name: "tailwindlabs/tailwindcss",
    description: "A utility-first CSS framework for rapid UI development.",
    stars: 73400,
    forks: 3900,
    language: "CSS",
    languageColor: "#563d7c",
  },
  {
    id: 5,
    name: "denoland/deno",
    description: "A modern runtime for JavaScript and TypeScript.",
    stars: 89700,
    forks: 4800,
    language: "Rust",
    languageColor: "#dea584",
  },
  {
    id: 6,
    name: "sveltejs/svelte",
    description: "Cybernetically enhanced web apps",
    stars: 71900,
    forks: 3800,
    language: "TypeScript",
    languageColor: "#3178c6",
  },
]

// Mock featured topics data
const featuredTopics = [
  { id: 1, name: "react", repos: 1250000, description: "React is a JavaScript library for building user interfaces" },
  {
    id: 2,
    name: "typescript",
    repos: 980000,
    description: "TypeScript is a typed superset of JavaScript that compiles to plain JavaScript",
  },
  { id: 3, name: "nextjs", repos: 420000, description: "Next.js is a React framework for production" },
  { id: 4, name: "tailwindcss", repos: 310000, description: "A utility-first CSS framework for rapid UI development" },
  { id: 5, name: "ai", repos: 280000, description: "Artificial intelligence and machine learning projects" },
  { id: 6, name: "web-development", repos: 1800000, description: "Web development frameworks, libraries, and tools" },
]

export default function ExplorePage() {
  return (
    <div className="container py-8">
      <h1 className="text-3xl font-bold mb-6">Explore GitHub</h1>

      <Tabs defaultValue="trending" className="mb-8">
        <TabsList className="mb-4">
          <TabsTrigger value="trending">Trending</TabsTrigger>
          <TabsTrigger value="topics">Topics</TabsTrigger>
          <TabsTrigger value="collections">Collections</TabsTrigger>
        </TabsList>

        <TabsContent value="trending">
          <div className="grid gap-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold">Trending Repositories</h2>
              <div className="flex gap-2">
                <Button variant="outline" size="sm">
                  Today
                </Button>
                <Button variant="outline" size="sm">
                  This week
                </Button>
                <Button variant="outline" size="sm">
                  This month
                </Button>
              </div>
            </div>

            <div className="grid gap-4">
              {trendingRepos.map((repo) => (
                <Card key={repo.id}>
                  <CardHeader className="pb-2">
                    <div className="flex items-start justify-between">
                      <div>
                        <Link href={`/${repo.name}`} className="text-lg font-medium hover:underline">
                          {repo.name}
                        </Link>
                        <CardDescription className="mt-1">{repo.description}</CardDescription>
                      </div>
                      <Button variant="outline" size="sm">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="mr-1"
                        >
                          <path d="M12 4V20M12 4L8 8M12 4L16 8" />
                        </svg>
                        Star
                      </Button>
                    </div>
                  </CardHeader>
                  <CardFooter className="pt-2 text-sm text-muted-foreground">
                    <div className="flex items-center gap-4">
                      <div className="flex items-center">
                        <span
                          className="inline-block w-3 h-3 rounded-full mr-1"
                          style={{ backgroundColor: repo.languageColor }}
                        ></span>
                        {repo.language}
                      </div>
                      <div className="flex items-center">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="mr-1"
                        >
                          <path d="M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z" />
                        </svg>
                        {repo.stars.toLocaleString()}
                      </div>
                      <div className="flex items-center">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="mr-1"
                        >
                          <path d="M7 7c.3 -3.1 3.5 -5 6.5 -5c.5 0 .5 2 0 2c-2.5 0 -4.5 1.5 -4.5 4c0 2 1.4 3 3 4l2 1" />
                          <path d="M17 17c-.3 3.1 -3.5 5 -6.5 5c-.5 0 -.5 -2 0 -2c2.5 0 4.5 -1.5 4.5 -4c0 -2 -1.4 -3 -3 -4l-2 -1" />
                        </svg>
                        {repo.forks.toLocaleString()}
                      </div>
                    </div>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </div>
        </TabsContent>

        <TabsContent value="topics">
          <div className="grid gap-6">
            <h2 className="text-xl font-semibold">Featured Topics</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {featuredTopics.map((topic) => (
                <Card key={topic.id} className="h-full">
                  <CardHeader>
                    <CardTitle>
                      <Link href={`/topics/${topic.name}`} className="text-blue-500 hover:underline">
                        #{topic.name}
                      </Link>
                    </CardTitle>
                    <CardDescription>{topic.repos.toLocaleString()} repositories</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm">{topic.description}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </TabsContent>

        <TabsContent value="collections">
          <div className="grid gap-6">
            <h2 className="text-xl font-semibold">Collections</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card className="overflow-hidden">
                <div className="relative h-48">
                  <Image
                    src="/social-network-connections.png"
                    alt="Machine Learning Collection"
                    fill
                    className="object-cover"
                  />
                </div>
                <CardHeader>
                  <CardTitle>Machine Learning Tools</CardTitle>
                  <CardDescription>Essential libraries and frameworks for ML</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    <Badge variant="secondary">tensorflow</Badge>
                    <Badge variant="secondary">pytorch</Badge>
                    <Badge variant="secondary">scikit-learn</Badge>
                    <Badge variant="secondary">huggingface</Badge>
                  </div>
                </CardContent>
                <CardFooter>
                  <Button variant="outline" className="w-full">
                    View Collection
                  </Button>
                </CardFooter>
              </Card>

              <Card className="overflow-hidden">
                <div className="relative h-48">
                  <Image
                    src="/modern-web-deployment.png"
                    alt="Web Development Collection"
                    fill
                    className="object-cover"
                  />
                </div>
                <CardHeader>
                  <CardTitle>Modern Web Development</CardTitle>
                  <CardDescription>Top frameworks for building web applications</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    <Badge variant="secondary">react</Badge>
                    <Badge variant="secondary">next.js</Badge>
                    <Badge variant="secondary">vue</Badge>
                    <Badge variant="secondary">svelte</Badge>
                  </div>
                </CardContent>
                <CardFooter>
                  <Button variant="outline" className="w-full">
                    View Collection
                  </Button>
                </CardFooter>
              </Card>
            </div>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}

----
app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 145 63% 40%; /* Updated to match the new darker green */
    --primary-foreground: 355.7 100% 97.3%;

    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;

    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 145 63% 40%; /* Updated to match the new darker green */

    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@keyframes gridShift {
  0% {
    transform: translate(0, 0);
  }
  50% {
    transform: translate(25px, 25px);
  }
  100% {
    transform: translate(0, 0);
  }
}

@keyframes gridShiftReverse {
  0% {
    transform: translate(0, 0);
  }
  50% {
    transform: translate(-5px, -5px);
  }
  100% {
    transform: translate(0, 0);
  }
}

@keyframes glow {
  0% {
    opacity: 0.3;
  }
  100% {
    opacity: 0.8;
  }
}

@keyframes float {
  0% {
    transform: translate(0, 0);
  }
  100% {
    transform: translate(10px, 10px);
  }
}

@layer utilities {
  .grid-background {
    background-image: linear-gradient(to right, rgba(255, 100, 150, 0.2) 1px, transparent 1px),
      linear-gradient(to bottom, rgba(255, 100, 150, 0.2) 1px, transparent 1px);
    background-size: 50px 50px;
  }

  .grid-background-small {
    background-image: linear-gradient(to right, rgba(255, 100, 150, 0.1) 1px, transparent 1px),
      linear-gradient(to bottom, rgba(255, 100, 150, 0.1) 1px, transparent 1px);
    background-size: 10px 10px;
  }
}

/* Add this at the end of the file */
.perspective-[1000px] {
  perspective: 1000px;
}

----
app/layout.tsx
import type React from "react"
import "./globals.css"
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import { Suspense } from "react"
import SiteHeader from "@/components/layout/site-header"
import SiteFooter from "@/components/layout/site-footer"
import { ThemeProvider } from "@/components/theme-provider"
import { EmailModalProvider } from "@/components/email-modal-provider"
import { AuthProvider } from "@/components/auth-provider"

const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: "GitHub.GG - Enhanced GitHub Experience",
  description: "A better way to explore and understand GitHub repositories",
    generator: 'v0.dev'
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <Suspense fallback={null}>
          {process.env.NEXT_PUBLIC_GA_MEASUREMENT_ID && (
            <GoogleAnalyticsScript measurementId={process.env.NEXT_PUBLIC_GA_MEASUREMENT_ID} />
          )}
        </Suspense>
      </head>
      <body className={inter.className}>
        <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
          <AuthProvider>
            <EmailModalProvider>
              <div className="relative flex min-h-screen flex-col">
                <SiteHeader />
                <div className="flex-1">{children}</div>
                <SiteFooter />
              </div>
            </EmailModalProvider>
          </AuthProvider>
        </ThemeProvider>
      </body>
    </html>
  )
}

// Server Component for Google Analytics Script
function GoogleAnalyticsScript({ measurementId }: { measurementId: string }) {
  return (
    <>
      <script async src={`https://www.googletagmanager.com/gtag/js?id=${measurementId}`} />
      <script
        dangerouslySetInnerHTML={{
          __html: `
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', '${measurementId}');
          `,
        }}
      />
    </>
  )
}

----
app/login/page.tsx
"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { GithubIcon } from "lucide-react"
import { signIn } from "next-auth/react"

export default function LoginPage() {
  const handleSignIn = () => {
    signIn("github", {
      callbackUrl: "/dashboard"
    })
  }
  return (
    <div className="flex items-center justify-center min-h-screen bg-black">
      <Card className="w-[400px] bg-black/70 border-border/50">
        <CardHeader>
          <CardTitle className="text-2xl">Sign in to GitHub.GG</CardTitle>
          <CardDescription>
            Connect your GitHub account to analyze repositories and get AI-powered insights.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <p className="text-sm text-muted-foreground">GitHub.GG needs access to your GitHub account to:</p>
            <ul className="text-sm text-muted-foreground list-disc pl-5 space-y-1">
              <li>Read your public and private repositories</li>
              <li>Analyze code and repository structure</li>
              <li>Generate AI-powered insights</li>
            </ul>
          </div>
        </CardContent>
        <CardFooter>
          <Button 
            onClick={handleSignIn}
            className="w-full flex items-center justify-center gap-2"
          >
            <GithubIcon className="h-5 w-5" />
            Sign in with GitHub
          </Button>
        </CardFooter>
      </Card>
    </div>
  )
}

----
app/not-found.tsx
import Link from "next/link"
import { Button } from "@/components/ui/button"

export default function NotFound() {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-background">
      <div className="container max-w-md text-center space-y-6 py-16">
        <h1 className="text-6xl font-bold">404</h1>
        <h2 className="text-2xl font-semibold">Page Not Found</h2>
        <p className="text-muted-foreground">The page you're looking for doesn't exist or has been moved.</p>
        <div className="flex flex-col sm:flex-row gap-4 justify-center mt-8">
          <Button asChild>
            <Link href="/">Return Home</Link>
          </Button>
          <Button variant="outline" asChild>
            <Link href="/explore">Explore Repositories</Link>
          </Button>
        </div>
      </div>
    </div>
  )
}

----
app/page.tsx
"use client"

import HeroSection from "@/components/sections/hero-section"
import FeaturesSection from "@/components/sections/features-section"
import RepoAnalysisSection from "@/components/sections/repo-analysis-section"
import StatsSection from "@/components/sections/stats-section"
import PricingSection from "@/components/sections/pricing-section"
import CTASection from "@/components/sections/cta-section"
import { FadeIn } from "@/components/animated-elements"
import AnimatedBackground from "@/components/animated-background"
import { useEffect, useState } from "react"
import { EmailModalProvider } from "@/components/email-modal-provider"

export default function Home() {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null
  }

  return (
    <EmailModalProvider>
      <div className="flex flex-col min-h-screen bg-black relative">
        {/* Animated background */}
        <AnimatedBackground />

        {/* Content wrapper with higher z-index */}
        <div className="relative z-10 flex flex-col min-h-screen">
          <FadeIn>
            <HeroSection />
          </FadeIn>
          <FadeIn delay={0.2}>
            <FeaturesSection />
          </FadeIn>
          <FadeIn delay={0.3}>
            <RepoAnalysisSection />
          </FadeIn>
          <FadeIn delay={0.4}>
            <StatsSection />
          </FadeIn>
          <FadeIn delay={0.5}>
            <PricingSection />
          </FadeIn>
          <FadeIn delay={0.6}>
            <CTASection />
          </FadeIn>
        </div>
      </div>
    </EmailModalProvider>
  )
}

----
app/search/loading.tsx
export default function Loading() {
  return null
}

----
app/search/not-found.tsx
import Link from "next/link"

export default function SearchNotFound() {
  return (
    <div className="container flex flex-col items-center justify-center py-16">
      <h1 className="text-4xl font-bold mb-4">Search Not Available</h1>
      <p className="text-lg text-muted-foreground mb-8">
        The search functionality is currently unavailable. Please try again later.
      </p>
      <Link href="/" className="bg-primary text-primary-foreground hover:bg-primary/90 px-4 py-2 rounded-md">
        Return Home
      </Link>
    </div>
  )
}

----
app/search/page.tsx
"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { useSearchParams, useRouter } from "next/navigation"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { SearchIcon } from "lucide-react"
import { searchMockData } from "@/lib/mock/search-data"
import type { SearchResult } from "@/lib/types/search"
import Image from "next/image"
import Link from "next/link"

export default function SearchPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const query = searchParams.get("q") || ""
  const [searchInput, setSearchInput] = useState(query)
  const [results, setResults] = useState<SearchResult[]>([])
  const [isLoading, setIsLoading] = useState(false)

  // Perform search when query changes
  useEffect(() => {
    if (query) {
      setIsLoading(true)
      // Simulate API call with timeout
      const timeoutId = setTimeout(() => {
        const searchResults = searchMockData(query)
        setResults(searchResults)
        setIsLoading(false)
      }, 500)

      return () => clearTimeout(timeoutId)
    } else {
      setResults([])
    }
  }, [query])

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    if (searchInput.trim()) {
      // Update URL with search query
      router.push(`/search?q=${encodeURIComponent(searchInput.trim())}`)
    }
  }

  return (
    <div className="container py-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-6">{query ? `Search results for "${query}"` : "Search GitHub.GG"}</h1>

        <form onSubmit={handleSearch} className="mb-8">
          <div className="flex gap-2">
            <div className="relative flex-1">
              <SearchIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                type="search"
                placeholder="Search repositories, users, issues..."
                className="pl-10"
                value={searchInput}
                onChange={(e) => setSearchInput(e.target.value)}
              />
            </div>
            <Button type="submit">Search</Button>
          </div>
        </form>

        {isLoading ? (
          <div className="flex items-center justify-center p-12">
            <div className="animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full mr-3"></div>
            <p className="text-lg">Searching...</p>
          </div>
        ) : query && results.length === 0 ? (
          <div className="text-center py-12 border rounded-lg bg-muted/20">
            <p className="text-lg mb-2">No results found for "{query}"</p>
            <p className="text-muted-foreground">Try different keywords or check your spelling</p>
          </div>
        ) : (
          <div className="space-y-6">
            {results.map((result) => (
              <div key={result.id} className="border rounded-lg p-4 hover:bg-muted/50">
                <Link href={result.url} className="block">
                  <div className="flex items-start gap-4">
                    <div className="flex-shrink-0">
                      <Image
                        src={result.avatar || "/placeholder.svg"}
                        alt={result.type === "user" ? result.title : result.owner}
                        width={40}
                        height={40}
                        className={result.type === "user" ? "rounded-full" : "rounded-md"}
                      />
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2">
                        <h3 className="font-medium text-lg">{result.title}</h3>
                        <span className="text-xs bg-muted px-2 py-1 rounded-full">
                          {result.type === "repository"
                            ? "Repo"
                            : result.type === "user"
                              ? "User"
                              : result.type === "issue"
                                ? "Issue"
                                : result.type === "pull-request"
                                  ? "PR"
                                  : "Discussion"}
                        </span>
                      </div>
                      <p className="text-muted-foreground mt-1">{result.description}</p>
                      {result.type === "repository" && (
                        <div className="flex items-center gap-4 mt-3 text-sm text-muted-foreground">
                          {result.language && (
                            <span className="flex items-center gap-1">
                              <span className="w-3 h-3 rounded-full bg-primary"></span>
                              {result.language}
                            </span>
                          )}
                          {result.stars !== undefined && (
                            <span className="flex items-center gap-1">
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                strokeWidth="2"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                className="w-4 h-4"
                              >
                                <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
                              </svg>
                              {result.stars.toLocaleString()}
                            </span>
                          )}
                          {result.updated && <span>Updated on {result.updated}</span>}
                        </div>
                      )}
                    </div>
                  </div>
                </Link>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}

----
components/advertising/ad-banner.tsx
"use client"

import type { ReactNode } from "react"
import { ExternalLinkIcon, XIcon } from "lucide-react"
import { Button } from "@/components/ui/button"

interface AdBannerProps {
  title: string
  description: string
  ctaText: string
  ctaLink?: string
  icon?: ReactNode
  variant?: "primary" | "secondary" | "subtle"
  onDismiss?: () => void
  className?: string
}

export default function AdBanner({
  title,
  description,
  ctaText,
  ctaLink = "#",
  icon,
  variant = "primary",
  onDismiss,
  className = "",
}: AdBannerProps) {
  // Define styles based on variant
  const variantStyles = {
    primary: "bg-gradient-to-r from-primary/20 to-primary/5 border-primary/30",
    secondary: "bg-gradient-to-r from-purple-500/20 to-purple-500/5 border-purple-500/30",
    subtle: "bg-gray-800/50 border-gray-700/50",
  }

  return (
    <div className={`relative rounded-lg border p-4 ${variantStyles[variant]} ${className}`}>
      {onDismiss && (
        <button
          onClick={onDismiss}
          className="absolute top-2 right-2 text-gray-400 hover:text-white p-1 rounded-full hover:bg-gray-700/50"
          aria-label="Dismiss advertisement"
        >
          <XIcon className="h-4 w-4" />
        </button>
      )}

      <div className="flex items-start gap-3">
        {icon && <div className="flex-shrink-0 mt-1">{icon}</div>}

        <div className="flex-1">
          <div className="flex items-center gap-2 mb-1">
            <h4 className="font-medium text-sm">{title}</h4>
            <span className="text-xs px-1.5 py-0.5 bg-gray-800 text-gray-400 rounded">Ad</span>
          </div>

          <p className="text-sm text-gray-300 mb-3">{description}</p>

          <Button
            size="sm"
            variant={variant === "primary" ? "default" : "outline"}
            className={variant === "primary" ? "bg-primary hover:bg-primary/90" : ""}
            asChild
          >
            <a href={ctaLink} target="_blank" rel="noopener noreferrer" className="flex items-center gap-1.5">
              {ctaText}
              <ExternalLinkIcon className="h-3.5 w-3.5" />
            </a>
          </Button>
        </div>
      </div>
    </div>
  )
}

----
components/advertising/ad-placeholders.tsx
import {
  ExternalLinkIcon,
  ServerIcon,
  CloudIcon,
  DatabaseIcon,
  GlobeIcon,
  CloudCogIcon,
  ShieldIcon,
} from "lucide-react"

export default function AdPlaceholders() {
  // List of placeholder advertisers with icons
  const advertisers = [
    { name: "vercel", color: "bg-black text-white", icon: <ServerIcon className="h-4 w-4" /> },
    { name: "ovh", color: "bg-blue-600 text-white", icon: <CloudIcon className="h-4 w-4" /> },
    { name: "vultr", color: "bg-indigo-600 text-white", icon: <DatabaseIcon className="h-4 w-4" /> },
    { name: "aws", color: "bg-orange-500 text-white", icon: <GlobeIcon className="h-4 w-4" /> },
    { name: "digitalocean", color: "bg-blue-500 text-white", icon: <CloudCogIcon className="h-4 w-4" /> },
    { name: "cloudflare", color: "bg-yellow-500 text-black", icon: <ShieldIcon className="h-4 w-4" /> },
  ]

  return (
    <div className="w-full overflow-hidden">
      <div className="text-xs text-muted-foreground mb-2">Sponsored</div>
      <div className="flex flex-wrap gap-2">
        {advertisers.map((advertiser, index) => (
          <a
            key={index}
            href="#"
            className={`${advertiser.color} px-3 py-1.5 rounded-md text-sm font-medium flex items-center gap-1.5 hover:opacity-90 transition-opacity`}
          >
            {advertiser.icon}
            {advertiser.name}
            <ExternalLinkIcon className="h-3 w-3" />
          </a>
        ))}
      </div>
    </div>
  )
}

----
components/advertising/ad-publisher-dashboard.tsx
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import {
  BarChart,
  Bar,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from "recharts"
import { ArrowUpIcon, DollarSignIcon, UsersIcon, MousePointerClickIcon, EyeIcon } from "lucide-react"

// Sample data for the dashboard
const revenueData = [
  { month: "Jan", revenue: 8000 },
  { month: "Feb", revenue: 9500 },
  { month: "Mar", revenue: 10000 },
  { month: "Apr", revenue: 10000 },
  { month: "May", revenue: 10000 },
  { month: "Jun", revenue: 12000 },
  { month: "Jul", revenue: 15000 },
  { month: "Aug", revenue: 20000 },
  { month: "Sep", revenue: 25000 },
  { month: "Oct", revenue: 30000 },
  { month: "Nov", revenue: 32000 },
  { month: "Dec", revenue: 35000 },
]

const clicksData = [
  { month: "Jan", clicks: 800 },
  { month: "Feb", clicks: 950 },
  { month: "Mar", clicks: 1100 },
  { month: "Apr", clicks: 1200 },
  { month: "May", clicks: 1300 },
  { month: "Jun", clicks: 1500 },
  { month: "Jul", clicks: 1800 },
  { month: "Aug", clicks: 2200 },
  { month: "Sep", clicks: 2500 },
  { month: "Oct", clicks: 2800 },
  { month: "Nov", clicks: 3000 },
  { month: "Dec", clicks: 3200 },
]

const advertisers = [
  { name: "GitHub", spend: 120000, active: true },
  { name: "JetBrains", spend: 85000, active: true },
  { name: "Vercel", spend: 75000, active: true },
  { name: "MongoDB", spend: 60000, active: true },
  { name: "DigitalOcean", spend: 45000, active: false },
  { name: "Supabase", spend: 40000, active: true },
]

const adSpots = [
  {
    id: "premium-1",
    name: "Homepage Featured",
    price: 10000,
    impressions: 250000,
    clicks: 3200,
    ctr: 1.28,
    advertiser: "GitHub",
    status: "active",
  },
  {
    id: "premium-2",
    name: "Repository Analysis",
    price: 8000,
    impressions: 180000,
    clicks: 2700,
    ctr: 1.5,
    advertiser: "JetBrains",
    status: "active",
  },
  {
    id: "standard-1",
    name: "Sidebar Top",
    price: 5000,
    impressions: 150000,
    clicks: 1800,
    ctr: 1.2,
    advertiser: "Vercel",
    status: "active",
  },
  {
    id: "standard-2",
    name: "Sidebar Bottom",
    price: 3500,
    impressions: 120000,
    clicks: 1200,
    ctr: 1.0,
    advertiser: "MongoDB",
    status: "active",
  },
  {
    id: "standard-3",
    name: "Footer Banner",
    price: 2500,
    impressions: 90000,
    clicks: 800,
    ctr: 0.89,
    advertiser: "Supabase",
    status: "active",
  },
  {
    id: "premium-3",
    name: "Code Explorer",
    price: 7500,
    impressions: 0,
    clicks: 0,
    ctr: 0,
    advertiser: "",
    status: "available",
  },
]

const pieData = [
  { name: "GitHub", value: 120000, color: "#2ecc71" },
  { name: "JetBrains", value: 85000, color: "#3498db" },
  { name: "Vercel", value: 75000, color: "#9b59b6" },
  { name: "MongoDB", value: 60000, color: "#e67e22" },
  { name: "Supabase", value: 40000, color: "#f1c40f" },
]

export default function AdPublisherDashboard() {
  const [selectedTab, setSelectedTab] = useState("overview")

  return (
    <div className="max-w-[1200px] mx-auto">
      <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4 mb-8">
        <div>
          <h1 className="text-3xl font-bold mb-2">Ad Publisher Dashboard</h1>
          <p className="text-muted-foreground">Manage your premium advertising inventory and track performance</p>
        </div>

        <div className="flex gap-3">
          <Button variant="outline">Export Report</Button>
          <Button>Create New Ad Spot</Button>
        </div>
      </div>

      <Tabs defaultValue="overview" onValueChange={setSelectedTab} className="w-full">
        <TabsList className="grid grid-cols-4 w-full mb-8">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="adspots">Ad Spots</TabsTrigger>
          <TabsTrigger value="advertisers">Advertisers</TabsTrigger>
          <TabsTrigger value="reports">Reports</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="mt-0">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <Card className="bg-black/80 border-border/50">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium flex items-center gap-2">
                  <DollarSignIcon className="h-4 w-4 text-primary" />
                  Monthly Revenue
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">$35,000</div>
                <div className="flex items-center text-xs text-green-500 mt-1">
                  <ArrowUpIcon className="h-3 w-3 mr-1" />
                  <span>9.4% from last month</span>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-black/80 border-border/50">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium flex items-center gap-2">
                  <EyeIcon className="h-4 w-4 text-primary" />
                  Total Impressions
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">790,000</div>
                <div className="flex items-center text-xs text-green-500 mt-1">
                  <ArrowUpIcon className="h-3 w-3 mr-1" />
                  <span>12.3% from last month</span>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-black/80 border-border/50">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium flex items-center gap-2">
                  <MousePointerClickIcon className="h-4 w-4 text-primary" />
                  Total Clicks
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">9,700</div>
                <div className="flex items-center text-xs text-green-500 mt-1">
                  <ArrowUpIcon className="h-3 w-3 mr-1" />
                  <span>6.7% from last month</span>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-black/80 border-border/50">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium flex items-center gap-2">
                  <UsersIcon className="h-4 w-4 text-primary" />
                  Active Advertisers
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">5</div>
                <div className="flex items-center text-xs text-green-500 mt-1">
                  <ArrowUpIcon className="h-3 w-3 mr-1" />
                  <span>1 new this month</span>
                </div>
              </CardContent>
            </Card>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <Card className="bg-black/80 border-border/50">
              <CardHeader>
                <CardTitle>Revenue Trend</CardTitle>
                <CardDescription>Monthly revenue from ad spots</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-[300px] w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={revenueData}>
                      <CartesianGrid strokeDasharray="3 3" stroke="#333" />
                      <XAxis dataKey="month" stroke="#666" />
                      <YAxis stroke="#666" />
                      <Tooltip
                        contentStyle={{ backgroundColor: "#222", border: "1px solid #444" }}
                        labelStyle={{ color: "#fff" }}
                        formatter={(value) => [`$${value}`, "Revenue"]}
                      />
                      <Bar dataKey="revenue" fill="#2ecc71" />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-black/80 border-border/50">
              <CardHeader>
                <CardTitle>Revenue by Advertiser</CardTitle>
                <CardDescription>Annual spend distribution</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-[300px] w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={pieData}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        outerRadius={100}
                        fill="#8884d8"
                        dataKey="value"
                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                      >
                        {pieData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip
                        contentStyle={{ backgroundColor: "#222", border: "1px solid #444" }}
                        formatter={(value) => [`$${value}`, "Annual Spend"]}
                      />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </div>

          <Card className="bg-black/80 border-border/50">
            <CardHeader>
              <CardTitle>Top Performing Ad Spots</CardTitle>
              <CardDescription>Based on click-through rate</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-border/50">
                      <th className="text-left py-3 px-4 font-medium">Ad Spot</th>
                      <th className="text-left py-3 px-4 font-medium">Price</th>
                      <th className="text-left py-3 px-4 font-medium">Impressions</th>
                      <th className="text-left py-3 px-4 font-medium">Clicks</th>
                      <th className="text-left py-3 px-4 font-medium">CTR</th>
                      <th className="text-left py-3 px-4 font-medium">Advertiser</th>
                    </tr>
                  </thead>
                  <tbody>
                    {adSpots
                      .filter((spot) => spot.status === "active")
                      .sort((a, b) => b.ctr - a.ctr)
                      .slice(0, 5)
                      .map((spot, i) => (
                        <tr key={i} className="border-b border-border/50 last:border-0">
                          <td className="py-3 px-4">{spot.name}</td>
                          <td className="py-3 px-4">${spot.price.toLocaleString()}/mo</td>
                          <td className="py-3 px-4">{spot.impressions.toLocaleString()}</td>
                          <td className="py-3 px-4">{spot.clicks.toLocaleString()}</td>
                          <td className="py-3 px-4">{spot.ctr.toFixed(2)}%</td>
                          <td className="py-3 px-4">{spot.advertiser}</td>
                        </tr>
                      ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="adspots" className="mt-0">
          <Card className="bg-black/80 border-border/50">
            <CardHeader>
              <CardTitle>Ad Inventory</CardTitle>
              <CardDescription>Manage your premium advertising spots</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-border/50">
                      <th className="text-left py-3 px-4 font-medium">Ad Spot</th>
                      <th className="text-left py-3 px-4 font-medium">Price</th>
                      <th className="text-left py-3 px-4 font-medium">Impressions</th>
                      <th className="text-left py-3 px-4 font-medium">Clicks</th>
                      <th className="text-left py-3 px-4 font-medium">CTR</th>
                      <th className="text-left py-3 px-4 font-medium">Status</th>
                      <th className="text-left py-3 px-4 font-medium">Advertiser</th>
                      <th className="text-left py-3 px-4 font-medium">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {adSpots.map((spot, i) => (
                      <tr key={i} className="border-b border-border/50 last:border-0">
                        <td className="py-3 px-4">{spot.name}</td>
                        <td className="py-3 px-4">${spot.price.toLocaleString()}/mo</td>
                        <td className="py-3 px-4">{spot.impressions.toLocaleString()}</td>
                        <td className="py-3 px-4">{spot.clicks.toLocaleString()}</td>
                        <td className="py-3 px-4">{spot.ctr.toFixed(2)}%</td>
                        <td className="py-3 px-4">
                          <span
                            className={`px-2 py-1 rounded-full text-xs ${
                              spot.status === "active"
                                ? "bg-green-500/20 text-green-400"
                                : "bg-blue-500/20 text-blue-400"
                            }`}
                          >
                            {spot.status === "active" ? "Active" : "Available"}
                          </span>
                        </td>
                        <td className="py-3 px-4">{spot.advertiser || "‚Äî"}</td>
                        <td className="py-3 px-4">
                          <Button variant="ghost" size="sm">
                            Edit
                          </Button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="advertisers" className="mt-0">
          <Card className="bg-black/80 border-border/50">
            <CardHeader>
              <CardTitle>Advertisers</CardTitle>
              <CardDescription>Companies currently advertising on GitHub.GG</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-border/50">
                      <th className="text-left py-3 px-4 font-medium">Advertiser</th>
                      <th className="text-left py-3 px-4 font-medium">Annual Spend</th>
                      <th className="text-left py-3 px-4 font-medium">Status</th>
                      <th className="text-left py-3 px-4 font-medium">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {advertisers.map((advertiser, i) => (
                      <tr key={i} className="border-b border-border/50 last:border-0">
                        <td className="py-3 px-4">{advertiser.name}</td>
                        <td className="py-3 px-4">${advertiser.spend.toLocaleString()}</td>
                        <td className="py-3 px-4">
                          <span
                            className={`px-2 py-1 rounded-full text-xs ${
                              advertiser.active ? "bg-green-500/20 text-green-400" : "bg-red-500/20 text-red-400"
                            }`}
                          >
                            {advertiser.active ? "Active" : "Inactive"}
                          </span>
                        </td>
                        <td className="py-3 px-4">
                          <Button variant="ghost" size="sm">
                            View
                          </Button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="reports" className="mt-0">
          <Card className="bg-black/80 border-border/50">
            <CardHeader>
              <CardTitle>Performance Reports</CardTitle>
              <CardDescription>Detailed analytics for your ad inventory</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                <div>
                  <h3 className="text-lg font-medium mb-4">Clicks Trend</h3>
                  <div className="h-[300px] w-full">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={clicksData}>
                        <CartesianGrid strokeDasharray="3 3" stroke="#333" />
                        <XAxis dataKey="month" stroke="#666" />
                        <YAxis stroke="#666" />
                        <Tooltip
                          contentStyle={{ backgroundColor: "#222", border: "1px solid #444" }}
                          labelStyle={{ color: "#fff" }}
                        />
                        <Line type="monotone" dataKey="clicks" stroke="#3498db" strokeWidth={2} />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-medium mb-4">Revenue Growth</h3>
                  <div className="h-[300px] w-full">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={revenueData}>
                        <CartesianGrid strokeDasharray="3 3" stroke="#333" />
                        <XAxis dataKey="month" stroke="#666" />
                        <YAxis stroke="#666" />
                        <Tooltip
                          contentStyle={{ backgroundColor: "#222", border: "1px solid #444" }}
                          labelStyle={{ color: "#fff" }}
                          formatter={(value) => [`$${value}`, "Revenue"]}
                        />
                        <Line type="monotone" dataKey="revenue" stroke="#2ecc71" strokeWidth={2} />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>

              <div className="mt-6">
                <h3 className="text-lg font-medium mb-4">Available Reports</h3>
                <div className="space-y-3">
                  {[
                    { name: "Monthly Performance Report", date: "December 2024" },
                    { name: "Quarterly Revenue Analysis", date: "Q4 2024" },
                    { name: "Advertiser ROI Report", date: "November 2024" },
                    { name: "Ad Spot Optimization Report", date: "October 2024" },
                  ].map((report, i) => (
                    <div key={i} className="flex items-center justify-between p-3 border border-border/50 rounded-lg">
                      <div>
                        <h4 className="font-medium">{report.name}</h4>
                        <p className="text-sm text-muted-foreground">{report.date}</p>
                      </div>
                      <Button variant="outline" size="sm">
                        Download
                      </Button>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

----
components/advertising/premium-ad-spot.tsx
"use client"

import { useState } from "react"
import Image from "next/image"
import { ExternalLinkIcon, InfoIcon } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

interface PremiumAdSpotProps {
  className?: string
  variant?: "standard" | "minimal" | "featured"
}

export default function PremiumAdSpot({ className = "", variant = "standard" }: PremiumAdSpotProps) {
  const [adMetricsVisible, setAdMetricsVisible] = useState(false)

  // This would be replaced with actual ad content from your ad server
  // For now, we're using a placeholder ad for GitHub Copilot
  const adContent = {
    advertiser: "GitHub",
    title: "Supercharge your coding with GitHub Copilot",
    description: "AI pair programming that helps you write better code, faster. Try it free for 30 days.",
    cta: "Try Copilot Free",
    link: "https://github.com/features/copilot",
    imageUrl: "/placeholder.svg?height=200&width=400",
    backgroundColor: "bg-gradient-to-r from-purple-900/40 to-blue-900/40",
    borderColor: "border-blue-500/30",
  }

  // Different styling based on variant
  const variantStyles = {
    standard: "p-4 rounded-lg",
    minimal: "p-3 rounded-md",
    featured: "p-5 rounded-xl shadow-lg shadow-blue-500/10",
  }

  return (
    <div
      className={`relative border ${adContent.backgroundColor} ${adContent.borderColor} ${variantStyles[variant]} ${className}`}
    >
      {/* Ad Label */}
      <div className="absolute top-2 right-2 flex items-center gap-1.5 z-10">
        <span className="text-xs bg-gray-800/80 text-gray-300 px-1.5 py-0.5 rounded">Premium Partner</span>

        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <button
                onClick={() => setAdMetricsVisible(!adMetricsVisible)}
                className="text-gray-400 hover:text-gray-200 transition-colors"
              >
                <InfoIcon className="h-3.5 w-3.5" />
              </button>
            </TooltipTrigger>
            <TooltipContent>
              <p className="text-xs">Premium advertising spot</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </div>

      {/* Ad Metrics Popup (would be admin-only in production) */}
      {adMetricsVisible && (
        <div className="absolute right-2 top-8 bg-gray-900 border border-gray-700 rounded-md p-3 z-20 shadow-xl w-[200px]">
          <h4 className="text-xs font-medium mb-2">Ad Performance</h4>
          <div className="space-y-1 text-xs">
            <div className="flex justify-between">
              <span className="text-gray-400">Impressions:</span>
              <span>24,738</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-400">Clicks:</span>
              <span>1,249</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-400">CTR:</span>
              <span>5.05%</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-400">Revenue:</span>
              <span className="text-green-400">$10,000</span>
            </div>
          </div>
        </div>
      )}

      <div className="flex flex-col md:flex-row gap-4 items-center">
        {/* Ad Image */}
        <div className="w-full md:w-1/3 flex-shrink-0">
          <div className="relative rounded-md overflow-hidden aspect-video">
            <Image
              src={adContent.imageUrl || "/placeholder.svg"}
              alt={`Advertisement for ${adContent.advertiser}`}
              fill
              className="object-cover"
            />
          </div>
        </div>

        {/* Ad Content */}
        <div className="w-full md:w-2/3 flex flex-col">
          <h3 className="text-lg md:text-xl font-semibold mb-2">{adContent.title}</h3>
          <p className="text-sm text-gray-300 mb-4">{adContent.description}</p>

          <div className="mt-auto flex items-center justify-between">
            <Button className="bg-blue-600 hover:bg-blue-700 text-white" asChild>
              <a href={adContent.link} target="_blank" rel="noopener noreferrer" className="flex items-center gap-1.5">
                {adContent.cta}
                <ExternalLinkIcon className="h-3.5 w-3.5" />
              </a>
            </Button>

            <span className="text-xs text-gray-400">Sponsored by {adContent.advertiser}</span>
          </div>
        </div>
      </div>

      {/* Your Ad Here - Contact Info (only visible to admins or when no ad is active) */}
      {false && (
        <div className="absolute inset-0 flex items-center justify-center bg-gray-900/90 backdrop-blur-sm">
          <div className="text-center p-6">
            <h3 className="text-xl font-bold mb-2">Premium Ad Space</h3>
            <p className="text-gray-300 mb-4">$10,000/month - Reach 100k+ developers daily</p>
            <Button variant="outline">Contact for Advertising</Button>
          </div>
        </div>
      )}
    </div>
  )
}

----
components/advertising/repo-ad-section.tsx
import { RocketIcon, ZapIcon, SparklesIcon } from "lucide-react"
import AdBanner from "./ad-banner"

interface RepoAdSectionProps {
  className?: string
}

export default function RepoAdSection({ className = "" }: RepoAdSectionProps) {
  return (
    <div className={`space-y-4 ${className}`}>
      <h3 className="text-lg font-medium mb-2">Sponsored Tools</h3>

      <AdBanner
        title="Supercharge Your Workflow"
        description="Get 50% off GitHub.GG Pro for the first 3 months. Unlimited repositories, advanced AI insights, and team collaboration."
        ctaText="Upgrade to Pro"
        icon={<RocketIcon className="h-5 w-5 text-primary" />}
        variant="primary"
      />

      <AdBanner
        title="Try GitHub Copilot"
        description="AI pair programming that helps you write code faster with less work. Integrates with your editor."
        ctaText="Learn More"
        ctaLink="https://github.com/features/copilot"
        icon={<SparklesIcon className="h-5 w-5 text-purple-400" />}
        variant="secondary"
      />

      <AdBanner
        title="Vercel Hosting"
        description="Deploy this repository with zero configuration. Get automatic previews, analytics, and more."
        ctaText="Deploy to Vercel"
        ctaLink="https://vercel.com"
        icon={<ZapIcon className="h-5 w-5 text-blue-400" />}
        variant="subtle"
      />
    </div>
  )
}

----
components/advertising/side-ad-placeholders.tsx
import Image from "next/image"
import { ExternalLinkIcon, ServerIcon, CloudIcon, DatabaseIcon, GlobeIcon } from "lucide-react"

interface SideAdPlaceholdersProps {
  position: "left" | "right"
}

export default function SideAdPlaceholders({ position }: SideAdPlaceholdersProps) {
  // List of placeholder advertisers with images and icons
  const advertisers = [
    {
      name: "vercel",
      color: "bg-black text-white border-gray-700",
      image: "/placeholder.svg?height=120&width=120",
      icon: <ServerIcon className="h-4 w-4" />,
    },
    {
      name: "ovh",
      color: "bg-blue-600/10 text-blue-400 border-blue-800/30",
      image: "/placeholder.svg?height=120&width=120",
      icon: <CloudIcon className="h-4 w-4" />,
    },
    {
      name: "vultr",
      color: "bg-indigo-600/10 text-indigo-400 border-indigo-800/30",
      image: "/placeholder.svg?height=120&width=120",
      icon: <DatabaseIcon className="h-4 w-4" />,
    },
    {
      name: "aws",
      color: "bg-orange-500/10 text-orange-400 border-orange-800/30",
      image: "/placeholder.svg?height=120&width=120",
      icon: <GlobeIcon className="h-4 w-4" />,
    },
  ]

  return (
    <div className="w-full space-y-4 sticky top-20">
      <div className="text-xs text-muted-foreground mb-2">Sponsored</div>

      {advertisers.map((advertiser, index) => (
        <a
          key={index}
          href="#"
          className={`${advertiser.color} block rounded-md border overflow-hidden hover:opacity-90 transition-opacity`}
        >
          <div className="relative w-full aspect-square">
            <Image
              src={advertiser.image || "/placeholder.svg"}
              alt={`${advertiser.name} advertisement`}
              fill
              className="object-cover"
            />
          </div>
          <div className="p-2 text-xs font-medium flex items-center justify-between">
            <span className="flex items-center gap-1.5">
              {advertiser.icon}
              {advertiser.name}
            </span>
            <ExternalLinkIcon className="h-3 w-3" />
          </div>
        </a>
      ))}
    </div>
  )
}

----
components/analytics/google-analytics.tsx
"use client"

import { useEffect } from "react"
import { usePathname, useSearchParams } from "next/navigation"
import Script from "next/script"

export function GoogleAnalytics({ measurementId }: { measurementId: string }) {
  const pathname = usePathname()
  const searchParams = useSearchParams()

  useEffect(() => {
    if (!measurementId || !window.gtag) return

    const url = pathname + (searchParams?.toString() ? `?${searchParams.toString()}` : "")

    window.gtag("config", measurementId, {
      page_path: url,
    })
  }, [pathname, searchParams, measurementId])

  return (
    <>
      <Script strategy="afterInteractive" src={`https://www.googletagmanager.com/gtag/js?id=${measurementId}`} />
      <Script
        id="google-analytics"
        strategy="afterInteractive"
        dangerouslySetInnerHTML={{
          __html: `
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', '${measurementId}');
          `,
        }}
      />
    </>
  )
}

----
components/animated-background.tsx
"use client"

import { useEffect, useRef, useState } from "react"
import { motion } from "framer-motion"

export default function AnimatedBackground() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // Set canvas dimensions
    const resizeCanvas = () => {
      canvas.width = window.innerWidth
      canvas.height = window.innerHeight
    }

    resizeCanvas()
    window.addEventListener("resize", resizeCanvas)

    // Particle class
    class Particle {
      x: number
      y: number
      size: number
      speedX: number
      speedY: number
      color: string
      alpha: number

      constructor() {
        this.x = Math.random() * canvas.width
        this.y = Math.random() * canvas.height
        this.size = Math.random() * 3 + 1
        this.speedX = Math.random() * 0.5 - 0.25
        this.speedY = Math.random() * 0.5 - 0.25
        this.color = this.getRandomColor()
        this.alpha = Math.random() * 0.5 + 0.1
      }

      getRandomColor() {
        const colors = [
          "rgba(37, 165, 95, 0.7)", // Primary green
          "rgba(37, 165, 95, 0.5)", // Lighter primary
          "rgba(20, 110, 60, 0.6)", // Darker green
          "rgba(70, 200, 120, 0.4)", // Lighter green
          "rgba(30, 30, 50, 0.5)", // Dark blue-ish
        ]
        return colors[Math.floor(Math.random() * colors.length)]
      }

      update() {
        this.x += this.speedX
        this.y += this.speedY

        // Bounce off edges
        if (this.x > canvas.width || this.x < 0) {
          this.speedX = -this.speedX
        }
        if (this.y > canvas.height || this.y < 0) {
          this.speedY = -this.speedY
        }
      }

      draw() {
        if (!ctx) return
        ctx.beginPath()
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2)
        ctx.fillStyle = this.color
        ctx.globalAlpha = this.alpha
        ctx.fill()
        ctx.globalAlpha = 1
      }
    }

    // Create particles
    const particleCount = Math.min(50, Math.floor((window.innerWidth * window.innerHeight) / 20000))
    const particles: Particle[] = []

    for (let i = 0; i < particleCount; i++) {
      particles.push(new Particle())
    }

    // Animation loop
    let animationFrameId: number

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height)

      // Draw gradient background
      const gradient = ctx.createRadialGradient(
        canvas.width / 2,
        canvas.height / 2,
        0,
        canvas.width / 2,
        canvas.height / 2,
        canvas.width * 0.8,
      )

      gradient.addColorStop(0, "rgba(10, 10, 15, 1)")
      gradient.addColorStop(0.5, "rgba(5, 5, 10, 1)")
      gradient.addColorStop(1, "rgba(0, 0, 0, 1)")

      ctx.fillStyle = gradient
      ctx.fillRect(0, 0, canvas.width, canvas.height)

      // Update and draw particles
      particles.forEach((particle) => {
        particle.update()
        particle.draw()
      })

      // Draw subtle grid
      ctx.strokeStyle = "rgba(50, 50, 70, 0.1)"
      ctx.lineWidth = 0.5

      // Vertical lines
      for (let x = 0; x < canvas.width; x += 50) {
        ctx.beginPath()
        ctx.moveTo(x, 0)
        ctx.lineTo(x, canvas.height)
        ctx.stroke()
      }

      // Horizontal lines
      for (let y = 0; y < canvas.height; y += 50) {
        ctx.beginPath()
        ctx.moveTo(0, y)
        ctx.lineTo(canvas.width, y)
        ctx.stroke()
      }

      // Connect nearby particles with lines
      for (let i = 0; i < particles.length; i++) {
        for (let j = i + 1; j < particles.length; j++) {
          const dx = particles[i].x - particles[j].x
          const dy = particles[i].y - particles[j].y
          const distance = Math.sqrt(dx * dx + dy * dy)

          if (distance < 150) {
            ctx.beginPath()
            ctx.strokeStyle = `rgba(37, 165, 95, ${0.1 * (1 - distance / 150)})`
            ctx.lineWidth = 0.5
            ctx.moveTo(particles[i].x, particles[i].y)
            ctx.lineTo(particles[j].x, particles[j].y)
            ctx.stroke()
          }
        }
      }

      animationFrameId = requestAnimationFrame(animate)
    }

    animate()

    return () => {
      window.removeEventListener("resize", resizeCanvas)
      cancelAnimationFrame(animationFrameId)
    }
  }, [])

  if (!mounted) return null

  return (
    <>
      <canvas ref={canvasRef} className="fixed top-0 left-0 w-full h-full -z-10 pointer-events-none" />
      <div className="fixed top-0 left-0 w-full h-full -z-10 pointer-events-none bg-gradient-to-b from-transparent via-transparent to-black/80 opacity-80" />

      {/* Subtle floating orbs */}
      <motion.div
        className="fixed top-1/4 left-1/4 w-64 h-64 rounded-full bg-primary/5 blur-3xl -z-10 pointer-events-none"
        animate={{
          x: [0, 30, -20, 10, 0],
          y: [0, -20, 30, 10, 0],
        }}
        transition={{
          duration: 20,
          repeat: Number.POSITIVE_INFINITY,
          repeatType: "reverse",
        }}
      />

      <motion.div
        className="fixed top-2/3 right-1/4 w-96 h-96 rounded-full bg-blue-500/5 blur-3xl -z-10 pointer-events-none"
        animate={{
          x: [0, -40, 20, -10, 0],
          y: [0, 30, -20, 10, 0],
        }}
        transition={{
          duration: 25,
          repeat: Number.POSITIVE_INFINITY,
          repeatType: "reverse",
        }}
      />
    </>
  )
}

----
components/animated-elements.tsx
"use client"

import type { ReactNode } from "react"
import { motion, type MotionProps, type Variants } from "framer-motion"
import { useEffect, useState } from "react"

// Wrapper to ensure client-side only rendering
function ClientOnly({ children }: { children: ReactNode }) {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) return null

  return <>{children}</>
}

// Fade in animation
export function FadeIn({
  children,
  delay = 0,
  duration = 0.5,
  className = "",
  ...props
}: {
  children: ReactNode
  delay?: number
  duration?: number
  className?: string
} & MotionProps) {
  return (
    <ClientOnly>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay, duration, ease: "easeOut" }}
        className={className}
        {...props}
      >
        {children}
      </motion.div>
    </ClientOnly>
  )
}

// Staggered children animation
export function StaggerContainer({
  children,
  delay = 0,
  staggerChildren = 0.1,
  className = "",
  ...props
}: {
  children: ReactNode
  delay?: number
  staggerChildren?: number
  className?: string
} & MotionProps) {
  const containerVariants: Variants = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren,
        delayChildren: delay,
      },
    },
  }

  return (
    <ClientOnly>
      <motion.div variants={containerVariants} initial="hidden" animate="show" className={className} {...props}>
        {children}
      </motion.div>
    </ClientOnly>
  )
}

// Staggered item animation
export function StaggerItem({
  children,
  className = "",
  ...props
}: {
  children: ReactNode
  className?: string
} & MotionProps) {
  const itemVariants: Variants = {
    hidden: { opacity: 0, y: 20 },
    show: {
      opacity: 1,
      y: 0,
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 24,
      },
    },
  }

  return (
    <ClientOnly>
      <motion.div variants={itemVariants} className={className} {...props}>
        {children}
      </motion.div>
    </ClientOnly>
  )
}

// Slide in animation
export function SlideIn({
  children,
  direction = "left",
  delay = 0,
  duration = 0.5,
  className = "",
  ...props
}: {
  children: ReactNode
  direction?: "left" | "right" | "up" | "down"
  delay?: number
  duration?: number
  className?: string
} & MotionProps) {
  const directionMap = {
    left: { x: -100, y: 0 },
    right: { x: 100, y: 0 },
    up: { x: 0, y: -100 },
    down: { x: 0, y: 100 },
  }

  return (
    <ClientOnly>
      <motion.div
        initial={{ opacity: 0, ...directionMap[direction] }}
        animate={{ opacity: 1, x: 0, y: 0 }}
        transition={{ delay, duration, type: "spring", stiffness: 100, damping: 20 }}
        className={className}
        {...props}
      >
        {children}
      </motion.div>
    </ClientOnly>
  )
}

// Scale animation
export function ScaleIn({
  children,
  delay = 0,
  duration = 0.5,
  className = "",
  ...props
}: {
  children: ReactNode
  delay?: number
  duration?: number
  className?: string
} & MotionProps) {
  return (
    <ClientOnly>
      <motion.div
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ delay, duration, type: "spring", stiffness: 200, damping: 20 }}
        className={className}
        {...props}
      >
        {children}
      </motion.div>
    </ClientOnly>
  )
}

// Hover animation for cards and buttons
export function HoverElement({
  children,
  className = "",
  ...props
}: {
  children: ReactNode
  className?: string
} & MotionProps) {
  return (
    <ClientOnly>
      <motion.div
        whileHover={{
          scale: 1.03,
          boxShadow: "0 10px 30px rgba(0, 0, 0, 0.15)",
          transition: { duration: 0.2 },
        }}
        whileTap={{ scale: 0.98 }}
        className={className}
        {...props}
      >
        {children}
      </motion.div>
    </ClientOnly>
  )
}

// Text reveal animation
export function TextReveal({
  children,
  delay = 0,
  staggerChildren = 0.02,
  className = "",
  ...props
}: {
  children: string
  delay?: number
  staggerChildren?: number
  className?: string
} & MotionProps) {
  const text = children.split("")

  const containerVariants: Variants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren,
        delayChildren: delay,
      },
    },
  }

  const childVariants: Variants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { type: "spring", damping: 12, stiffness: 200 },
    },
  }

  return (
    <ClientOnly>
      <motion.span
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        className={`inline-block ${className}`}
        {...props}
      >
        {text.map((char, index) => (
          <motion.span key={index} variants={childVariants} className="inline-block">
            {char === " " ? "\u00A0" : char}
          </motion.span>
        ))}
      </motion.span>
    </ClientOnly>
  )
}

----
components/animated-text.tsx
"use client"

import { useSpring, animated } from "react-spring"
import { useState, useEffect } from "react"

export default function AnimatedText({ text }: { text: string }) {
  const [isGreen, setIsGreen] = useState(false)
  const [isStrikethrough, setIsStrikethrough] = useState(false)
  const [showNormal, setShowNormal] = useState(true)
  const [showGreen, setShowGreen] = useState(false)

  // Animation for the normal text - moves up when exiting
  const normalSpringProps = useSpring({
    opacity: showNormal ? 1 : 0,
    transform: showNormal ? "translateY(0px)" : "translateY(-20px)",
    config: { tension: 240, friction: 28 },
  })

  // Animation for the green text - comes from above
  const greenSpringProps = useSpring({
    opacity: showGreen ? 1 : 0,
    transform: showGreen ? "translateY(0px)" : "translateY(-20px)",
    config: { tension: 240, friction: 28 },
  })

  // Auto-play animation with adjusted timing
  useEffect(() => {
    // Stage durations (in milliseconds)
    const normalStageDuration = 500 // 500ms for normal stage
    const strikethroughStageDuration = 500 // 500ms for strikethrough stage
    const greenStageDuration = 1000 // 1000ms for green stage (double time)

    // Define the animation steps
    const runAnimationCycle = () => {
      // Stage 1: Show text normally (ensure reset)
      setShowNormal(true)
      setShowGreen(false)
      setIsStrikethrough(false)

      // Stage 2: Apply strikethrough
      setTimeout(() => {
        setIsStrikethrough(true)
      }, normalStageDuration)

      // Stage 3: Transition to green text
      setTimeout(() => {
        setShowNormal(false)
        setShowGreen(true)
      }, normalStageDuration + strikethroughStageDuration)
    }

    // Run the animation immediately on first render
    runAnimationCycle()

    // Set up the interval to repeat the animation
    const totalCycleDuration = normalStageDuration + strikethroughStageDuration + greenStageDuration // 500ms + 500ms + 1000ms = 2000ms
    const timer = setInterval(() => {
      runAnimationCycle()
    }, totalCycleDuration)

    return () => clearInterval(timer)
  }, [])

  return (
    <span className="relative inline-block">
      {/* Normal/strikethrough text */}
      <animated.span style={normalSpringProps} className="absolute left-0 text-muted-foreground">
        <span
          style={{
            textDecoration: isStrikethrough ? "line-through" : "none",
            textDecorationColor: isStrikethrough ? "#ef4444" : "transparent",
          }}
        >
          {text}
        </span>
      </animated.span>

      {/* Green text */}
      <animated.span style={greenSpringProps} className="absolute left-0 text-primary">
        {text}
      </animated.span>

      {/* Invisible text to maintain spacing */}
      <span className="invisible">{text}</span>
    </span>
  )
}

----
components/auth/login-button.tsx
'use client'

import { signIn } from 'next-auth/react'
import { cn } from "@/lib/utils"
import { Github } from "lucide-react"

interface LoginButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {}

export function LoginButton({ className, ...props }: LoginButtonProps) {
  return (
    <button
      onClick={() => signIn('github')}
      className={cn(
        "inline-flex items-center justify-center gap-2 rounded-md bg-gray-900 px-3 py-1.5 text-sm font-medium text-white transition-colors hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-200",
        className
      )}
      {...props}
    >
      <Github className="h-4 w-4" />
      <span>Sign in</span>
    </button>
  )
}

----
components/auth/user-avatar.tsx
'use client'

import { signOut, useSession } from 'next-auth/react'
import { cn } from "@/lib/utils"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

interface UserAvatarProps {
  className?: string;
}

export function UserAvatar({ className }: UserAvatarProps) {
  const { data: session } = useSession()

  if (!session?.user) return null

  return (
    <div className={cn("flex items-center", className)}>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="ghost" className="relative h-8 w-8 rounded-full">
            <Avatar className="h-8 w-8">
              <AvatarImage src={session.user.image || ''} alt={session.user.name || 'User'} />
              <AvatarFallback>
                {session.user.name?.charAt(0) || 'U'}
              </AvatarFallback>
            </Avatar>
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent className="w-56" align="end" forceMount>
          <DropdownMenuItem onClick={() => signOut({ callbackUrl: '/' })}>
            Sign out
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  )
}

----
components/auth-provider.tsx
'use client'

import { SessionProvider } from 'next-auth/react'

export function AuthProvider({ 
  children 
}: { 
  children: React.ReactNode 
}) {
  return (
    <SessionProvider>
      {children}
    </SessionProvider>
  )
}

----
components/banner-ad.tsx
import { Code2Icon, ArrowRightIcon } from "lucide-react"

export default function BannerAd() {
  // This component includes different banner ad sizes for various placements
  return (
    <div className="space-y-8">
      {/* Leaderboard Banner (728x90) */}
      <div>
        <h3 className="text-sm text-muted-foreground mb-2">Leaderboard (728x90)</h3>
        <div className="w-[728px] h-[90px] bg-black border border-border/50 rounded-md overflow-hidden relative">
          <div className="absolute inset-0 bg-gradient-to-r from-primary/20 to-transparent opacity-30"></div>
          <div className="flex h-full items-center">
            <div className="flex items-center px-4">
              <div className="w-10 h-10 bg-primary rounded-sm flex items-center justify-center mr-3">
                <Code2Icon className="h-6 w-6 text-black" />
              </div>
              <span className="text-xl font-bold">GitHub.GG</span>
            </div>

            <div className="flex-1 px-4 border-l border-r border-border/50 h-full flex items-center">
              <p className="text-sm">
                <span className="font-bold">Understand code instantly with AI.</span>{" "}
                <span className="hidden md:inline text-muted-foreground">
                  Change github.com to github.gg in any repository URL.
                </span>
              </p>
            </div>

            <div className="px-4 h-full flex items-center">
              <div className="px-4 py-2 bg-primary rounded text-black font-medium text-sm flex items-center gap-1.5">
                Try Free <ArrowRightIcon className="h-3.5 w-3.5" />
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Medium Rectangle (300x250) */}
      <div>
        <h3 className="text-sm text-muted-foreground mb-2">Medium Rectangle (300x250)</h3>
        <div className="w-[300px] h-[250px] bg-black border border-border/50 rounded-md overflow-hidden relative p-5 flex flex-col">
          <div className="absolute inset-0 bg-gradient-to-br from-primary/20 to-transparent opacity-30"></div>

          <div className="flex items-center mb-4 z-10">
            <div className="w-8 h-8 bg-primary rounded-sm flex items-center justify-center mr-2">
              <Code2Icon className="h-5 w-5 text-black" />
            </div>
            <span className="text-lg font-bold">GitHub.GG</span>
          </div>

          <h2 className="text-xl font-bold mb-3 z-10">Stop Wasting Time on Code Comprehension</h2>

          <p className="text-sm text-muted-foreground mb-4 z-10">
            Get AI-powered insights for any GitHub repository instantly.
          </p>

          <div className="bg-gray-900/70 p-3 rounded border border-border/50 mb-4 z-10">
            <p className="text-xs font-mono mb-1">Change URL:</p>
            <p className="text-xs font-mono">
              <span className="line-through text-red-400">github.com</span>
              <span className="text-green-400">/github.gg</span>
              <span>/repo</span>
            </p>
          </div>

          <div className="mt-auto z-10">
            <div className="px-4 py-2 bg-primary rounded text-black font-medium text-sm w-full text-center">
              Try GitHub.GG Free
            </div>
          </div>
        </div>
      </div>

      {/* Skyscraper (160x600) */}
      <div>
        <h3 className="text-sm text-muted-foreground mb-2">Skyscraper (160x600)</h3>
        <div className="w-[160px] h-[600px] bg-black border border-border/50 rounded-md overflow-hidden relative p-4 flex flex-col">
          <div className="absolute inset-0 bg-gradient-to-b from-primary/20 to-transparent opacity-30"></div>

          <div className="flex items-center mb-4 z-10">
            <div className="w-7 h-7 bg-primary rounded-sm flex items-center justify-center mr-2">
              <Code2Icon className="h-4 w-4 text-black" />
            </div>
            <span className="text-sm font-bold">GitHub.GG</span>
          </div>

          <h2 className="text-base font-bold mb-3 z-10">Understand Code Instantly</h2>

          <p className="text-xs text-muted-foreground mb-4 z-10">AI-powered insights for any GitHub repository.</p>

          <div className="h-[250px] bg-gray-900/50 rounded border border-border/50 mb-4 flex items-center justify-center z-10">
            <span className="text-xs text-gray-500">[Demo Image]</span>
          </div>

          <div className="space-y-3 mb-4 z-10">
            <div className="flex items-center gap-2">
              <div className="w-5 h-5 rounded-full bg-primary/20 flex items-center justify-center flex-shrink-0">
                <span className="text-primary text-xs">‚úì</span>
              </div>
              <span className="text-xs">AI Summaries</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-5 h-5 rounded-full bg-primary/20 flex items-center justify-center flex-shrink-0">
                <span className="text-primary text-xs">‚úì</span>
              </div>
              <span className="text-xs">Save Time</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-5 h-5 rounded-full bg-primary/20 flex items-center justify-center flex-shrink-0">
                <span className="text-primary text-xs">‚úì</span>
              </div>
              <span className="text-xs">Free Tier</span>
            </div>
          </div>

          <div className="mt-auto z-10">
            <div className="px-3 py-2 bg-primary rounded text-black font-medium text-xs w-full text-center">
              Try Free Today
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

----
components/brand-style-guide.tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Code2Icon } from "lucide-react"

export default function BrandStyleGuide() {
  const colorPalette = [
    { name: "Primary Green", hex: "#2ecc71", usage: "Primary buttons, important accents, logo" },
    { name: "Dark Background", hex: "#121212", usage: "Page backgrounds, cards" },
    { name: "Dark Secondary", hex: "#1e1e1e", usage: "Secondary backgrounds, hover states" },
    { name: "Light Gray", hex: "#f5f5f5", usage: "Text on dark backgrounds" },
    { name: "Muted Gray", hex: "#a0a0a0", usage: "Secondary text, descriptions" },
    { name: "Border Color", hex: "#333333", usage: "Borders, dividers" },
    { name: "Blue Accent", hex: "#3498db", usage: "Secondary accent color, links" },
  ]

  return (
    <div className="max-w-5xl mx-auto">
      <div className="mb-16 text-center">
        <h1 className="text-4xl font-bold mb-4">GitHub.GG Brand Style Guide</h1>
        <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
          A comprehensive guide for maintaining brand consistency across all GitHub.GG marketing materials.
        </p>
      </div>

      <Tabs defaultValue="logo" className="w-full mb-12">
        <TabsList className="grid grid-cols-4 w-full mb-8">
          <TabsTrigger value="logo">Logo</TabsTrigger>
          <TabsTrigger value="colors">Colors</TabsTrigger>
          <TabsTrigger value="typography">Typography</TabsTrigger>
          <TabsTrigger value="tone">Tone & Voice</TabsTrigger>
        </TabsList>

        {/* Logo Section */}
        <TabsContent value="logo" className="mt-0">
          <Card className="bg-black border-border">
            <CardHeader>
              <CardTitle>Logo Usage</CardTitle>
              <CardDescription>Guidelines for using the GitHub.GG logo across different applications.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-8">
              <div>
                <h3 className="text-lg font-medium mb-4">Primary Logo</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                  <div className="p-10 bg-black rounded-lg flex flex-col items-center justify-center border border-border">
                    <div className="flex items-center gap-3 mb-4">
                      <div className="w-12 h-12 bg-primary rounded-sm flex items-center justify-center">
                        <Code2Icon className="h-7 w-7 text-black" />
                      </div>
                      <span className="text-3xl font-bold">GitHub.GG</span>
                    </div>
                    <span className="text-sm text-muted-foreground">Standard Logo (Light Text)</span>
                  </div>

                  <div className="p-10 bg-white rounded-lg flex flex-col items-center justify-center border border-border">
                    <div className="flex items-center gap-3 mb-4">
                      <div className="w-12 h-12 bg-primary rounded-sm flex items-center justify-center">
                        <Code2Icon className="h-7 w-7 text-black" />
                      </div>
                      <span className="text-3xl font-bold text-black">GitHub.GG</span>
                    </div>
                    <span className="text-sm text-gray-500">Inverse Logo (Dark Text)</span>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-medium mb-4">Logo Spacing</h3>
                <p className="text-muted-foreground mb-4">
                  Always maintain adequate clear space around the logo. The minimum clear space is equal to the height
                  of the icon.
                </p>
                <div className="p-10 bg-gray-900 rounded-lg border border-border flex items-center justify-center">
                  <div className="border-2 border-dashed border-gray-700 p-8">
                    <div className="flex items-center gap-3">
                      <div className="w-12 h-12 bg-primary rounded-sm flex items-center justify-center">
                        <Code2Icon className="h-7 w-7 text-black" />
                      </div>
                      <span className="text-3xl font-bold">GitHub.GG</span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div>
                  <h3 className="text-lg font-medium mb-4">Logo Don'ts</h3>
                  <ul className="space-y-2 text-muted-foreground">
                    <li>‚Ä¢ Don't change the logo colors outside of the approved palette</li>
                    <li>‚Ä¢ Don't stretch or distort the logo</li>
                    <li>‚Ä¢ Don't use the logo on busy backgrounds without proper contrast</li>
                    <li>‚Ä¢ Don't add effects like shadows or outlines</li>
                  </ul>
                </div>

                <div>
                  <h3 className="text-lg font-medium mb-4">Alternative Uses</h3>
                  <p className="text-muted-foreground">
                    For social media avatars or small spaces, the icon can be used without the wordmark.
                  </p>
                  <div className="flex gap-4 mt-4">
                    <div className="w-12 h-12 bg-primary rounded-sm flex items-center justify-center">
                      <Code2Icon className="h-7 w-7 text-black" />
                    </div>
                    <div className="w-12 h-12 bg-black rounded-sm border border-primary flex items-center justify-center">
                      <Code2Icon className="h-7 w-7 text-primary" />
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Colors Section */}
        <TabsContent value="colors" className="mt-0">
          <Card className="bg-black border-border">
            <CardHeader>
              <CardTitle>Color Palette</CardTitle>
              <CardDescription>
                The GitHub.GG color palette is designed to be modern, tech-forward, and approachable.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {colorPalette.map((color, index) => (
                  <div key={index} className="flex">
                    <div className="w-24 h-24 rounded-l-lg flex-shrink-0" style={{ backgroundColor: color.hex }}></div>
                    <div className="flex-1 border border-l-0 border-border rounded-r-lg p-4 bg-gray-900">
                      <h3 className="font-medium mb-1">{color.name}</h3>
                      <p className="text-sm font-mono mb-2">{color.hex}</p>
                      <p className="text-xs text-muted-foreground">{color.usage}</p>
                    </div>
                  </div>
                ))}
              </div>

              <div className="mt-8 space-y-4">
                <h3 className="text-lg font-medium">Color Usage Guidelines</h3>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                  <div>
                    <h4 className="font-medium mb-2">Primary Green</h4>
                    <p className="text-sm text-muted-foreground mb-3">
                      Use the primary green (#2ecc71) for main call-to-actions, important UI elements, and the logo.
                    </p>
                    <div className="flex gap-3">
                      <div className="px-4 py-2 bg-primary rounded-md text-black font-medium">Button</div>
                      <div className="px-4 py-2 border border-primary rounded-md text-primary font-medium">Outline</div>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">Dark Backgrounds</h4>
                    <p className="text-sm text-muted-foreground mb-3">
                      Use dark backgrounds for main content areas, with subtle gradient variations for visual interest.
                    </p>
                    <div className="h-16 rounded-md overflow-hidden">
                      <div className="h-full w-full bg-gradient-to-r from-black to-[#1e1e1e]"></div>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Typography Section */}
        <TabsContent value="typography" className="mt-0">
          <Card className="bg-black border-border">
            <CardHeader>
              <CardTitle>Typography</CardTitle>
              <CardDescription>Typography guidelines for consistent branding across all materials.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-8">
              <div>
                <h3 className="text-lg font-medium mb-4">Primary Typeface: Inter</h3>
                <p className="text-muted-foreground mb-6">
                  Inter is our primary typeface for all headings and body copy. It's a clean, modern sans-serif that
                  offers excellent readability across different sizes and weights.
                </p>

                <div className="space-y-6">
                  <div>
                    <h4 className="text-sm text-muted-foreground mb-2">Heading 1 (36px/Bold)</h4>
                    <p className="text-4xl font-bold">Understand Code Instantly</p>
                  </div>

                  <div>
                    <h4 className="text-sm text-muted-foreground mb-2">Heading 2 (30px/Bold)</h4>
                    <p className="text-3xl font-bold">AI-Powered Code Analysis</p>
                  </div>

                  <div>
                    <h4 className="text-sm text-muted-foreground mb-2">Heading 3 (24px/Bold)</h4>
                    <p className="text-2xl font-bold">Save Time on Development</p>
                  </div>

                  <div>
                    <h4 className="text-sm text-muted-foreground mb-2">Body (16px/Regular)</h4>
                    <p className="text-base">
                      GitHub.GG is an innovative web application designed to revolutionize how developers interact with
                      and understand code repositories.
                    </p>
                  </div>

                  <div>
                    <h4 className="text-sm text-muted-foreground mb-2">Small/Caption (14px/Regular)</h4>
                    <p className="text-sm text-muted-foreground">
                      By simply changing "github.com" to "github.gg" in any repository URL, users instantly access
                      AI-powered insights.
                    </p>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-medium mb-4">Secondary Typeface: JetBrains Mono</h3>
                <p className="text-muted-foreground mb-6">
                  JetBrains Mono is used for code examples, technical information, and when we want to emphasize the
                  technical nature of GitHub.GG.
                </p>

                <div className="p-4 bg-gray-900 rounded border border-border font-mono">
                  <p className="mb-2 text-sm">Code example:</p>
                  <p className="text-green-400">https://github.gg/vercel/next.js</p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div>
                  <h3 className="text-lg font-medium mb-4">Typography Don'ts</h3>
                  <ul className="space-y-2 text-muted-foreground">
                    <li>‚Ä¢ Don't use more than two typefaces in a single design</li>
                    <li>‚Ä¢ Don't use lightweight fonts below 16px size</li>
                    <li>‚Ä¢ Don't use decorative fonts that conflict with our tech-focused brand</li>
                    <li>‚Ä¢ Ensure sufficient contrast for readability</li>
                  </ul>
                </div>

                <div>
                  <h3 className="text-lg font-medium mb-4">Font Hierarchy</h3>
                  <p className="text-muted-foreground mb-4">
                    Maintain clear hierarchy in designs by using appropriate font sizes and weights.
                  </p>
                  <div className="space-y-2">
                    <div className="h-8 bg-primary/10 rounded w-full"></div>
                    <div className="h-6 bg-primary/10 rounded w-4/5"></div>
                    <div className="h-4 bg-primary/10 rounded w-3/5"></div>
                    <div className="h-3 bg-primary/10 rounded w-2/5"></div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Tone & Voice Section */}
        <TabsContent value="tone" className="mt-0">
          <Card className="bg-black border-border">
            <CardHeader>
              <CardTitle>Tone & Voice</CardTitle>
              <CardDescription>Guidelines for how GitHub.GG communicates in writing and messaging.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-8">
              <div>
                <h3 className="text-lg font-medium mb-4">Brand Voice</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="p-6 rounded-lg border border-border bg-gray-900">
                    <h4 className="font-medium mb-3">Confident & Knowledgeable</h4>
                    <p className="text-muted-foreground text-sm">
                      We speak with authority on technical topics, but avoid being condescending or overly complex.
                    </p>
                  </div>

                  <div className="p-6 rounded-lg border border-border bg-gray-900">
                    <h4 className="font-medium mb-3">Helpful & Empowering</h4>
                    <p className="text-muted-foreground text-sm">
                      We emphasize how our tool helps developers achieve their goals and overcome obstacles.
                    </p>
                  </div>

                  <div className="p-6 rounded-lg border border-border bg-gray-900">
                    <h4 className="font-medium mb-3">Slightly Playful</h4>
                    <p className="text-muted-foreground text-sm">
                      While professional, we use a conversational tone and occasional tech-related humor.
                    </p>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-medium mb-4">Messaging Examples</h3>

                <div className="space-y-6">
                  <div>
                    <h4 className="font-medium mb-2">Headlines</h4>
                    <div className="p-4 rounded border border-border bg-gray-900 space-y-3">
                      <p className="text-xl">"Understand Code Instantly with AI."</p>
                      <p className="text-xl">"Stop Wasting Time on Code Comprehension."</p>
                      <p className="text-xl">"The AI-Powered Assistant for Every GitHub Repository."</p>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">Benefit-Driven Messages</h4>
                    <div className="p-4 rounded border border-border bg-gray-900 space-y-3">
                      <p>"Understand any codebase in minutes, not hours."</p>
                      <p>"Onboard new team members faster and easier."</p>
                      <p>"Make code reviews more efficient and effective."</p>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">Call to Action</h4>
                    <div className="p-4 rounded border border-border bg-gray-900 space-y-3">
                      <p>"Try GitHub.GG Free Today!"</p>
                      <p>"Transform Your Code Workflow - Visit GitHub.GG Now."</p>
                      <p>"Get Instant AI Insights: Just Change 'github.com' to 'github.gg'."</p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div>
                  <h3 className="text-lg font-medium mb-4">Do's</h3>
                  <ul className="space-y-2 text-muted-foreground">
                    <li>‚Ä¢ Focus on benefits rather than just features</li>
                    <li>‚Ä¢ Speak directly to the developer audience</li>
                    <li>‚Ä¢ Use active voice and clear, concise language</li>
                    <li>‚Ä¢ Emphasize time savings and improved understanding</li>
                    <li>‚Ä¢ Balance technical accuracy with approachability</li>
                  </ul>
                </div>

                <div>
                  <h3 className="text-lg font-medium mb-4">Don'ts</h3>
                  <ul className="space-y-2 text-muted-foreground">
                    <li>‚Ä¢ Use overly technical jargon that might alienate some users</li>
                    <li>‚Ä¢ Make exaggerated claims about AI capabilities</li>
                    <li>‚Ä¢ Use a formal or corporate tone that feels impersonal</li>
                    <li>‚Ä¢ Speak negatively about competitors or other tools</li>
                    <li>‚Ä¢ Use language that might date quickly in the fast-moving AI space</li>
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

----
components/carousel-ad.tsx
import { Code2Icon, BrainCircuitIcon, ClockIcon } from "lucide-react"

export default function CarouselAd() {
  // This component represents a LinkedIn/Facebook carousel ad set
  // Each slide would be used as a separate image in the carousel
  return (
    <div className="grid grid-cols-1 gap-8">
      {/* Slide 1: Introduction */}
      <div className="w-[1080px] h-[1080px] bg-black flex flex-col items-center justify-center p-12 relative">
        <div className="absolute inset-0 bg-gradient-to-br from-primary/20 to-transparent opacity-30" />

        <div className="z-10 flex flex-col items-center">
          <div className="flex items-center gap-3 mb-8">
            <div className="w-16 h-16 bg-primary rounded-md flex items-center justify-center">
              <Code2Icon className="h-10 w-10 text-black" />
            </div>
            <span className="text-5xl font-bold text-white">GitHub.GG</span>
          </div>

          <h1 className="text-7xl font-bold text-center mb-8 max-w-[800px] leading-tight">
            Stop Wasting Time on Code Comprehension
          </h1>

          <p className="text-3xl text-center text-gray-300 mb-12 max-w-[700px]">
            Introducing AI-powered code understanding for developers and teams
          </p>

          <div className="px-8 py-4 bg-primary rounded-lg text-black font-semibold text-2xl">Swipe to Learn More</div>
        </div>

        <div className="absolute bottom-8 right-8 text-white/50 text-lg">1/4</div>
      </div>

      {/* Slide 2: Feature 1 */}
      <div className="w-[1080px] h-[1080px] bg-black flex flex-col items-center justify-center p-12 relative">
        <div className="absolute inset-0 bg-gradient-to-br from-primary/20 to-transparent opacity-30" />

        <div className="z-10 flex flex-col items-center">
          <div className="w-24 h-24 rounded-full bg-primary/20 flex items-center justify-center mb-8">
            <BrainCircuitIcon className="h-12 w-12 text-primary" />
          </div>

          <h2 className="text-6xl font-bold text-center mb-8">Instant AI Summaries</h2>

          <p className="text-3xl text-center text-gray-300 mb-12 max-w-[800px]">
            Get quick overviews of repositories, files, and code sections with AI-powered analysis.
          </p>

          <div className="w-[800px] h-[400px] rounded-lg border border-gray-700 bg-gray-900/50 flex items-center justify-center">
            <span className="text-gray-400">[Repository Summary UI Mockup]</span>
          </div>
        </div>

        <div className="absolute bottom-8 right-8 text-white/50 text-lg">2/4</div>
      </div>

      {/* Slide 3: Feature 2 */}
      <div className="w-[1080px] h-[1080px] bg-black flex flex-col items-center justify-center p-12 relative">
        <div className="absolute inset-0 bg-gradient-to-br from-primary/20 to-transparent opacity-30" />

        <div className="z-10 flex flex-col items-center">
          <div className="w-24 h-24 rounded-full bg-primary/20 flex items-center justify-center mb-8">
            <ClockIcon className="h-12 w-12 text-primary" />
          </div>

          <h2 className="text-6xl font-bold text-center mb-8">Save Hours of Time</h2>

          <p className="text-3xl text-center text-gray-300 mb-12 max-w-[800px]">
            Reduce the time spent understanding new or complex codebases from hours to minutes.
          </p>

          <div className="w-[800px] h-[400px] rounded-lg border border-gray-700 bg-gray-900/50 flex items-center justify-center">
            <span className="text-gray-400">[Time-saving Comparison Graphic]</span>
          </div>
        </div>

        <div className="absolute bottom-8 right-8 text-white/50 text-lg">3/4</div>
      </div>

      {/* Slide 4: CTA */}
      <div className="w-[1080px] h-[1080px] bg-black flex flex-col items-center justify-center p-12 relative">
        <div className="absolute inset-0 bg-gradient-to-br from-primary/20 to-transparent opacity-30" />

        <div className="z-10 flex flex-col items-center">
          <h2 className="text-7xl font-bold text-center mb-10">How to Get Started</h2>

          <div className="flex flex-col gap-8 mb-12">
            <div className="flex items-center gap-6">
              <div className="w-14 h-14 rounded-full bg-primary flex items-center justify-center text-black text-3xl font-bold">
                1
              </div>
              <p className="text-3xl">Visit any GitHub repository</p>
            </div>

            <div className="flex items-center gap-6">
              <div className="w-14 h-14 rounded-full bg-primary flex items-center justify-center text-black text-3xl font-bold">
                2
              </div>
              <p className="text-3xl">
                Change <span className="line-through text-red-400">github.com</span> to{" "}
                <span className="text-primary">github.gg</span>
              </p>
            </div>

            <div className="flex items-center gap-6">
              <div className="w-14 h-14 rounded-full bg-primary flex items-center justify-center text-black text-3xl font-bold">
                3
              </div>
              <p className="text-3xl">Instantly get AI-powered insights</p>
            </div>
          </div>

          <div className="px-8 py-4 bg-primary rounded-lg text-black font-semibold text-2xl mb-6">
            Try GitHub.GG Free Today
          </div>

          <p className="text-xl text-gray-400">Free tier available ‚Ä¢ Pro version for teams</p>
        </div>

        <div className="absolute bottom-8 right-8 text-white/50 text-lg">4/4</div>
      </div>
    </div>
  )
}

----
components/client-page-wrapper.tsx
"use client"

import type React from "react"

import { Suspense } from "react"

interface ClientPageWrapperProps {
  children: React.ReactNode
}

export function ClientPageWrapper({ children }: ClientPageWrapperProps) {
  return <Suspense fallback={<div>Loading...</div>}>{children}</Suspense>
}

----
components/code-highlight.tsx
"use client"

import { useState, useEffect } from "react"

export default function CodeHighlight() {
  const [isLoaded, setIsLoaded] = useState(false)

  useEffect(() => {
    setIsLoaded(true)
  }, [])

  // Sample code with syntax highlighting
  const code = `// app/page.tsx
import { getRepository } from '@/lib/github'

export default async function Page({ params }) {
  const repo = await getRepository(params.owner, params.repo)
  
  return (
    <div className="repository-container">
      <h1>{repo.name}</h1>
      <p>{repo.description}</p>
      <div className="stats">
        <span>{repo.stars} ‚≠ê</span>
        <span>{repo.forks} üç¥</span>
      </div>
      {/* File tree and content will render here */}
    </div>
  )
}`

  // Simple syntax highlighting
  const highlightedCode = code
    .replace(/(\/\/.*)/g, '<span class="text-gray-500">$1</span>')
    .replace(/('.*?'|".*?")/g, '<span class="text-yellow-300">$1</span>')
    .replace(
      /\b(import|export|from|async|function|await|return|const|params)\b/g,
      '<span class="text-purple-400">$1</span>',
    )
    .replace(/\b(className|div|span|h1|p)\b/g, '<span class="text-blue-400">$1</span>')
    .replace(/({|}|$$|$$|=>|;)/g, '<span class="text-gray-400">$1</span>')
    .replace(/(@\/.*)/g, '<span class="text-green-400">$1</span>')

  return (
    <div
      className={`font-mono text-xs p-4 rounded-md bg-gray-900/70 border border-border/50 overflow-auto transition-opacity duration-500 ${isLoaded ? "opacity-100" : "opacity-0"}`}
    >
      <pre className="leading-relaxed">
        <code dangerouslySetInnerHTML={{ __html: highlightedCode }} />
      </pre>
    </div>
  )
}

----
components/domain-animation.tsx
"use client"

import { useSpring, animated, config } from "react-spring"
import { useState, useEffect, useRef } from "react"

// Define animation states as an enum for better type safety and readability
enum AnimationState {
  NORMAL = "normal",
  STRIKETHROUGH = "strikethrough",
  GG = "gg",
}

export default function DomainAnimation() {
  // Use a single state variable with the enum instead of multiple booleans
  const [animationState, setAnimationState] = useState<AnimationState>(AnimationState.NORMAL)
  const [currentRepo, setCurrentRepo] = useState(0)
  const containerRef = useRef<HTMLDivElement>(null)

  // List of GitHub repositories to cycle through
  const githubRepos = [
    "preactjs/preact",
    "solidjs/solid",
    "sveltejs/svelte",
    "tinyplex/tinybase",
    "bigskysoftware/htmx",
  ]

  // Animation for the .com text - moves up when exiting with enhanced tweening
  const comSpringProps = useSpring({
    opacity: animationState === AnimationState.GG ? 0 : 1,
    transform: animationState === AnimationState.GG ? "translateY(-20px)" : "translateY(0px)",
    config: {
      tension: 180,
      friction: 24,
      mass: 1.2,
    }, // Smoother animation
  })

  // Animation for the .gg text - comes from above with enhanced tweening
  const ggSpringProps = useSpring({
    opacity: animationState === AnimationState.GG ? 1 : 0,
    transform: animationState === AnimationState.GG ? "translateY(0px)" : "translateY(-20px)",
    config: {
      tension: 180,
      friction: 24,
      mass: 1.2,
    }, // Smoother animation
  })

  // Animation for the repository text
  const repoSpringProps = useSpring({
    from: { opacity: 0, transform: "translateY(10px)" },
    to: { opacity: 1, transform: "translateY(0px)" },
    reset: true,
    config: config.gentle,
    delay: 200,
    key: currentRepo, // This ensures the animation reruns when the repo changes
  })

  // Auto-play animation with adjusted timing
  useEffect(() => {
    // Stage durations (in milliseconds)
    const normalStageDuration = 800 // 800ms for normal stage
    const strikethroughStageDuration = 800 // 800ms for strikethrough stage
    const ggStageDuration = 1600 // 1600ms for .gg stage (double time)

    // Define the animation steps
    const runAnimationCycle = () => {
      // Stage 1: Show .com normally
      setAnimationState(AnimationState.NORMAL)

      // Stage 2: Apply strikethrough to .com
      setTimeout(() => {
        setAnimationState(AnimationState.STRIKETHROUGH)
      }, normalStageDuration)

      // Stage 3: Transition to .gg
      setTimeout(() => {
        setAnimationState(AnimationState.GG)
      }, normalStageDuration + strikethroughStageDuration)

      // After completing a full cycle, change the repo
      setTimeout(
        () => {
          setCurrentRepo((prev) => (prev + 1) % githubRepos.length)
        },
        normalStageDuration + strikethroughStageDuration + ggStageDuration,
      )
    }

    // Run the animation immediately on first render
    runAnimationCycle()

    // Set up the interval to repeat the animation
    const totalCycleDuration = normalStageDuration + strikethroughStageDuration + ggStageDuration
    const timer = setInterval(() => {
      runAnimationCycle()
    }, totalCycleDuration)

    return () => clearInterval(timer)
  }, [githubRepos.length])

  return (
    <div className="text-6xl md:text-8xl font-bold flex items-center" ref={containerRef}>
      {/* Fixed GitHub text */}
      <span className="flex-shrink-0">GitHub</span>

      {/* Container for the animated parts with fixed position */}
      <div className="relative h-20 overflow-visible" style={{ minWidth: "400px" }}>
        {/* .com version with path */}
        <animated.div style={comSpringProps} className="absolute left-0 top-0 flex items-center whitespace-nowrap">
          <span
            className="text-white/80"
            style={{
              textDecoration:
                animationState === AnimationState.STRIKETHROUGH || animationState === AnimationState.GG
                  ? "line-through"
                  : "none",
              textDecorationColor:
                animationState === AnimationState.STRIKETHROUGH || animationState === AnimationState.GG
                  ? "#ef4444"
                  : "transparent",
              textDecorationThickness: "4px",
              transition: "text-decoration-color 0.3s ease",
            }}
          >
            .com
          </span>
          <animated.span style={repoSpringProps} className="text-white/80">
            /{githubRepos[currentRepo]}
          </animated.span>
        </animated.div>

        {/* .gg version with path */}
        <animated.div style={ggSpringProps} className="absolute left-0 top-0 flex items-center whitespace-nowrap">
          <span className="text-primary">.gg</span>
          <animated.span style={repoSpringProps} className="text-white/80">
            /{githubRepos[currentRepo]}
          </animated.span>
        </animated.div>
      </div>
    </div>
  )
}

----
components/dynamic-grid-background.tsx
"use client"

import { useEffect, useRef } from "react"

export default function DynamicGridBackground() {
  const canvasRef = useRef<HTMLCanvasElement>(null)

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // Grid properties - define these BEFORE they're used
    const gridSize = 50
    const smallGridSize = 10
    const lineWidth = 0.5
    const smallLineWidth = 0.2

    // Animation properties
    let animationFrame: number
    let time = 0

    // Set canvas to full screen
    const resizeCanvas = () => {
      canvas.width = window.innerWidth
      canvas.height = window.innerHeight
      drawGrid()
    }

    // Initial resize
    resizeCanvas()

    // Handle window resize
    window.addEventListener("resize", resizeCanvas)

    function drawGrid() {
      if (!ctx || !canvas) return

      // Clear canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height)

      // Create gradient background
      const gradient = ctx.createRadialGradient(
        canvas.width / 2,
        canvas.height / 2,
        0,
        canvas.width / 2,
        canvas.height / 2,
        canvas.width * 0.8,
      )
      gradient.addColorStop(0, "rgba(255, 200, 255, 0.03)")
      gradient.addColorStop(1, "rgba(255, 150, 200, 0.01)")

      ctx.fillStyle = gradient
      ctx.fillRect(0, 0, canvas.width, canvas.height)

      // Draw large grid
      ctx.beginPath()
      ctx.strokeStyle = "rgba(255, 100, 150, 0.07)"
      ctx.lineWidth = lineWidth

      // Vertical lines with variation
      for (let x = 0; x < canvas.width; x += gridSize) {
        const xOffset = Math.sin(x * 0.01 + time * 0.1) * 2
        ctx.moveTo(x + xOffset, 0)
        ctx.lineTo(x + xOffset + Math.sin(x * 0.005) * 5, canvas.height)
      }

      // Horizontal lines with variation
      for (let y = 0; y < canvas.height; y += gridSize) {
        const yOffset = Math.cos(y * 0.01 + time * 0.1) * 2
        ctx.moveTo(0, y + yOffset)
        ctx.lineTo(canvas.width, y + yOffset + Math.sin(y * 0.005) * 5)
      }

      ctx.stroke()

      // Draw smaller grid with different opacity
      ctx.beginPath()
      ctx.strokeStyle = "rgba(255, 100, 150, 0.03)"
      ctx.lineWidth = smallLineWidth

      // Vertical small lines
      for (let x = 0; x < canvas.width; x += smallGridSize) {
        if (x % gridSize !== 0) {
          // Don't draw where large grid lines are
          ctx.moveTo(x, 0)
          ctx.lineTo(x, canvas.height)
        }
      }

      // Horizontal small lines
      for (let y = 0; y < canvas.height; y += smallGridSize) {
        if (y % gridSize !== 0) {
          // Don't draw where large grid lines are
          ctx.moveTo(0, y)
          ctx.lineTo(canvas.width, y)
        }
      }

      ctx.stroke()

      // Add some glowing points at intersections
      const numPoints = 20
      for (let i = 0; i < numPoints; i++) {
        const x = Math.floor(Math.random() * (canvas.width / gridSize)) * gridSize
        const y = Math.floor(Math.random() * (canvas.height / gridSize)) * gridSize

        const glow = ctx.createRadialGradient(x, y, 0, x, y, 20 + Math.sin(time * 0.5 + i) * 10)
        glow.addColorStop(0, "rgba(255, 150, 200, 0.15)")
        glow.addColorStop(1, "rgba(255, 150, 200, 0)")

        ctx.fillStyle = glow
        ctx.fillRect(x - 20, y - 20, 40, 40)
      }

      // Add subtle noise texture
      addNoiseTexture(ctx, canvas.width, canvas.height, 0.01)
    }

    function addNoiseTexture(ctx: CanvasRenderingContext2D, width: number, height: number, alpha: number) {
      const imageData = ctx.getImageData(0, 0, width, height)
      const data = imageData.data

      for (let i = 0; i < data.length; i += 4) {
        const noise = Math.random() * 255
        data[i] = Math.min(data[i] + noise * alpha, 255)
        data[i + 1] = Math.min(data[i + 1] + noise * alpha, 255)
        data[i + 2] = Math.min(data[i + 2] + noise * alpha, 255)
      }

      ctx.putImageData(imageData, 0, 0)
    }

    function animate() {
      time += 0.01
      drawGrid()
      animationFrame = requestAnimationFrame(animate)
    }

    // Start animation
    animate()

    // Cleanup
    return () => {
      window.removeEventListener("resize", resizeCanvas)
      cancelAnimationFrame(animationFrame)
    }
  }, [])

  return <canvas ref={canvasRef} className="fixed top-0 left-0 w-full h-full -z-10 pointer-events-none" />
}

----
components/email-capture-modal.tsx
"use client"

import type React from "react"

import { useState } from "react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { GithubIcon } from "lucide-react"

interface EmailCaptureModalProps {
  isOpen: boolean
  onClose: () => void
  planType: "free" | "pro" | "ultra" | "team" | "enterprise"
  onSubmit: (email: string) => Promise<void>
}

export default function EmailCaptureModal({ isOpen, onClose, planType, onSubmit }: EmailCaptureModalProps) {
  const [email, setEmail] = useState("")
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState("")
  const [success, setSuccess] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")

    // Basic email validation
    if (!email || !/^\S+@\S+\.\S+$/.test(email)) {
      setError("Please enter a valid email address")
      return
    }

    setIsSubmitting(true)

    try {
      await onSubmit(email)
      setSuccess(true)
      // Close modal after 2 seconds of showing success
      setTimeout(() => {
        onClose()
        setSuccess(false)
        setEmail("")
      }, 2000)
    } catch (err) {
      setError("Failed to submit. Please try again.")
    } finally {
      setIsSubmitting(false)
    }
  }

  const planTitles = {
    free: "Free Plan",
    pro: "Pro Plan",
    ultra: "ULTRA Plan",
    team: "Team Plan",
    enterprise: "Enterprise Plan",
  }

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="sm:max-w-[425px] bg-background border-border">
        <DialogHeader>
          <DialogTitle className="text-xl">Interested in {planTitles[planType]}?</DialogTitle>
          <DialogDescription>Enter your email to get more information about our {planType} plan.</DialogDescription>
        </DialogHeader>

        {success ? (
          <div className="py-6 text-center">
            <div className="mb-4 text-primary text-5xl">‚úì</div>
            <p className="text-lg font-medium">Thank you!</p>
            <p className="text-muted-foreground">We'll be in touch soon.</p>
          </div>
        ) : (
          <form onSubmit={handleSubmit}>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="you@example.com"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="bg-background border-input"
                  required
                />
                {error && <p className="text-destructive text-sm">{error}</p>}
              </div>
            </div>
            <DialogFooter>
              {planType === "free" ? (
                <Button type="button" className="w-full gap-2" onClick={onClose}>
                  <GithubIcon className="h-4 w-4" />
                  Sign in with GitHub
                </Button>
              ) : (
                <Button type="submit" className="w-full" disabled={isSubmitting}>
                  {isSubmitting ? "Submitting..." : "Get More Info"}
                </Button>
              )}
            </DialogFooter>
          </form>
        )}
      </DialogContent>
    </Dialog>
  )
}

----
components/email-modal-provider.tsx
"use client"

import { createContext, useContext, useState, type ReactNode, useEffect } from "react"
import EmailCaptureModal from "./email-capture-modal"

type PlanType = "free" | "pro" | "ultra" | "team" | "enterprise"

interface EmailModalContextType {
  openModal: (planType: PlanType) => void
  closeModal: () => void
}

const EmailModalContext = createContext<EmailModalContextType | undefined>(undefined)

export function useEmailModal() {
  const context = useContext(EmailModalContext)
  if (!context) {
    throw new Error("useEmailModal must be used within an EmailModalProvider")
  }
  return context
}

export function EmailModalProvider({ children }: { children: ReactNode }) {
  const [mounted, setMounted] = useState(false)
  const [isOpen, setIsOpen] = useState(false)
  const [planType, setPlanType] = useState<PlanType>("free")

  useEffect(() => {
    setMounted(true)
  }, [])

  const openModal = (plan: PlanType) => {
    setPlanType(plan)
    setIsOpen(true)
  }

  const closeModal = () => {
    setIsOpen(false)
  }

  const handleSubmit = async (email: string) => {
    // In a real implementation, you would use an email service
    console.log(`Email submitted: ${email} for plan: ${planType}`)

    // Simulate API call
    await new Promise((resolve) => setTimeout(resolve, 1000))

    return Promise.resolve()
  }

  if (!mounted) {
    return <>{children}</>
  }

  return (
    <EmailModalContext.Provider value={{ openModal, closeModal }}>
      {children}
      <EmailCaptureModal isOpen={isOpen} onClose={closeModal} planType={planType} onSubmit={handleSubmit} />
    </EmailModalContext.Provider>
  )
}

----
components/github-star-button.tsx
"use client"

import { useState, useEffect } from "react"
import { StarIcon } from "lucide-react"
import { fetchRepoData } from "@/lib/github-api"

interface GitHubStarButtonProps {
  owner: string
  repo: string
  className?: string
}

export function GitHubStarButton({ owner, repo, className = "" }: GitHubStarButtonProps) {
  const [starCount, setStarCount] = useState(0)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    async function loadRepoData() {
      setIsLoading(true)
      try {
        const data = await fetchRepoData(owner, repo)
        setStarCount(data.stargazers_count)
      } catch (error) {
        console.error("Error loading repo data:", error)
      } finally {
        setIsLoading(false)
      }
    }

    loadRepoData()
  }, [owner, repo])

  return (
    <a
      href={`https://github.com/${owner}/${repo}`}
      target="_blank"
      rel="noopener noreferrer"
      className={`flex items-center gap-1 text-sm text-muted-foreground hover:text-foreground transition-colors ${className}`}
    >
      <StarIcon className="h-4 w-4" />
      <span>Star</span>
      {isLoading ? (
        <span className="px-1 py-0.5 ml-1 text-xs bg-muted rounded-full animate-pulse w-4"></span>
      ) : (
        <span className="px-1 py-0.5 ml-1 text-xs bg-muted rounded-full">{starCount}</span>
      )}
    </a>
  )
}

----
components/insights-charts.tsx
"use client"

import { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts"

interface ContributorsChartProps {
  data: Array<{
    name: string
    contributions: number
  }>
}

export function ContributorsChart({ data }: ContributorsChartProps) {
  return (
    <ResponsiveContainer width="100%" height="100%">
      <BarChart data={data}>
        <CartesianGrid strokeDasharray="3 3" stroke="#333" />
        <XAxis dataKey="name" stroke="#666" />
        <YAxis stroke="#666" />
        <Tooltip contentStyle={{ backgroundColor: "#222", border: "1px solid #444" }} labelStyle={{ color: "#fff" }} />
        <Bar dataKey="contributions" fill="#25a55f" />
      </BarChart>
    </ResponsiveContainer>
  )
}

interface CommitsChartProps {
  data: Array<{
    name: string
    commits: number
  }>
}

export function CommitsChart({ data }: CommitsChartProps) {
  return (
    <ResponsiveContainer width="100%" height="100%">
      <BarChart data={data}>
        <CartesianGrid strokeDasharray="3 3" stroke="#333" />
        <XAxis dataKey="name" stroke="#666" />
        <YAxis stroke="#666" />
        <Tooltip contentStyle={{ backgroundColor: "#222", border: "1px solid #444" }} labelStyle={{ color: "#fff" }} />
        <Bar dataKey="commits" fill="#9b59b6" />
      </BarChart>
    </ResponsiveContainer>
  )
}

interface LineChartProps {
  data: Array<{
    date: string
    [key: string]: any
  }>
  dataKey: string
  color: string
}

export function SimpleLineChart({ data, dataKey, color }: LineChartProps) {
  return (
    <ResponsiveContainer width="100%" height="100%">
      <LineChart data={data}>
        <CartesianGrid strokeDasharray="3 3" stroke="#333" />
        <XAxis dataKey="date" stroke="#666" />
        <YAxis stroke="#666" />
        <Tooltip contentStyle={{ backgroundColor: "#222", border: "1px solid #444" }} labelStyle={{ color: "#fff" }} />
        <Line type="monotone" dataKey={dataKey} stroke={color} strokeWidth={2} />
      </LineChart>
    </ResponsiveContainer>
  )
}

----
components/layout/navbar.tsx
"use client"

import type React from "react"

import { useState } from "react"
import { GithubIcon, Code2Icon, MenuIcon } from "lucide-react"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { usePathname } from "next/navigation"
import { GitHubStarButton } from "@/components/ui/github-star-button"

export default function Navbar() {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  const pathname = usePathname()
  const isHomePage = pathname === "/"

  const handleSectionClick = (e: React.MouseEvent<HTMLAnchorElement>, sectionId: string) => {
    // Only handle smooth scrolling on the homepage
    if (isHomePage) {
      e.preventDefault()
      const element = document.getElementById(sectionId)
      if (element) {
        element.scrollIntoView({ behavior: "smooth" })
        setMobileMenuOpen(false)
      }
    }
  }

  return (
    <header className="sticky top-0 z-40 w-full border-b border-border/40 bg-black/80 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 items-center justify-between py-4">
        <div className="flex items-center gap-2">
          <div className="w-8 h-8 bg-primary rounded-sm flex items-center justify-center">
            <Code2Icon className="h-5 w-5 text-primary-foreground" />
          </div>
          <span className="text-xl font-semibold bg-clip-text text-transparent bg-gradient-to-r from-green-400 to-emerald-500">
            GitHub.GG
          </span>
        </div>

        {/* Desktop Navigation */}
        <nav className="hidden md:flex items-center gap-6">
          <Link
            href={isHomePage ? "#features" : "/#features"}
            className="text-sm font-medium text-muted-foreground hover:text-primary transition-colors"
            onClick={(e) => handleSectionClick(e, "features")}
          >
            Features
          </Link>
          <Link
            href={isHomePage ? "#pricing" : "/#pricing"}
            className="text-sm font-medium text-muted-foreground hover:text-primary transition-colors"
            onClick={(e) => handleSectionClick(e, "pricing")}
          >
            Pricing
          </Link>
          <Link href="/docs" className="text-sm font-medium text-muted-foreground hover:text-primary transition-colors">
            Docs
          </Link>

          {/* GitHub-style Star Button */}
          <GitHubStarButton />
        </nav>

        {/* Desktop Actions */}
        <div className="hidden md:flex items-center gap-4">
          <Button variant="outline" size="sm" className="gap-2">
            <GithubIcon className="h-4 w-4" />
            Sign In with GitHub
          </Button>
          <Button size="sm" className="bg-primary hover:bg-primary/90">
            Try Now
          </Button>
        </div>

        {/* Mobile Menu Button */}
        <div className="md:hidden flex items-center">
          <Button variant="ghost" size="sm" className="p-1" onClick={() => setMobileMenuOpen(!mobileMenuOpen)}>
            <MenuIcon className="h-5 w-5" />
          </Button>
        </div>
      </div>

      {/* Mobile Menu */}
      {mobileMenuOpen && (
        <div className="md:hidden bg-black/95 border-b border-border/40 py-4">
          <div className="container flex flex-col space-y-4">
            <Link
              href={isHomePage ? "#features" : "/#features"}
              className="text-sm font-medium text-muted-foreground hover:text-primary transition-colors py-2"
              onClick={(e) => handleSectionClick(e, "features")}
            >
              Features
            </Link>
            <Link
              href={isHomePage ? "#pricing" : "/#pricing"}
              className="text-sm font-medium text-muted-foreground hover:text-primary transition-colors py-2"
              onClick={(e) => handleSectionClick(e, "pricing")}
            >
              Pricing
            </Link>
            <Link
              href="/docs"
              className="text-sm font-medium text-muted-foreground hover:text-primary transition-colors py-2"
            >
              Docs
            </Link>

            {/* Mobile GitHub-style Star Button */}
            <GitHubStarButton className="w-full" />

            <div className="flex flex-col space-y-3 pt-2">
              <Button variant="outline" size="sm" className="justify-center gap-2 w-full">
                <GithubIcon className="h-4 w-4" />
                Sign In with GitHub
              </Button>
              <Button size="sm" className="bg-primary hover:bg-primary/90 w-full">
                Try Now
              </Button>
            </div>
          </div>
        </div>
      )}
    </header>
  )
}

----
components/layout/site-footer.tsx
"use client"

import type React from "react"

import Link from "next/link"
import { Code2Icon } from "lucide-react"
import { usePathname } from "next/navigation"
import { useCallback } from "react"

export default function SiteFooter() {
  const pathname = usePathname()

  // Function to handle smooth scrolling for anchor links on homepage
  const handleAnchorClick = useCallback(
    (e: React.MouseEvent<HTMLAnchorElement>, sectionId: string) => {
      // Only handle anchor scrolling on homepage
      if (pathname === "/") {
        e.preventDefault()
        const section = document.getElementById(sectionId)
        if (section) {
          window.scrollTo({
            top: section.offsetTop - 80, // Offset for header
            behavior: "smooth",
          })
        }
      }
    },
    [pathname],
  )

  // Function to generate the correct link for sections that exist on homepage
  const getSectionLink = useCallback(
    (sectionName: string) => {
      const homepageSections = ["features", "pricing", "testimonials"]
      const sectionId = sectionName.toLowerCase()

      if (homepageSections.includes(sectionId)) {
        // If we're on homepage, use anchor link, otherwise link to homepage with anchor
        return pathname === "/" ? `#${sectionId}` : `/#${sectionId}`
      }

      // For other pages, use regular path
      return `/${sectionId}`
    },
    [pathname],
  )

  return (
    <footer className="bg-black/70 border-t border-border/40 py-10 md:py-16">
      <div className="container px-4 md:px-6">
        <div className="flex flex-col md:flex-row justify-between gap-8">
          <div className="md:w-1/3">
            <Link href="/" className="flex items-center gap-2 mb-4">
              <div className="w-8 h-8 bg-primary rounded-sm flex items-center justify-center">
                <Code2Icon className="h-5 w-5 text-primary-foreground" />
              </div>
              <span className="text-xl font-semibold bg-clip-text text-transparent bg-gradient-to-r from-green-400 to-emerald-500">
                GitHub.GG
              </span>
            </Link>
            <p className="text-muted-foreground mb-4">Unlock the power of AI to understand code instantly.</p>
            <div className="flex gap-4">
              <Link href="#" className="text-muted-foreground hover:text-primary">
                Twitter
              </Link>
              <Link href="#" className="text-muted-foreground hover:text-primary">
                GitHub
              </Link>
              <Link href="#" className="text-muted-foreground hover:text-primary">
                Discord
              </Link>
            </div>
          </div>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-6 md:gap-8 md:w-2/3">
            <div>
              <h3 className="font-medium mb-3">Product</h3>
              <ul className="space-y-2">
                {[
                  { name: "Features", id: "features" },
                  { name: "Pricing", id: "pricing" },
                  { name: "Testimonials", id: "testimonials" },
                  { name: "FAQ", id: "faq" },
                ].map((item) => (
                  <li key={item.id}>
                    <Link
                      href={getSectionLink(item.id)}
                      onClick={(e) => handleAnchorClick(e, item.id)}
                      className="text-sm text-muted-foreground hover:text-foreground transition-colors"
                    >
                      {item.name}
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
            <div>
              <h3 className="font-medium mb-3">Resources</h3>
              <ul className="space-y-2">
                {["Documentation", "API", "Blog", "Community"].map((item, i) => (
                  <li key={i}>
                    <Link
                      href={`/${item.toLowerCase()}`}
                      className="text-sm text-muted-foreground hover:text-foreground transition-colors"
                    >
                      {item}
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
            <div>
              <h3 className="font-medium mb-3">Company</h3>
              <ul className="space-y-2">
                {["About", "Team", "Careers", "Contact"].map((item, i) => (
                  <li key={i}>
                    <Link
                      href={`/${item.toLowerCase()}`}
                      className="text-sm text-muted-foreground hover:text-foreground transition-colors"
                    >
                      {item}
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>

        <div className="border-t border-border/40 mt-8 md:mt-12 pt-6 md:pt-8 flex flex-col md:flex-row justify-between items-center">
          <p className="text-sm text-muted-foreground">
            &copy; {new Date().getFullYear()} GitHub.GG. All rights reserved.
          </p>
          <div className="flex gap-4 mt-4 md:mt-0">
            <Link href="/privacy" className="text-muted-foreground hover:text-foreground transition-colors">
              Privacy
            </Link>
            <Link href="/terms" className="text-muted-foreground hover:text-foreground transition-colors">
              Terms
            </Link>
          </div>
        </div>
      </div>
    </footer>
  )
}

----
components/layout/site-header.tsx
"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import Link from "next/link"
import { usePathname, useRouter } from "next/navigation"
import { Code2Icon, SearchIcon, MenuIcon, XIcon, GithubIcon } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { SearchResults } from "@/components/search/search-results"
import { searchMockData } from "@/lib/mock/search-data"
import { GitHubStarButton } from "@/components/github-star-button"
import type { SearchResult } from "@/lib/types/search"
import { useSession } from "next-auth/react"
import { LoginButton } from "@/components/auth/login-button"
import { UserAvatar } from "@/components/auth/user-avatar"
import { cn } from "@/lib/utils"

export default function SiteHeader() {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")
  const [searchResults, setSearchResults] = useState<SearchResult[]>([])
  const [isSearching, setIsSearching] = useState(false)
  const [showResults, setShowResults] = useState(false)
  const searchRef = useRef<HTMLDivElement>(null)
  const pathname = usePathname()
  const router = useRouter()

  // Handle click outside to close search results
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {
        setShowResults(false)
      }
    }

    document.addEventListener("mousedown", handleClickOutside)
    return () => {
      document.removeEventListener("mousedown", handleClickOutside)
    }
  }, [])

  // Reset search when pathname changes
  useEffect(() => {
    setSearchQuery("")
    setShowResults(false)
  }, [pathname])

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    if (searchQuery.trim()) {
      router.push(`/search?q=${encodeURIComponent(searchQuery.trim())}`)
      setShowResults(false)
    }
  }

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const query = e.target.value
    setSearchQuery(query)

    if (query.trim()) {
      setIsSearching(true)
      setShowResults(true)

      // Debounce search
      const timeoutId = setTimeout(() => {
        const results = searchMockData(query)
        setSearchResults(results)
        setIsSearching(false)
      }, 300)

      return () => clearTimeout(timeoutId)
    } else {
      setSearchResults([])
      setIsSearching(false)
    }
  }

  const handleSearchFocus = () => {
    if (searchQuery.trim()) {
      setShowResults(true)
    }
  }

  const closeSearchResults = () => {
    setShowResults(false)
  }

  // Handle smooth scrolling for section links
  const handleSectionClick = (e: React.MouseEvent<HTMLAnchorElement>, sectionId: string) => {
    // Only handle smooth scrolling on the homepage
    if (pathname === "/") {
      e.preventDefault()
      const section = document.getElementById(sectionId)
      if (section) {
        section.scrollIntoView({ behavior: "smooth" })
        setIsMenuOpen(false)
      }
    }
  }

  return (
    <header className="sticky top-0 z-40 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 items-center">
        <div className="flex items-center gap-2 mr-4">
          <Link href="/" className="flex items-center gap-2">
            <div className="w-8 h-8 bg-primary rounded-md flex items-center justify-center">
              <Code2Icon className="h-5 w-5 text-primary-foreground" />
            </div>
            <span className="text-xl font-semibold hidden md:inline-block">GitHub.GG</span>
          </Link>
        </div>

        <div className="flex-1 flex items-center">
          <div ref={searchRef} className="relative w-full max-w-md mr-4">
            <form onSubmit={handleSearch}>
              <div className="relative">
                <SearchIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  type="search"
                  placeholder="Search repositories..."
                  className="pl-10 w-full"
                  value={searchQuery}
                  onChange={handleSearchChange}
                  onFocus={handleSearchFocus}
                />
              </div>
            </form>

            {showResults && (
              <SearchResults
                results={searchResults}
                query={searchQuery}
                isLoading={isSearching}
                onResultClick={closeSearchResults}
              />
            )}
          </div>
        </div>

        {/* Desktop Navigation */}
        <nav className="hidden md:flex items-center gap-6">
          <Link
            href="/explore"
            className={`text-sm font-medium ${
              pathname === "/explore" ? "text-foreground" : "text-muted-foreground"
            } hover:text-foreground transition-colors`}
          >
            Explore
          </Link>
          <Link
            href={pathname === "/" ? "#features" : "/#features"}
            className={`text-sm font-medium text-muted-foreground hover:text-foreground transition-colors`}
            onClick={(e) => handleSectionClick(e, "features")}
          >
            Features
          </Link>
          <Link
            href={pathname === "/" ? "#pricing" : "/#pricing"}
            className={`text-sm font-medium text-muted-foreground hover:text-foreground transition-colors`}
            onClick={(e) => handleSectionClick(e, "pricing")}
          >
            Pricing
          </Link>
          <Link
            href="/docs"
            className={`text-sm font-medium ${
              pathname === "/docs" ? "text-foreground" : "text-muted-foreground"
            } hover:text-foreground transition-colors`}
          >
            Docs
          </Link>

          {/* GitHub Star Button */}
          <GitHubStarButton owner="lantos1618" repo="github.gg" />
        </nav>

        <div className="flex items-center gap-4">
          <div className="hidden md:block">
            <AuthButtons />
          </div>
          <Button 
            variant="ghost" 
            size="icon" 
            className="md:hidden" 
            onClick={() => setIsMenuOpen(!isMenuOpen)}
          >
            {isMenuOpen ? <XIcon className="h-5 w-5" /> : <MenuIcon className="h-5 w-5" />}
            <span className="sr-only">Toggle menu</span>
          </Button>
        </div>

        {/* Mobile Menu */}
        {isMenuOpen && (
          <div className="md:hidden border-t py-4">
            <div className="container flex flex-col space-y-4">
              <Link
                href="/explore"
                className={`text-sm font-medium ${
                  pathname === "/explore" ? "text-foreground" : "text-muted-foreground"
                } hover:text-foreground transition-colors py-2`}
                onClick={() => setIsMenuOpen(false)}
              >
                Explore
              </Link>
              <Link
                href={pathname === "/" ? "#features" : "/#features"}
                className="text-sm font-medium text-muted-foreground hover:text-foreground transition-colors py-2"
                onClick={(e) => handleSectionClick(e, "features")}
              >
                Features
              </Link>
              <Link
                href={pathname === "/" ? "#pricing" : "/#pricing"}
                className="text-sm font-medium text-muted-foreground hover:text-foreground transition-colors py-2"
                onClick={(e) => handleSectionClick(e, "pricing")}
              >
                Pricing
              </Link>
              <Link
                href="/docs"
                className={`text-sm font-medium ${
                  pathname === "/docs" ? "text-foreground" : "text-muted-foreground"
                } hover:text-foreground transition-colors py-2`}
                onClick={() => setIsMenuOpen(false)}
              >
                Docs
              </Link>

              {/* Mobile GitHub Star Button */}
              <GitHubStarButton owner="lantos1618" repo="github.gg" className="py-2" />

              {/* Mobile Auth Buttons */}
              <div className="flex flex-col space-y-3 pt-2">
                <div className="md:hidden">
                  <AuthButtons />
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </header>
  )
}

interface AuthButtonsProps {
  className?: string;
}

function AuthButtons({ className }: AuthButtonsProps) {
  const { data: session, status } = useSession()
  
  if (status === 'loading') {
    return (
      <div 
        className={cn(
          "w-24 h-9 bg-gray-100 dark:bg-gray-800 rounded-md overflow-hidden",
          className
        )}
      >
        <div className="h-full w-full animate-pulse bg-gradient-to-r from-transparent via-gray-200 dark:via-gray-700 to-transparent"></div>
      </div>
    )
  }

  if (status === 'authenticated' && session) {
    return <UserAvatar className={className} />
  }

  // If unauthenticated or error state
  return <LoginButton className={className} />
}

----
components/pricing/pricing-card.tsx
"use client"

import type { ReactNode } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { SparklesIcon, RocketIcon, ExternalLinkIcon, GithubIcon } from "lucide-react"
import { motion } from "framer-motion"
import { useEmailModal } from "@/components/email-modal-provider"
import { useState } from "react"
import { useRouter } from "next/navigation"

export interface PricingFeature {
  text: string
  icon?: ReactNode
}

export interface PricingCardProps {
  title: string | ReactNode
  price: string
  priceDetail?: string
  description: string
  features: (PricingFeature | string)[]
  buttonText: string
  buttonVariant?: "default" | "outline" | "secondary" | "destructive" | "ghost" | "link" | null
  buttonAction?: () => void
  badge?: {
    text: string
    className?: string
  }
  className?: string
  iconColor?: string
  isUltra?: boolean
  planType: "free" | "pro" | "ultra" | "team" | "enterprise"
}

export default function PricingCard({
  title,
  price,
  priceDetail,
  description,
  features,
  buttonText,
  buttonVariant = "default",
  buttonAction,
  badge,
  className = "",
  iconColor = "text-primary",
  isUltra = false,
  planType,
}: PricingCardProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()

  // Use try/catch to handle the case when EmailModalProvider is not available
  const emailModalContext = useEmailModal()
  const { openModal } = emailModalContext

  const handleGitHubLogin = async () => {
    try {
      setIsLoading(true)
      setError(null)

      // Use client-side navigation instead of API route
      router.push("/github-login")
    } catch (err) {
      console.error("Error during GitHub login:", err)
      setError("Failed to navigate to login page. Please try again.")
      setIsLoading(false)
    }
  }

  const handleClick = () => {
    if (planType === "free") {
      handleGitHubLogin()
    } else if (buttonAction) {
      buttonAction()
    } else if (openModal) {
      openModal(planType)
    } else {
      console.log("No action available for this button")
    }
  }

  return (
    <motion.div whileHover={{ scale: 1.02 }} transition={{ type: "spring", stiffness: 300, damping: 20 }}>
      <Card className={`bg-background border-border relative overflow-hidden flex flex-col min-h-[600px] ${className}`}>
        {badge && (
          <div className="absolute top-0 right-0">
            <div
              className={`text-xs font-medium px-3 py-1 transform rotate-0 origin-top-right ${badge.className || "bg-primary text-primary-foreground"}`}
            >
              {badge.text}
            </div>
          </div>
        )}
        <CardHeader>
          <CardTitle>{title}</CardTitle>
          <div className="mt-4 mb-2 flex items-baseline">
            <span className="text-3xl md:text-4xl font-bold">{price}</span>
            {priceDetail && <span className="text-sm text-muted-foreground ml-1">{priceDetail}</span>}
            {!priceDetail && price !== "Custom" && <span className="text-sm text-muted-foreground ml-1">/month</span>}
          </div>
          <CardDescription>{description}</CardDescription>
        </CardHeader>
        <CardContent className="mt-2 flex-grow">
          <ul className="space-y-3">
            {features.map((feature, i) => (
              <li key={i} className="flex items-center gap-3">
                <div className="h-5 w-5 rounded-full bg-primary/20 flex items-center justify-center flex-shrink-0">
                  {typeof feature === "string" ? (
                    <SparklesIcon className={`h-3 w-3 ${iconColor}`} />
                  ) : (
                    feature.icon || <SparklesIcon className={`h-3 w-3 ${iconColor}`} />
                  )}
                </div>
                <span className={typeof feature === "string" ? "text-muted-foreground" : ""}>
                  {typeof feature === "string" ? feature : feature.text}
                </span>
              </li>
            ))}
          </ul>

          {error && (
            <div className="mt-4 p-2 bg-red-500/10 border border-red-500/20 rounded text-red-500 text-sm">{error}</div>
          )}
        </CardContent>
        <CardFooter className="pt-6 mt-auto">
          <Button
            className={`w-full font-bold tracking-wide ${
              isUltra
                ? "border-2 border-primary shadow-lg shadow-primary/20 hover:shadow-primary/40 transition-all"
                : ""
            }`}
            variant={buttonVariant as any}
            onClick={handleClick}
            disabled={isLoading}
          >
            <div className="flex items-center justify-center gap-2 w-full">
              {planType === "free" ? (
                <>
                  <GithubIcon className="h-4 w-4" />
                  <span>{isLoading ? "Connecting..." : "Sign in with GitHub"}</span>
                </>
              ) : isUltra ? (
                <div className="flex items-center justify-center gap-2 relative">
                  <RocketIcon className="h-4 w-4" />
                  <span>Get Ultra Access</span>
                </div>
              ) : (
                <>
                  <span>{buttonText}</span>
                  <ExternalLinkIcon className="h-4 w-4" />
                </>
              )}
            </div>
          </Button>
        </CardFooter>
      </Card>
    </motion.div>
  )
}

----
components/repo/repo-analysis-results.tsx
"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Loader2Icon, FolderIcon, FileIcon, ClockIcon, CodeIcon, LockIcon, GithubIcon } from "lucide-react"

interface RepoAnalysisResultsProps {
  owner: string
  repo: string
}

export default function RepoAnalysisResults({ owner, repo }: RepoAnalysisResultsProps) {
  const [analysis, setAnalysis] = useState<RepoAnalysisResult | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null)
  const [needsAuth, setNeedsAuth] = useState(false)
  const [rateLimit, setRateLimit] = useState<{ remaining: number; resetAt: string } | null>(null)

  const analyzeRepo = async () => {
    setIsLoading(true)
    setError(null)
    setNeedsAuth(false)

    try {
      const response = await fetch("/api/analyze-repo", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ owner, repo }),
      })

      // Check for rate limit headers
      const rateLimitLimit = response.headers.get("X-RateLimit-Limit")
      const rateLimitRemaining = response.headers.get("X-RateLimit-Remaining")
      const rateLimitReset = response.headers.get("X-RateLimit-Reset")

      if (rateLimitRemaining && rateLimitReset) {
        setRateLimit({
          remaining: Number.parseInt(rateLimitRemaining, 10),
          resetAt: new Date(Number.parseInt(rateLimitReset, 10) * 1000).toISOString(),
        })
      }

      if (!response.ok) {
        const errorData = await response.json()

        // Check if authentication is required
        if (response.status === 401 && errorData.error === "Authentication required") {
          setNeedsAuth(true)
          throw new Error("Authentication required to access this repository")
        }

        // Check if rate limit is exceeded
        if (response.status === 429) {
          throw new Error(`Rate limit exceeded. Please try again after ${new Date(errorData.resetAt).toLocaleString()}`)
        }

        throw new Error(errorData.message || "Failed to analyze repository")
      }

      const result = await response.json()
      setAnalysis(result.data)
      setIsAuthenticated(result.authenticated)
    } catch (err: any) {
      setError(err.message || "An error occurred while analyzing the repository")
      console.error("Error analyzing repo:", err)
    } finally {
      setIsLoading(false)
    }
  }

  // Helper function to format file size
  const formatSize = (bytes: number) => {
    if (bytes < 1024) return `${bytes} B`
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`
  }

  // Helper function to get top languages
  const getTopLanguages = () => {
    if (!analysis?.languages) return []

    return Object.entries(analysis.languages)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([lang, size]) => ({
        language: lang,
        size,
        percentage: ((size / getTotalSize()) * 100).toFixed(1),
      }))
  }

  const getTotalSize = () => {
    if (!analysis?.languages) return 0
    return Object.values(analysis.languages).reduce((sum, size) => sum + size, 0)
  }

  return (
    <Card className="bg-black/70 border-border/50">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <CodeIcon className="h-5 w-5 text-primary" />
          Repository Analysis
        </CardTitle>
      </CardHeader>
      <CardContent>
        {!analysis && !isLoading && (
          <div className="text-center py-8">
            <p className="text-muted-foreground mb-4">
              Analyze this repository to get detailed insights about its structure, languages, and content.
              {!isAuthenticated && isAuthenticated !== null && (
                <span className="block mt-2 text-sm">
                  You're using GitHub.GG as a guest.{" "}
                  <a href="/api/auth/login" className="text-primary hover:underline">
                    Sign in
                  </a>{" "}
                  for higher rate limits and access to private repositories.
                </span>
              )}
            </p>
            <Button onClick={analyzeRepo}>Analyze Repository</Button>
          </div>
        )}

        {isLoading && (
          <div className="text-center py-8">
            <Loader2Icon className="h-8 w-8 animate-spin mx-auto mb-4 text-primary" />
            <p className="text-muted-foreground">Analyzing repository structure...</p>
          </div>
        )}

        {needsAuth && (
          <div className="text-center py-8 bg-gray-900/50 rounded-lg border border-border/50">
            <LockIcon className="h-8 w-8 mx-auto mb-4 text-yellow-500" />
            <p className="text-lg font-medium mb-2">Private Repository</p>
            <p className="text-muted-foreground mb-6">
              This appears to be a private repository. Sign in with GitHub to access it.
            </p>
            <Button asChild>
              <a href="/api/auth/login" className="flex items-center gap-2">
                <GithubIcon className="h-4 w-4" />
                Sign in with GitHub
              </a>
            </Button>
          </div>
        )}

        {error && !needsAuth && (
          <div className="text-center py-8">
            <p className="text-red-400 mb-4">{error}</p>
            <Button onClick={analyzeRepo} variant="outline">
              Try Again
            </Button>
          </div>
        )}

        {analysis && (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50 flex flex-col items-center">
                <FileIcon className="h-8 w-8 text-blue-400 mb-2" />
                <span className="text-2xl font-bold">{analysis.fileCount}</span>
                <span className="text-sm text-muted-foreground">Files</span>
              </div>

              <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50 flex flex-col items-center">
                <FolderIcon className="h-8 w-8 text-yellow-400 mb-2" />
                <span className="text-2xl font-bold">{analysis.directoryCount}</span>
                <span className="text-sm text-muted-foreground">Directories</span>
              </div>

              <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50 flex flex-col items-center">
                <ClockIcon className="h-8 w-8 text-green-400 mb-2" />
                <span className="text-2xl font-bold">{(analysis.cloneTimeMs / 1000).toFixed(2)}s</span>
                <span className="text-sm text-muted-foreground">Clone Time</span>
              </div>
            </div>

            <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
              <h3 className="text-lg font-medium mb-3">Top Languages</h3>
              <div className="space-y-3">
                {getTopLanguages().map(({ language, size, percentage }) => (
                  <div key={language}>
                    <div className="flex justify-between text-sm mb-1">
                      <span>{language}</span>
                      <span>
                        {formatSize(size)} ({percentage}%)
                      </span>
                    </div>
                    <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
                      <div className="h-full bg-primary rounded-full" style={{ width: `${percentage}%` }}></div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {analysis.readme && (
              <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
                <h3 className="text-lg font-medium mb-3">README Preview</h3>
                <div className="max-h-[200px] overflow-y-auto text-sm text-muted-foreground">
                  {analysis.readme
                    .split("\n")
                    .slice(0, 10)
                    .map((line, i) => (
                      <p key={i}>{line}</p>
                    ))}
                  {analysis.readme.split("\n").length > 10 && <p className="text-primary mt-2">... (truncated)</p>}
                </div>
              </div>
            )}

            <div className="flex flex-col md:flex-row items-center justify-between gap-4 pt-4 border-t border-border/50">
              <div className="text-sm text-muted-foreground">
                {!isAuthenticated && (
                  <span>
                    Guest mode ‚Ä¢ {rateLimit ? `${rateLimit.remaining} requests remaining` : "Limited access"} ‚Ä¢{" "}
                    <a href="/api/auth/login" className="text-primary hover:underline">
                      Sign in for more
                    </a>
                  </span>
                )}
                {isAuthenticated && <span>Authenticated ‚Ä¢ Full access</span>}
              </div>
              <Button onClick={analyzeRepo} variant="outline" size="sm">
                Refresh Analysis
              </Button>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}

----
components/repo/repo-commit-detail.tsx
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { GitCommitIcon, UserIcon, CalendarIcon, FileIcon, PlusIcon, MinusIcon } from "lucide-react"

interface RepoCommitDetailProps {
  username: string
  reponame: string
  sha: string
  repoData: any
  commitData: any
}

export default function RepoCommitDetail({ username, reponame, sha, repoData, commitData }: RepoCommitDetailProps) {
  return (
    <div className="space-y-6">
      <div className="flex flex-col gap-4">
        <div className="flex items-center gap-2">
          <Link
            href={`/${username}/${reponame}`}
            className="text-sm text-muted-foreground hover:text-foreground transition-colors"
          >
            ‚Üê Back to repository
          </Link>
        </div>

        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
          <h1 className="text-xl font-bold">{commitData.message.split("\n")[0]}</h1>
          <div className="flex items-center gap-3">
            <Button variant="outline" size="sm">
              Browse Files
            </Button>
          </div>
        </div>

        <div className="flex items-center gap-x-4 gap-y-2 text-sm text-muted-foreground">
          <span className="flex items-center gap-1">
            <GitCommitIcon className="h-3.5 w-3.5" />
            Commit {sha.substring(0, 7)}
          </span>
          <span className="flex items-center gap-1">
            <UserIcon className="h-3.5 w-3.5" />
            {commitData.author.name}
          </span>
          <span className="flex items-center gap-1">
            <CalendarIcon className="h-3.5 w-3.5" />
            Committed on {new Date(commitData.author.date).toLocaleDateString()}
          </span>
        </div>
      </div>

      <Card className="bg-black/70 border-border/50">
        <CardHeader>
          <CardTitle className="text-lg">Commit Details</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
              <h3 className="font-medium mb-2">Commit Message</h3>
              <div className="whitespace-pre-wrap text-sm text-muted-foreground">{commitData.message}</div>
            </div>

            <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
              <h3 className="font-medium mb-2">AI Analysis</h3>
              <p className="text-sm text-muted-foreground">
                This commit appears to be making changes related to the repository's functionality. The commit was
                authored by {commitData.author.name} and includes modifications to several files. Based on the commit
                message, it seems to be addressing a specific feature or bug fix.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="bg-black/70 border-border/50">
        <CardHeader>
          <CardTitle className="text-lg">Changed Files</CardTitle>
        </CardHeader>
        <CardContent>
          {/* This would be populated with actual changed files in a real implementation */}
          <div className="space-y-4">
            <div className="border-b border-border/50 pb-4">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <FileIcon className="h-4 w-4 text-blue-400" />
                  <Link
                    href={`/${username}/${reponame}/blob/${sha}/src/index.ts`}
                    className="text-blue-400 hover:underline"
                  >
                    src/index.ts
                  </Link>
                </div>
                <div className="flex items-center gap-2 text-sm">
                  <span className="flex items-center gap-1 text-green-400">
                    <PlusIcon className="h-3.5 w-3.5" />
                    10
                  </span>
                  <span className="flex items-center gap-1 text-red-400">
                    <MinusIcon className="h-3.5 w-3.5" />5
                  </span>
                </div>
              </div>
              <div className="bg-gray-900/50 p-3 rounded-lg border border-border/50 text-xs font-mono whitespace-pre overflow-x-auto">
                {`@@ -1,5 +1,10 @@
// Mock diff patch`}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

----
components/repo/repo-compare.tsx
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { GitCommitIcon, UserIcon, CalendarIcon, FileIcon, PlusIcon, MinusIcon } from "lucide-react"

interface RepoCompareProps {
  username: string
  reponame: string
  base: string
  head: string
  repoData: any
  compareData: any
}

export default function RepoCompare({ username, reponame, base, head, repoData, compareData }: RepoCompareProps) {
  return (
    <div className="space-y-6">
      <div className="flex flex-col gap-4">
        <div className="flex items-center gap-2">
          <Link
            href={`/${username}/${reponame}`}
            className="text-sm text-muted-foreground hover:text-foreground transition-colors"
          >
            ‚Üê Back to repository
          </Link>
        </div>

        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
          <h1 className="text-xl font-bold">Comparing changes</h1>
          <div className="flex items-center gap-3">
            <Button variant="outline" size="sm">
              Create Pull Request
            </Button>
          </div>
        </div>

        <div className="flex items-center gap-2 text-sm">
          <span className="font-medium">Base:</span>
          <span className="bg-gray-800 px-2 py-1 rounded">{base}</span>
          <span className="mx-2">...</span>
          <span className="font-medium">Compare:</span>
          <span className="bg-gray-800 px-2 py-1 rounded">{head}</span>
        </div>
      </div>

      <Card className="bg-black/70 border-border/50">
        <CardHeader>
          <CardTitle className="text-lg">Commits</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {compareData.commits.map((commit: any, index: number) => (
              <div key={index} className="border-b border-border/50 pb-4 last:border-0 last:pb-0">
                <div className="flex items-start gap-3">
                  <div className="mt-1">
                    <GitCommitIcon className="h-5 w-5 text-blue-400" />
                  </div>
                  <div className="flex-1">
                    <Link
                      href={`/${username}/${reponame}/commit/${commit.sha}`}
                      className="font-medium hover:text-blue-400 transition-colors"
                    >
                      {commit.message.split("\n")[0]}
                    </Link>
                    <div className="flex flex-wrap items-center gap-x-4 gap-y-2 mt-1 text-sm text-muted-foreground">
                      <span className="flex items-center gap-1">
                        <UserIcon className="h-3.5 w-3.5" />
                        {commit.author.name}
                      </span>
                      <span className="flex items-center gap-1">
                        <CalendarIcon className="h-3.5 w-3.5" />
                        Committed on {new Date(commit.author.date).toLocaleDateString()}
                      </span>
                      <span>{commit.sha.substring(0, 7)}</span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      <Card className="bg-black/70 border-border/50">
        <CardHeader>
          <CardTitle className="text-lg">Files Changed</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {compareData.files.map((file: any, index: number) => (
              <div key={index} className="border-b border-border/50 pb-4 last:border-0 last:pb-0">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <FileIcon className="h-4 w-4 text-blue-400" />
                    <Link
                      href={`/${username}/${reponame}/blob/${head}/${file.filename}`}
                      className="text-blue-400 hover:underline"
                    >
                      {file.filename}
                    </Link>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <span className="flex items-center gap-1 text-green-400">
                      <PlusIcon className="h-3.5 w-3.5" />
                      {file.additions}
                    </span>
                    <span className="flex items-center gap-1 text-red-400">
                      <MinusIcon className="h-3.5 w-3.5" />
                      {file.deletions}
                    </span>
                  </div>
                </div>
                {file.patch && (
                  <div className="bg-gray-900/50 p-3 rounded-lg border border-border/50 text-xs font-mono whitespace-pre overflow-x-auto">
                    {file.patch}
                  </div>
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      <Card className="bg-black/70 border-border/50">
        <CardHeader>
          <CardTitle className="text-lg">AI Analysis</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
            <p className="text-sm text-muted-foreground">
              This comparison shows changes between {base} and {head}. There are {compareData.commits.length} commits
              with {compareData.files.length} files changed, including{" "}
              {compareData.files.reduce((sum: number, file: any) => sum + file.additions, 0)} additions and{" "}
              {compareData.files.reduce((sum: number, file: any) => sum + file.deletions, 0)} deletions. The changes
              appear to focus on {compareData.files[0]?.filename.split("/")[0] || "various"} components of the codebase.
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

----
components/repo/repo-file-tree.tsx
"use client"

import Link from "next/link"
import { FolderIcon, FileIcon } from "lucide-react"

interface RepoFileTreeProps {
  username: string
  reponame: string
  branch: string
  path: string
  repoData: any
  treeData: any[]
}

export default function RepoFileTree({ username, reponame, branch, path, repoData, treeData }: RepoFileTreeProps) {
  // Helper to build the path for navigation
  const buildPath = (itemPath: string, isFile = false) => {
    return `/${username}/${reponame}/${isFile ? "blob" : "tree"}/${branch}/${itemPath}`
  }

  return (
    <div className="space-y-3">
      {treeData.map((item) => (
        <div key={item.path} className="flex items-center gap-2">
          {item.type === "dir" ? (
            <>
              <FolderIcon className="h-4 w-4 text-blue-400" />
              <Link href={buildPath(item.path)} className="text-sm hover:text-blue-400 transition-colors">
                {item.name}
              </Link>
            </>
          ) : (
            <>
              <FileIcon className="h-4 w-4 text-gray-400" />
              <Link href={buildPath(item.path, true)} className="text-sm hover:text-blue-400 transition-colors">
                {item.name}
              </Link>
            </>
          )}
        </div>
      ))}
    </div>
  )
}

----
components/repo/repo-header.tsx
import Link from "next/link"
import { StarIcon, GitForkIcon, EyeIcon } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { CopyAllCodeButton } from "@/components/repo/copy-all-code-button"

interface RepoHeaderProps {
  username: string
  reponame: string
  repoData: any
}

export default function RepoHeader({ username, reponame, repoData }: RepoHeaderProps) {
  return (
    <div className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 py-4">
      <div className="container">
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
          <div>
            <div className="flex items-center gap-2 text-muted-foreground mb-2">
              <Link href={`/${username}/${reponame}`} className="text-lg font-semibold hover:underline" prefetch={true}>
                {reponame}
              </Link>
              <Badge variant="outline" className="ml-2">
                Public
              </Badge>
            </div>

            <p className="text-sm text-muted-foreground max-w-2xl">
              {repoData.description || "No description provided."}
            </p>
          </div>

          <div className="flex items-center gap-3">
            <CopyAllCodeButton 
              owner={username} 
              repo={reponame} 
              branch={repoData.default_branch}
              className="mr-2"
            />
            <div className="flex items-center gap-1 text-sm">
              <Button variant="outline" size="sm" className="gap-1">
                <StarIcon className="h-4 w-4" />
                Star
                <Badge variant="secondary" className="ml-1">
                  {repoData.stargazers_count.toLocaleString()}
                </Badge>
              </Button>
            </div>

            <div className="flex items-center gap-1 text-sm">
              <Button variant="outline" size="sm" className="gap-1">
                <GitForkIcon className="h-4 w-4" />
                Fork
                <Badge variant="secondary" className="ml-1">
                  {repoData.forks_count.toLocaleString()}
                </Badge>
              </Button>
            </div>

            <div className="flex items-center gap-1 text-sm">
              <Button variant="outline" size="sm" className="gap-1">
                <EyeIcon className="h-4 w-4" />
                Watch
                <Badge variant="secondary" className="ml-1">
                  {repoData.watchers_count.toLocaleString()}
                </Badge>
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

----
components/repo/repo-issue-detail.tsx
import Link from "next/link"
import Image from "next/image"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { MessageCircleIcon, ClockIcon } from "lucide-react"

interface RepoIssueDetailProps {
  username: string
  reponame: string
  issueId: string
  repoData: any
  issueData: any
}

export default function RepoIssueDetail({ username, reponame, issueId, repoData, issueData }: RepoIssueDetailProps) {
  return (
    <div className="space-y-6">
      <div className="flex flex-col gap-4">
        <div className="flex items-center gap-2">
          <Link
            href={`/${username}/${reponame}/issues`}
            className="text-sm text-muted-foreground hover:text-foreground transition-colors"
          >
            ‚Üê Back to issues
          </Link>
        </div>

        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
          <h1 className="text-2xl font-bold flex items-center gap-3">
            <span>{issueData.title}</span>
            <span className="text-muted-foreground">#{issueId}</span>
          </h1>
          <div className="flex items-center gap-3">
            <Badge
              variant="outline"
              className={`${
                issueData.state === "open"
                  ? "bg-green-500/10 text-green-400 border-green-500/30"
                  : "bg-purple-500/10 text-purple-400 border-purple-500/30"
              }`}
            >
              {issueData.state === "open" ? "Open" : "Closed"}
            </Badge>
            <Button variant="outline">Edit</Button>
          </div>
        </div>

        <div className="flex items-center gap-x-4 gap-y-2 text-sm text-muted-foreground">
          <span className="flex items-center gap-1">
            <ClockIcon className="h-3.5 w-3.5" />
            Opened {new Date(issueData.created_at).toLocaleDateString()}
          </span>
          <span className="flex items-center gap-1">
            <MessageCircleIcon className="h-3.5 w-3.5" />
            {issueData.comments} comments
          </span>
          <span>
            by{" "}
            <Link href={`/${issueData.user.login}`} className="hover:text-blue-400 transition-colors">
              {issueData.user.login}
            </Link>
          </span>
        </div>
      </div>

      <Card className="bg-black/70 border-border/50">
        <CardContent className="pt-6">
          <div className="flex gap-4">
            <div className="flex-shrink-0">
              <div className="relative w-10 h-10 rounded-full overflow-hidden">
                <Image
                  src={issueData.user.avatar_url || "/placeholder.svg"}
                  alt={issueData.user.login}
                  fill
                  className="object-cover"
                />
              </div>
            </div>
            <div className="flex-1">
              <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
                <div className="prose prose-invert max-w-none">
                  <p>{issueData.body}</p>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="bg-black/70 border-border/50">
        <CardHeader>
          <CardTitle className="text-lg">AI Analysis</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
            <p className="text-sm text-muted-foreground">
              This issue appears to be discussing a feature request or bug report related to the repository. Based on
              the content, it seems to be {issueData.state === "open" ? "still under discussion" : "resolved"}. The
              issue was opened by {issueData.user.login} and has received {issueData.comments} comments.
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Comments section would go here in a real implementation */}
      <Card className="bg-black/70 border-border/50">
        <CardHeader>
          <CardTitle className="text-lg">Add a comment</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50 h-32 flex items-center justify-center">
            <span className="text-muted-foreground">Comment form would go here</span>
          </div>
          <div className="mt-4 flex justify-end">
            <Button>Comment</Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

----
components/repo/repo-issues-list.tsx
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { CircleIcon, MessageCircleIcon, ClockIcon } from "lucide-react"

interface RepoIssuesListProps {
  username: string
  reponame: string
  repoData: any
  issuesData: any[]
  currentPage: number
  currentState: "open" | "closed" | "all"
}

export default function RepoIssuesList({
  username,
  reponame,
  repoData,
  issuesData,
  currentPage,
  currentState,
}: RepoIssuesListProps) {
  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
        <h1 className="text-2xl font-bold">Issues</h1>
        <div className="flex items-center gap-3">
          <Button>New Issue</Button>
        </div>
      </div>

      <Tabs defaultValue={currentState} className="w-full">
        <TabsList className="grid grid-cols-3 w-full max-w-md">
          <TabsTrigger value="open" asChild>
            <Link href={`/${username}/${reponame}/issues?state=open`}>
              <CircleIcon className="h-4 w-4 mr-2" />
              Open
            </Link>
          </TabsTrigger>
          <TabsTrigger value="closed" asChild>
            <Link href={`/${username}/${reponame}/issues?state=closed`}>
              <CircleIcon className="h-4 w-4 mr-2" />
              Closed
            </Link>
          </TabsTrigger>
          <TabsTrigger value="all" asChild>
            <Link href={`/${username}/${reponame}/issues?state=all`}>All</Link>
          </TabsTrigger>
        </TabsList>

        <TabsContent value={currentState} className="mt-6">
          <Card className="bg-black/70 border-border/50">
            <CardHeader>
              <CardTitle className="text-lg">
                {currentState === "open" ? "Open" : currentState === "closed" ? "Closed" : "All"} Issues
              </CardTitle>
            </CardHeader>
            <CardContent>
              {issuesData.length > 0 ? (
                <div className="space-y-4">
                  {issuesData.map((issue) => (
                    <div key={issue.number} className="border-b border-border/50 pb-4 last:border-0 last:pb-0">
                      <div className="flex items-start gap-3">
                        <div className="mt-1">
                          <CircleIcon
                            className={`h-5 w-5 ${issue.state === "open" ? "text-green-500" : "text-purple-500"}`}
                          />
                        </div>
                        <div className="flex-1">
                          <Link
                            href={`/${username}/${reponame}/issues/${issue.number}`}
                            className="text-lg font-medium hover:text-blue-400 transition-colors"
                          >
                            {issue.title}
                          </Link>
                          <div className="flex flex-wrap items-center gap-x-4 gap-y-2 mt-1 text-sm text-muted-foreground">
                            <span>#{issue.number}</span>
                            <span className="flex items-center gap-1">
                              <ClockIcon className="h-3.5 w-3.5" />
                              Opened {new Date(issue.created_at).toLocaleDateString()}
                            </span>
                            <span className="flex items-center gap-1">
                              <MessageCircleIcon className="h-3.5 w-3.5" />
                              {issue.comments} comments
                            </span>
                            <span>
                              by{" "}
                              <Link href={`/${issue.user.login}`} className="hover:text-blue-400 transition-colors">
                                {issue.user.login}
                              </Link>
                            </span>
                          </div>
                        </div>
                        {issue.state === "closed" && (
                          <Badge variant="outline" className="bg-purple-500/10 text-purple-400 border-purple-500/30">
                            Closed
                          </Badge>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-muted-foreground">
                  No {currentState === "all" ? "" : currentState} issues found
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Pagination */}
      {issuesData.length > 0 && (
        <div className="flex justify-center mt-6">
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" disabled={currentPage <= 1} asChild={currentPage > 1}>
              {currentPage > 1 ? (
                <Link href={`/${username}/${reponame}/issues?page=${currentPage - 1}&state=${currentState}`}>
                  Previous
                </Link>
              ) : (
                "Previous"
              )}
            </Button>
            <span className="text-sm">Page {currentPage}</span>
            <Button variant="outline" size="sm" asChild>
              <Link href={`/${username}/${reponame}/issues?page=${currentPage + 1}&state=${currentState}`}>Next</Link>
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}

----
components/repo/repo-navigation.tsx
"use client"

import Link from "next/link"
import { usePathname } from "next/navigation"
import {
  CircleIcon,
  GitPullRequestIcon,
  PlayIcon,
  ShieldIcon,
  GitGraphIcon as GraphIcon,
  GemIcon as GearIcon,
  SigmaIcon,
  GitBranchIcon,
} from "lucide-react"

interface RepoNavigationProps {
  username: string
  reponame: string
  repoData: any
}

export default function RepoNavigation({ username, reponame, repoData }: RepoNavigationProps) {
  const pathname = usePathname()
  const basePath = `/${username}/${reponame}`
  const sigmaPath = `${basePath}/sigma`

  const isActive = (path: string) => {
    if (path === sigmaPath) {
      return (
        pathname === basePath ||
        pathname === sigmaPath ||
        pathname.startsWith(`${basePath}/tree`) ||
        pathname.startsWith(`${basePath}/blob`)
      )
    }
    return pathname.startsWith(path)
  }

  const navItems = [
    {
      name: "Code",
      path: sigmaPath,
      icon: <SigmaIcon className="h-4 w-4" />,
    },
    {
      name: "Diagram",
      path: `${basePath}/diagram`,
      icon: <GitBranchIcon className="h-4 w-4" />,
    },
    {
      name: "Issues",
      path: `${basePath}/issues`,
      icon: <CircleIcon className="h-4 w-4" />,
    },
    {
      name: "Pull Requests",
      path: `${basePath}/pulls`,
      icon: <GitPullRequestIcon className="h-4 w-4" />,
    },
    {
      name: "Actions",
      path: `${basePath}/actions`,
      icon: <PlayIcon className="h-4 w-4" />,
    },
    {
      name: "Security",
      path: `${basePath}/security`,
      icon: <ShieldIcon className="h-4 w-4" />,
    },
    {
      name: "Insights",
      path: `${basePath}/insights`,
      icon: <GraphIcon className="h-4 w-4" />,
    },
    {
      name: "Settings",
      path: `${basePath}/settings`,
      icon: <GearIcon className="h-4 w-4" />,
    },
  ]

  return (
    <nav className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container">
        <div className="flex items-center overflow-x-auto">
          {navItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`flex items-center gap-2 px-3 py-3 text-sm font-medium border-b-2 ${
                isActive(item.path)
                  ? "border-primary text-foreground"
                  : "border-transparent text-muted-foreground hover:text-foreground hover:border-border transition-colors"
              }`}
              prefetch={true}
            >
              {item.icon}
              {item.name}
            </Link>
          ))}
        </div>
      </div>
    </nav>
  )
}

----
components/repo/repo-structure-diagram.tsx
"use client"

import { useEffect, useRef, useState } from "react"
import mermaid from "mermaid"
import {
  Loader2Icon,
  RefreshCwIcon,
  ZoomInIcon,
  ZoomOutIcon,
  MaximizeIcon,
  MinimizeIcon,
  FileIcon,
  AlertTriangleIcon,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Slider } from "@/components/ui/slider"
import { getAllRepoFiles } from "@/lib/github"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

interface FileNode {
  name: string
  path: string
  type: string
  size?: number
  children?: FileNode[]
}

interface RepoStructureDiagramProps {
  files: any[]
  owner: string
  repo: string
  branch: string
}

export default function RepoStructureDiagram({ files: initialFiles, owner, repo, branch }: RepoStructureDiagramProps) {
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [diagramType, setDiagramType] = useState<"flowchart" | "classDiagram" | "mindmap">("flowchart")
  const [fileTree, setFileTree] = useState<FileNode[]>([])
  const [files, setFiles] = useState<any[]>(initialFiles)
  const [branchName, setBranchName] = useState(branch)
  const mermaidRef = useRef<HTMLDivElement>(null)
  const containerRef = useRef<HTMLDivElement>(null)
  const [retryCount, setRetryCount] = useState(0)
  const [zoomLevel, setZoomLevel] = useState(100)
  const [theme, setTheme] = useState<"default" | "forest" | "dark" | "neutral">("dark")
  const [isFullscreen, setIsFullscreen] = useState(false)
  const [renderError, setRenderError] = useState<string | null>(null)
  const [mermaidCode, setMermaidCode] = useState<string>("")

  // Initialize mermaid
  useEffect(() => {
    try {
      mermaid.initialize({
        startOnLoad: true,
        theme: theme,
        securityLevel: "loose",
        flowchart: {
          useMaxWidth: true,
          htmlLabels: true,
          curve: "basis",
        },
        // Better error handling
        logLevel: 3, // Error level logs only
        errorOutputType: 3, // Error and warning messages
      })
    } catch (err) {
      console.error("Error initializing mermaid:", err)
    }
  }, [theme])

  // Fetch files if not provided
  useEffect(() => {
    async function fetchFiles() {
      if (initialFiles && initialFiles.length > 0) {
        setFiles(initialFiles)
        return
      }

      setIsLoading(true)
      setError(null)

      try {
        const { files: fetchedFiles, branch: fetchedBranch } = await getAllRepoFiles(owner, repo, branchName)
        setBranchName(fetchedBranch)
        setFiles(fetchedFiles)
      } catch (err) {
        console.error("Error fetching repo files:", err)
        setError("Failed to fetch repository files. Please try again.")
      } finally {
        // Don't set loading to false here, we'll do it after building the tree
      }
    }

    fetchFiles()
  }, [owner, repo, branchName, initialFiles, retryCount])

  // Build file tree from flat files array
  useEffect(() => {
    if (!files || files.length === 0) {
      if (!isLoading && !error) {
        setError("No files found in this repository.")
      }
      return
    }

    try {
      const tree: FileNode[] = []
      const map: Record<string, FileNode> = {}

      // First pass: create all nodes
      files.forEach((file) => {
        const pathParts = file.path.split("/")
        const fileName = pathParts.pop() || ""

        // Create node for this file
        const node: FileNode = {
          name: fileName,
          path: file.path,
          type: file.type || "file",
          size: file.size,
          children: [],
        }

        map[file.path] = node

        // If this is a top-level file, add it to the tree
        if (pathParts.length === 0) {
          tree.push(node)
        }
      })

      // Second pass: build the tree structure
      files.forEach((file) => {
        const pathParts = file.path.split("/")
        if (pathParts.length <= 1) return // Skip top-level files

        const fileName = pathParts.pop() || ""
        const parentPath = pathParts.join("/")

        // Find or create parent directory nodes
        let currentPath = ""
        let parentNode: FileNode | undefined

        for (const part of pathParts) {
          const prevPath = currentPath
          currentPath = currentPath ? `${currentPath}/${part}` : part

          if (!map[currentPath]) {
            // Create directory node if it doesn't exist
            const dirNode: FileNode = {
              name: part,
              path: currentPath,
              type: "directory",
              children: [],
            }
            map[currentPath] = dirNode

            // Add to parent or tree
            if (prevPath) {
              map[prevPath].children?.push(dirNode)
            } else {
              tree.push(dirNode)
            }
          }

          parentNode = map[currentPath]
        }

        // Add this file to its parent
        if (parentNode && parentNode.children) {
          const fileNode = map[file.path]
          if (fileNode && !parentNode.children.includes(fileNode)) {
            parentNode.children.push(fileNode)
          }
        }
      })

      // Sort the tree
      const sortTree = (nodes: FileNode[]) => {
        nodes.sort((a, b) => {
          // Directories first
          if (a.type === "directory" && b.type !== "directory") return -1
          if (a.type !== "directory" && b.type === "directory") return 1
          // Then alphabetically
          return a.name.localeCompare(b.name)
        })

        // Sort children recursively
        nodes.forEach((node) => {
          if (node.children && node.children.length > 0) {
            sortTree(node.children)
          }
        })
      }

      sortTree(tree)
      setFileTree(tree)
      setIsLoading(false)
    } catch (err) {
      console.error("Error building file tree:", err)
      setError("Failed to build repository structure")
      setIsLoading(false)
    }
  }, [files, isLoading, error])

  // Generate mermaid code based on diagram type
  useEffect(() => {
    if (isLoading || !fileTree.length) return

    try {
      let code = ""

      if (diagramType === "flowchart") {
        code = generateFlowchartDiagram(fileTree, owner, repo)
      } else if (diagramType === "classDiagram") {
        code = generateClassDiagram(fileTree, owner, repo)
      } else if (diagramType === "mindmap") {
        code = generateMindmapDiagram(fileTree, owner, repo)
      }

      setMermaidCode(code)
      setRenderError(null)
    } catch (err) {
      console.error("Error generating mermaid diagram:", err)
      setRenderError("Failed to generate diagram code")
    }
  }, [fileTree, diagramType, isLoading, owner, repo])

  // Render mermaid diagram
  useEffect(() => {
    if (!mermaidCode || !mermaidRef.current) return

    // Reset any previous content
    mermaidRef.current.innerHTML = mermaidCode

    // Add a small delay before rendering to ensure DOM is ready
    const timeoutId = setTimeout(() => {
      try {
        mermaid.contentLoaded()
      } catch (err) {
        console.error("Error rendering mermaid diagram:", err)
        // Don't set error state here, as it might be a temporary issue
        // Instead, we'll show the mermaid error directly from its output
      }
    }, 100)

    return () => clearTimeout(timeoutId)
  }, [mermaidCode])

  // Apply zoom level
  useEffect(() => {
    if (mermaidRef.current) {
      const svgElement = mermaidRef.current.querySelector("svg")
      if (svgElement) {
        svgElement.style.transform = `scale(${zoomLevel / 100})`
        svgElement.style.transformOrigin = "top left"
      }
    }
  }, [zoomLevel, diagramType])

  // Handle fullscreen mode
  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement)
    }

    document.addEventListener("fullscreenchange", handleFullscreenChange)
    return () => {
      document.removeEventListener("fullscreenchange", handleFullscreenChange)
    }
  }, [])

  const toggleFullscreen = () => {
    if (!isFullscreen) {
      containerRef.current?.requestFullscreen().catch((err) => {
        console.error(`Error attempting to enable fullscreen: ${err.message}`)
      })
    } else {
      document.exitFullscreen().catch((err) => {
        console.error(`Error attempting to exit fullscreen: ${err.message}`)
      })
    }
  }

  // Generate flowchart diagram
  const generateFlowchartDiagram = (tree: FileNode[], owner: string, repo: string): string => {
    // Limit the tree size for large repositories
    const limitedTree = limitTreeSize(tree, 100)

    let code = "flowchart TD\n"

    // Add styles
    code += "    %% Styles\n"

    // Updated color scheme for better visibility on dark background
    if (theme === "dark") {
      code += "    classDef directory fill:#4B0082,stroke:#9061f9,stroke-width:1px,color:#ffffff\n"
      code += "    classDef javascript fill:#8B8000,stroke:#eab308,stroke-width:1px,color:#ffffff\n"
      code += "    classDef typescript fill:#00008B,stroke:#3b82f6,stroke-width:1px,color:#ffffff\n"
      code += "    classDef react fill:#006400,stroke:#22c55e,stroke-width:1px,color:#ffffff\n"
      code += "    classDef config fill:#8B0000,stroke:#ef4444,stroke-width:1px,color:#ffffff\n"
      code += "    classDef markdown fill:#4B0082,stroke:#a855f7,stroke-width:1px,color:#ffffff\n"
      code += "    classDef json fill:#8B8000,stroke:#ca8a04,stroke-width:1px,color:#ffffff\n"
      code += "    classDef css fill:#00008B,stroke:#0ea5e9,stroke-width:1px,color:#ffffff\n"
      code += "    classDef html fill:#8B4513,stroke:#f97316,stroke-width:1px,color:#ffffff\n"
      code += "    classDef image fill:#006400,stroke:#10b981,stroke-width:1px,color:#ffffff\n"
      code += "    classDef default fill:#2F4F4F,stroke:#6b7280,stroke-width:1px,color:#ffffff\n\n"
    } else {
      code += "    classDef directory fill:#f9f0ff,stroke:#9061f9,stroke-width:1px\n"
      code += "    classDef javascript fill:#fff3c4,stroke:#eab308,stroke-width:1px\n"
      code += "    classDef typescript fill:#dbeafe,stroke:#3b82f6,stroke-width:1px\n"
      code += "    classDef react fill:#dcfce7,stroke:#22c55e,stroke-width:1px\n"
      code += "    classDef config fill:#fee2e2,stroke:#ef4444,stroke-width:1px\n"
      code += "    classDef markdown fill:#f3e8ff,stroke:#a855f7,stroke-width:1px\n"
      code += "    classDef json fill:#fef9c3,stroke:#ca8a04,stroke-width:1px\n"
      code += "    classDef css fill:#dbeafe,stroke:#0ea5e9,stroke-width:1px\n"
      code += "    classDef html fill:#ffedd5,stroke:#f97316,stroke-width:1px\n"
      code += "    classDef image fill:#d1fae5,stroke:#10b981,stroke-width:1px\n"
      code += "    classDef default fill:#f3f4f6,stroke:#6b7280,stroke-width:1px\n\n"
    }

    // Process nodes recursively
    const processNode = (node: FileNode, parentId: string | null = null, depth = 0): void => {
      // Create safe ID for mermaid
      const nodeId = `node_${node.path.replace(/[^a-zA-Z0-9]/g, "_")}`

      // Add node with proper label - escape node names with quotes
      code += `    ${nodeId}["${sanitizeMermaid(node.name)}"]\n`

      // Add class based on node type and file extension
      if (node.type === "directory") {
        code += `    class ${nodeId} directory\n`
      } else {
        const extension = node.name.split(".").pop()?.toLowerCase() || ""
        if (["js", "jsx"].includes(extension)) {
          code += `    class ${nodeId} javascript\n`
        } else if (["ts", "tsx"].includes(extension)) {
          code += `    class ${nodeId} typescript\n`
        } else if (["md", "mdx"].includes(extension)) {
          code += `    class ${nodeId} markdown\n`
        } else if (extension === "json") {
          code += `    class ${nodeId} json\n`
        } else if (["css", "scss", "less"].includes(extension)) {
          code += `    class ${nodeId} css\n`
        } else if (extension === "html") {
          code += `    class ${nodeId} html\n`
        } else if (["jpg", "jpeg", "png", "gif", "svg", "webp"].includes(extension)) {
          code += `    class ${nodeId} image\n`
        } else if (["config", "env", "yml", "yaml", "toml"].includes(extension)) {
          code += `    class ${nodeId} config\n`
        }
      }

      // Add click event
      code += `    click ${nodeId} "/${owner}/${repo}/tree/${branchName}/${node.path}"\n`

      // Connect to parent
      if (parentId) {
        code += `    ${parentId} --> ${nodeId}\n`
      }

      // Process children
      if (node.children && node.children.length > 0) {
        // Limit children to prevent diagram from becoming too large
        const maxChildren = depth === 0 ? 10 : 5
        const visibleChildren = node.children.slice(0, maxChildren)

        visibleChildren.forEach((child) => {
          processNode(child, nodeId, depth + 1)
        })

        // Add indicator for hidden children
        if (node.children.length > maxChildren) {
          const hiddenCount = node.children.length - maxChildren
          const hiddenId = `${nodeId}_more`
          code += `    ${hiddenId}["... ${hiddenCount} more items"]\n`
          code += `    ${nodeId} --> ${hiddenId}\n`
          code += `    class ${hiddenId} default\n`
        }
      }
    }

    // Process top-level nodes
    const rootNodes = limitedTree.slice(0, 8) // Limit to 8 top-level nodes
    rootNodes.forEach((node) => {
      processNode(node)
    })

    // Add indicator for hidden top-level nodes
    if (limitedTree.length > 8) {
      const hiddenCount = limitedTree.length - 8
      const hiddenId = "node_more_root"
      code += `    ${hiddenId}["... ${hiddenCount} more items"]\n`
      code += `    class ${hiddenId} default\n`
    }

    return code
  }

  // Generate class diagram
  const generateClassDiagram = (tree: FileNode[], owner: string, repo: string): string => {
    // Limit the tree size for large repositories
    const limitedTree = limitTreeSize(tree, 50)

    let code = "classDiagram\n"

    // Process nodes recursively
    const processNode = (node: FileNode, parentId: string | null = null, depth = 0): void => {
      if (depth > 2) return // Limit depth to prevent diagram from becoming too complex

      // Create safe ID for mermaid
      const nodeId = `Class_${node.path.replace(/[^a-zA-Z0-9]/g, "_")}`

      // Add class with proper label
      code += `    class ${nodeId} {\n`
      code += `        ${sanitizeMermaid(node.name)}\n`

      if (node.type === "file" && node.size) {
        code += `        size: ${formatBytes(node.size)}\n`
      }

      code += `    }\n`

      // Add link
      code += `    link ${nodeId} "/${owner}/${repo}/tree/${branchName}/${node.path}"\n`

      // Connect to parent
      if (parentId) {
        code += `    ${parentId} <|-- ${nodeId}\n`
      }

      // Process children
      if (node.children && node.children.length > 0) {
        // Limit children to prevent diagram from becoming too large
        const maxChildren = 5
        const visibleChildren = node.children.slice(0, maxChildren)

        visibleChildren.forEach((child) => {
          processNode(child, nodeId, depth + 1)
        })
      }
    }

    // Process top-level nodes
    const rootNodes = limitedTree.slice(0, 5) // Limit to 5 top-level nodes
    rootNodes.forEach((node) => {
      processNode(node)
    })

    return code
  }

  // Generate mindmap diagram - fixed version with better error handling
  const generateMindmapDiagram = (tree: FileNode[], owner: string, repo: string): string => {
    // For mind maps, we need to be very careful with the structure
    // and make sure we don't use any characters that might break the syntax

    // Limit the tree size for large repositories - mind maps need to be smaller
    const limitedTree = limitTreeSize(tree, 30)

    let code = "mindmap\n"
    code += `  root((${sanitizeMermaid(repo)}))\n`

    // Safety check - make sure we have files to display
    if (limitedTree.length === 0) {
      code += `    No files\n`
      return code
    }

    // Process nodes recursively - with strict error checking
    const processNode = (node: FileNode, parentIndent: string, depth = 0): void => {
      if (depth > 2) return // Limit depth even more for mind maps

      // More restrictive for mind maps - shorter names and simpler structure
      const indent = parentIndent + "  "

      // For mind maps, we need to be extra careful with special characters
      const safeName = sanitizeMermaid(node.name).substring(0, 30) // Limit length

      // Mind maps use different node shapes - keep it simple
      const nodeSymbol = node.type === "directory" ? "]" : ")"

      // Add node with proper label - mind maps are more sensitive to syntax
      code += `${indent}${safeName}${nodeSymbol}\n`

      // Process children - but with much stricter limits
      if (node.children && node.children.length > 0 && depth < 2) {
        // Much stricter limits for mind maps
        const maxChildren = depth === 0 ? 3 : 2
        const visibleChildren = node.children
          .filter((child) => !containsSpecialChars(child.name)) // Filter out problematic names
          .slice(0, maxChildren)

        visibleChildren.forEach((child) => {
          processNode(child, indent, depth + 1)
        })

        // Add indicator for hidden children
        if (node.children.length > maxChildren) {
          const hiddenCount = node.children.length - maxChildren
          code += `${indent}  more items(${hiddenCount})\n`
        }
      }
    }

    try {
      // For mind maps, we'll just use top directories to keep it simple
      const topDirs = limitedTree.filter((node) => node.type === "directory").slice(0, 3) // Very limited for mind maps

      if (topDirs.length === 0) {
        // If no directories, show some files instead
        const topFiles = limitedTree.slice(0, 3)
        topFiles.forEach((node) => {
          const safeName = sanitizeMermaid(node.name).substring(0, 30)
          code += `  ${safeName}[\n`
        })
      } else {
        // Process top directories
        topDirs.forEach((node) => {
          const safeName = sanitizeMermaid(node.name).substring(0, 30)
          code += `  ${safeName}[\n`

          // Process immediate children with strict limits
          if (node.children) {
            const visibleChildren = node.children.filter((child) => !containsSpecialChars(child.name)).slice(0, 3)

            visibleChildren.forEach((child) => {
              const childName = sanitizeMermaid(child.name).substring(0, 25)
              const childSymbol = child.type === "directory" ? "]" : ")"
              code += `    ${childName}${childSymbol}\n`
            })

            if (node.children.length > 3) {
              code += `    more items(${node.children.length - 3})\n`
            }
          }
        })
      }

      // If more top-level items exist, note them
      if (limitedTree.length > 3) {
        code += `  more items(${limitedTree.length - 3})\n`
      }
    } catch (err) {
      // If any error occurs, fall back to a very simple mind map
      console.error("Error generating mind map:", err)
      code = "mindmap\n"
      code += `  root((${sanitizeMermaid(repo)}))\n`
      code += `  Files and Directories\n`
      code += `    Too complex to render\n`
      code += `    Try Flowchart view\n`
    }

    return code
  }

  // Utility to check for special characters that break mind maps
  const containsSpecialChars = (str: string): boolean => {
    const problematicChars = /[()[\]{}:;,]/
    return problematicChars.test(str)
  }

  // Utility to sanitize strings for mermaid syntax
  const sanitizeMermaid = (str: string): string => {
    // Replace characters that can break mermaid syntax
    return str.replace(/["]/g, "'").replace(/[<>]/g, "").replace(/[\\]/g, "/")
  }

  // Helper function to limit tree size for large repositories
  const limitTreeSize = (tree: FileNode[], maxNodes: number): FileNode[] => {
    // If tree is already small enough, return it as is
    let totalNodes = countNodes(tree)
    if (totalNodes <= maxNodes) return tree

    // Otherwise, limit the tree
    const result = [...tree]

    // First, remove deep nested structures
    const pruneDepth = (nodes: FileNode[], maxDepth: number, currentDepth = 0): void => {
      if (currentDepth >= maxDepth) {
        nodes.forEach((node) => {
          node.children = []
        })
        return
      }

      nodes.forEach((node) => {
        if (node.children && node.children.length > 0) {
          pruneDepth(node.children, maxDepth, currentDepth + 1)
        }
      })
    }

    // Start with a reasonable depth
    const maxDepth = 3
    pruneDepth(result, maxDepth)

    // If still too large, reduce breadth
    totalNodes = countNodes(result)
    if (totalNodes > maxNodes) {
      const limitBreadth = (nodes: FileNode[], maxChildren: number): void => {
        if (nodes.length > maxChildren) {
          nodes.splice(maxChildren)
        }

        nodes.forEach((node) => {
          if (node.children && node.children.length > 0) {
            limitBreadth(node.children, maxChildren)
          }
        })
      }

      limitBreadth(result, 5)
    }

    return result
  }

  // Helper function to count total nodes in a tree
  const countNodes = (tree: FileNode[]): number => {
    let count = tree.length

    tree.forEach((node) => {
      if (node.children && node.children.length > 0) {
        count += countNodes(node.children)
      }
    })

    return count
  }

  // Helper function to format bytes
  const formatBytes = (bytes: number): string => {
    if (bytes === 0) return "0 Bytes"
    const k = 1024
    const sizes = ["Bytes", "KB", "MB", "GB"]
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
  }

  // Refresh diagram
  const refreshDiagram = () => {
    setIsLoading(true)
    setRenderError(null)
    setRetryCount((prev) => prev + 1)
  }

  // Handle diagram type change
  const handleDiagramTypeChange = (value: string) => {
    setRenderError(null)
    setDiagramType(value as "flowchart" | "classDiagram" | "mindmap")
    // No need to call refreshDiagram() as the useEffect will handle the update
  }

  // Handle theme change
  const handleThemeChange = (value: "default" | "forest" | "dark" | "neutral") => {
    setTheme(value)
    // The useEffect will handle the update
  }

  // Fix errors in mind map
  const fixMindMapErrors = () => {
    // For mind maps, we'll create a simplified version that's less likely to break
    setIsLoading(true)

    // Create a very simple tree with only top-level directories
    const simplifiedTree = fileTree
      .filter((node) => node.type === "directory")
      .slice(0, 5)
      .map((node) => ({
        ...node,
        name: node.name.replace(/[^a-zA-Z0-9\s-]/g, ""), // Remove special characters
        children: [],
      }))

    setFileTree(simplifiedTree)
    setTimeout(() => {
      setIsLoading(false)
    }, 100)
  }

  // Show simplified diagram for large repositories
  const showSimplifiedDiagram = () => {
    // Create a simplified tree with just top-level directories
    const simplified = fileTree
      .filter((node) => node.type === "directory")
      .slice(0, 10)
      .map((node) => ({
        ...node,
        children: node.children
          ? node.children
              .filter((child) => child.type === "directory")
              .slice(0, 5)
              .map((child) => ({ ...child, children: [] }))
          : [],
      }))

    setFileTree(simplified)
  }

  // Detect mermaid rendering errors
  useEffect(() => {
    if (mermaidRef.current) {
      // Check if there's an error displayed by mermaid
      const errorElement = mermaidRef.current.querySelector(".error-icon, .error-text")

      // Check for syntax error text nodes using proper DOM methods
      let hasErrorText = false
      const textElements = mermaidRef.current.querySelectorAll("text")
      textElements.forEach((textEl) => {
        if (textEl.textContent && textEl.textContent.includes("Syntax error")) {
          hasErrorText = true
        }
      })

      if (errorElement || hasErrorText) {
        setRenderError("There was an error rendering the diagram.")
      }
    }
  }, [mermaidCode])

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Mermaid Diagram</CardTitle>
        </CardHeader>
        <CardContent className="flex items-center justify-center py-12">
          <Loader2Icon className="h-8 w-8 animate-spin mr-3" />
          <span>Generating Mermaid diagram...</span>
        </CardContent>
      </Card>
    )
  }

  if (error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Mermaid Diagram</CardTitle>
        </CardHeader>
        <CardContent className="text-center py-8">
          <p className="text-red-500 font-medium">{error}</p>
          <div className="flex justify-center gap-4 mt-4">
            <Button variant="outline" onClick={refreshDiagram}>
              <RefreshCwIcon className="h-4 w-4 mr-2" />
              Try Again
            </Button>
            {fileTree.length > 0 && (
              <Button variant="outline" onClick={showSimplifiedDiagram}>
                <FileIcon className="h-4 w-4 mr-2" />
                Show Simplified Diagram
              </Button>
            )}
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className={isFullscreen ? "fixed inset-0 z-50 rounded-none" : ""}>
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle>Mermaid Diagram</CardTitle>
        <div className="flex items-center gap-2">
          <Tabs value={diagramType} onValueChange={handleDiagramTypeChange}>
            <TabsList>
              <TabsTrigger value="flowchart">Flowchart</TabsTrigger>
              <TabsTrigger value="classDiagram">Class Diagram</TabsTrigger>
              <TabsTrigger value="mindmap">Mind Map</TabsTrigger>
            </TabsList>
          </Tabs>
          <Tabs value={theme} onValueChange={(value) => handleThemeChange(value as any)}>
            <TabsList>
              <TabsTrigger value="dark">Dark</TabsTrigger>
              <TabsTrigger value="default">Light</TabsTrigger>
              <TabsTrigger value="forest">Forest</TabsTrigger>
              <TabsTrigger value="neutral">Neutral</TabsTrigger>
            </TabsList>
          </Tabs>
        </div>
      </CardHeader>
      <CardContent>
        {renderError && (
          <Alert variant="destructive" className="mb-4">
            <AlertTriangleIcon className="h-4 w-4" />
            <AlertTitle>Error rendering diagram</AlertTitle>
            <AlertDescription>
              {renderError}
              {diagramType === "mindmap" && (
                <Button variant="outline" size="sm" onClick={fixMindMapErrors} className="ml-4">
                  Fix Mind Map
                </Button>
              )}
            </AlertDescription>
          </Alert>
        )}

        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setZoomLevel(Math.max(50, zoomLevel - 10))}
              disabled={zoomLevel <= 50}
            >
              <ZoomOutIcon className="h-4 w-4" />
            </Button>
            <div className="w-32">
              <Slider
                value={[zoomLevel]}
                min={50}
                max={200}
                step={10}
                onValueChange={(value) => setZoomLevel(value[0])}
              />
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setZoomLevel(Math.min(200, zoomLevel + 10))}
              disabled={zoomLevel >= 200}
            >
              <ZoomInIcon className="h-4 w-4" />
            </Button>
            <span className="text-sm ml-2">{zoomLevel}%</span>
          </div>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={refreshDiagram}>
              <RefreshCwIcon className="h-4 w-4" />
            </Button>
            <Button variant="outline" size="sm" onClick={toggleFullscreen}>
              {isFullscreen ? <MinimizeIcon className="h-4 w-4" /> : <MaximizeIcon className="h-4 w-4" />}
            </Button>
          </div>
        </div>
        <div
          ref={containerRef}
          className="mermaid-container overflow-auto border rounded-md p-4 bg-black"
          style={{
            maxHeight: isFullscreen ? "calc(100vh - 200px)" : "600px",
            height: isFullscreen ? "calc(100vh - 200px)" : "auto",
          }}
        >
          <div ref={mermaidRef} className="mermaid" style={{ minWidth: "100%", display: "inline-block" }}></div>
        </div>
      </CardContent>
    </Card>
  )
}

----
components/repo/sigma-code-view.tsx
"use client"

import { useState, useEffect } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  SearchIcon,
  FileIcon,
  FileTextIcon,
  CodeIcon,
  ImageIcon,
  Loader2Icon,
  ClipboardIcon,
  CheckIcon,
  AlertCircleIcon,
  RefreshCwIcon,
  DownloadIcon,
} from "lucide-react"
import type { JSX } from "react"
import { Button } from "@/components/ui/button"

interface FileData {
  path: string
  content?: string
  size: number
  type: string
  isBinary?: boolean
  name: string
  sha?: string
}

interface SigmaCodeViewProps {
  files?: FileData[]
  repoData?: any
  owner?: string
  repo?: string
  branch?: string
}

export default function SigmaCodeView({ files: initialFiles = [], repoData, owner, repo, branch }: SigmaCodeViewProps) {
  const [searchQuery, setSearchQuery] = useState("")
  const [activeTab, setActiveTab] = useState("all")
  const [loadedFiles, setLoadedFiles] = useState<Record<string, FileData>>({})
  const [loadingFiles, setLoadingFiles] = useState<Record<string, boolean>>({})
  const [files, setFiles] = useState<FileData[]>(initialFiles)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [branchName] = useState(branch || repoData?.default_branch || "main")

  // Function to load repository files
  const loadRepoFiles = async () => {
    if (!owner || !repo) return

    setIsLoading(true)
    setError(null)

    try {
      const response = await fetch("/api/git/clone-repo", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          owner,
          repo,
          branch: branchName,
        }),
      })

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        throw new Error(
          `Failed to analyze repository: ${response.status} ${response.statusText} ${errorData.message || ""}`,
        )
      }

      const data = await response.json()
      setFiles(data.files || [])
    } catch (err) {
      console.error("Error loading repository files:", err)
      setError(err instanceof Error ? err.message : String(err))
    } finally {
      setIsLoading(false)
    }
  }

  // Load repository files on component mount
  useEffect(() => {
    if (initialFiles.length === 0 && owner && repo) {
      loadRepoFiles()
    }
  }, [initialFiles, owner, repo])

  // Filter files based on search query and active tab
  const filteredFiles = files.filter((file) => {
    // Filter by search query
    const matchesSearch =
      searchQuery === "" ||
      file.path.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (loadedFiles[file.path]?.content &&
        loadedFiles[file.path].content?.toLowerCase().includes(searchQuery.toLowerCase()))

    // Filter by file type
    if (activeTab === "all") return matchesSearch
    if (activeTab === "code" && isCodeFile(file.path)) return matchesSearch
    if (activeTab === "docs" && isDocFile(file.path)) return matchesSearch
    if (activeTab === "media" && isMediaFile(file.path)) return matchesSearch

    return false
  })

  // Calculate stats
  const totalSize = filteredFiles.reduce((sum, file) => sum + (file.size || 0), 0)

  // Function to load file content
  const loadFileContent = async (file: FileData) => {
    if (!owner || !repo) return
    if (loadedFiles[file.path] || loadingFiles[file.path]) return

    setLoadingFiles((prev) => ({ ...prev, [file.path]: true }))

    try {
      const response = await fetch("/api/git/file-content-git", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          owner,
          repo,
          branch: branchName,
          path: file.path,
        }),
        cache: "no-store",
      })

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        throw new Error(`Failed to fetch file: ${response.status} ${response.statusText} ${errorData.message || ""}`)
      }

      const data = await response.json()

      setLoadedFiles((prev) => ({
        ...prev,
        [file.path]: {
          ...file,
          content: data.isBinary ? "Binary file not shown" : data.content,
          isBinary: data.isBinary,
          size: data.size || file.size,
          sha: data.sha || file.sha,
        },
      }))
    } catch (error) {
      console.error(`Error loading file ${file.path}:`, error)
      setLoadedFiles((prev) => ({
        ...prev,
        [file.path]: {
          ...file,
          content: `Error loading file: ${error instanceof Error ? error.message : String(error)}`,
          isBinary: false,
        },
      }))
    } finally {
      setLoadingFiles((prev) => ({ ...prev, [file.path]: false }))
    }
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-12">
        <Loader2Icon className="h-8 w-8 animate-spin mr-3" />
        <span>Analyzing repository...</span>
      </div>
    )
  }

  if (error) {
    return (
      <div className="text-center py-8">
        <div className="flex flex-col items-center justify-center gap-4">
          <AlertCircleIcon className="h-12 w-12 text-red-500" />
          <p className="text-red-500 font-medium">Error analyzing repository</p>
          <p className="text-sm text-muted-foreground max-w-md">{error}</p>
          <Button variant="outline" onClick={loadRepoFiles} className="mt-2">
            <RefreshCwIcon className="h-4 w-4 mr-2" />
            Try Again
          </Button>
        </div>
      </div>
    )
  }

  if (!files || files.length === 0) {
    return (
      <div className="text-center py-8">
        <p className="text-muted-foreground">No files found in this repository.</p>
      </div>
    )
  }

  return (
    <div className="space-y-4">
      <div className="flex flex-col md:flex-row gap-4 items-center justify-between">
        <div className="relative w-full md:w-96">
          <SearchIcon className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="search"
            placeholder="Search in files..."
            className="pl-8"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>

        <div className="flex items-center gap-4">
          <CopyAllButton owner={owner!} repo={repo!} branch={branchName} />
          <div className="text-sm text-muted-foreground">
            {filteredFiles.length} files ‚Ä¢ {formatBytes(totalSize)}
          </div>
        </div>
      </div>

      <Tabs defaultValue="all" value={activeTab} onValueChange={setActiveTab}>
        <TabsList>
          <TabsTrigger value="all">
            <FileIcon className="h-4 w-4 mr-2" />
            All Files
          </TabsTrigger>
          <TabsTrigger value="code">
            <CodeIcon className="h-4 w-4 mr-2" />
            Code
          </TabsTrigger>
          <TabsTrigger value="docs">
            <FileTextIcon className="h-4 w-4 mr-2" />
            Docs
          </TabsTrigger>
          <TabsTrigger value="media">
            <ImageIcon className="h-4 w-4 mr-2" />
            Media
          </TabsTrigger>
        </TabsList>

        <TabsContent value="all" className="mt-4">
          <FilesList
            files={filteredFiles}
            searchQuery={searchQuery}
            loadedFiles={loadedFiles}
            loadingFiles={loadingFiles}
            onLoadFile={loadFileContent}
          />
        </TabsContent>
        <TabsContent value="code" className="mt-4">
          <FilesList
            files={filteredFiles}
            searchQuery={searchQuery}
            loadedFiles={loadedFiles}
            loadingFiles={loadingFiles}
            onLoadFile={loadFileContent}
          />
        </TabsContent>
        <TabsContent value="docs" className="mt-4">
          <FilesList
            files={filteredFiles}
            searchQuery={searchQuery}
            loadedFiles={loadedFiles}
            loadingFiles={loadingFiles}
            onLoadFile={loadFileContent}
          />
        </TabsContent>
        <TabsContent value="media" className="mt-4">
          <FilesList
            files={filteredFiles}
            searchQuery={searchQuery}
            loadedFiles={loadedFiles}
            loadingFiles={loadingFiles}
            onLoadFile={loadFileContent}
          />
        </TabsContent>
      </Tabs>
    </div>
  )
}

function FilesList({
  files,
  searchQuery,
  loadedFiles,
  loadingFiles,
  onLoadFile,
}: {
  files: FileData[]
  searchQuery: string
  loadedFiles: Record<string, FileData>
  loadingFiles: Record<string, boolean>
  onLoadFile: (file: FileData) => void
}) {
  useEffect(() => {
    // Load content for the first 5 files automatically
    files.slice(0, 5).forEach((file) => {
      if (!loadedFiles[file.path] && !loadingFiles[file.path]) {
        onLoadFile(file)
      }
    })
  }, [files, loadedFiles, loadingFiles, onLoadFile])

  if (files.length === 0) {
    return (
      <div className="text-center py-8">
        <p className="text-muted-foreground">No matching files found.</p>
      </div>
    )
  }

  return (
    <div className="space-y-4">
      {files.map((file) => {
        const isLoaded = !!loadedFiles[file.path]
        const isLoading = !!loadingFiles[file.path]

        return (
          <Card key={file.path} className="overflow-hidden">
            <CardContent className="p-0">
              <div className="bg-muted p-2 border-b flex justify-between items-center">
                <h3 className="text-sm font-mono">{file.path}</h3>
                <div className="flex items-center gap-2">
                  {isLoaded && !loadedFiles[file.path]?.isBinary && (
                    <CopyButton content={loadedFiles[file.path]?.content || ""} />
                  )}
                  <span className="text-xs text-muted-foreground">{formatBytes(file.size)}</span>
                </div>
              </div>
              <div
                className="p-4 text-xs overflow-x-auto max-h-96 font-mono"
                onClick={() => {
                  if (!isLoaded && !isLoading) {
                    onLoadFile(file)
                  }
                }}
              >
                {isLoading ? (
                  <div className="flex items-center justify-center py-4">
                    <Loader2Icon className="h-5 w-5 animate-spin mr-2" />
                    <span>Loading file content...</span>
                  </div>
                ) : isLoaded ? (
                  <pre>
                    {highlightSearchTerms(loadedFiles[file.path].content || "Content not available", searchQuery)}
                  </pre>
                ) : (
                  <div className="text-center py-4 text-muted-foreground cursor-pointer hover:text-foreground">
                    Click to load file content
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        )
      })}
    </div>
  )
}

function CopyButton({ content }: { content: string }) {
  const [copied, setCopied] = useState(false)

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(content)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error("Failed to copy text: ", err)
    }
  }

  return (
    <Button
      variant="ghost"
      size="sm"
      className="h-7 px-2 text-xs"
      onClick={(e) => {
        e.stopPropagation()
        copyToClipboard()
      }}
      title="Copy code"
    >
      {copied ? (
        <>
          <CheckIcon className="h-3.5 w-3.5 mr-1" />
          <span>Copied</span>
        </>
      ) : (
        <>
          <ClipboardIcon className="h-3.5 w-3.5 mr-1" />
          <span>Copy</span>
        </>
      )}
    </Button>
  )
}

interface CopyAllButtonProps {
  owner: string
  repo: string
  branch: string
}

function CopyAllButton({ owner, repo, branch }: CopyAllButtonProps) {
  const [copied, setCopied] = useState(false)
  const [isLoading, setIsLoading] = useState(false)

  const copyAllToClipboard = async () => {
    try {
      setIsLoading(true)

      const response = await fetch("/api/git/archive-repo", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ owner, repo, branch }),
      })

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        throw new Error(`Failed to fetch repository: ${response.status} ${response.statusText} ${errorData.message || ""}`)
      }

      const data = await response.json()
      const fileContents = data.files
        .map((file: any) => `// File: ${file.path}\n\n${file.content || ""}\n\n`)
        .join("// -----------------------------------------------\n\n")

      await navigator.clipboard.writeText(fileContents)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error("Failed to copy all text: ", err)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <Button
      variant="outline"
      size="sm"
      className="ml-auto"
      onClick={copyAllToClipboard}
      disabled={isLoading}
      title="Copy entire repository"
    >
      {copied ? (
        <>
          <CheckIcon className="h-4 w-4 mr-2" />
          <span>Copied All</span>
        </>
      ) : isLoading ? (
        <>
          <Loader2Icon className="h-4 w-4 mr-2 animate-spin" />
          <span>Copying...</span>
        </>
      ) : (
        <>
          <DownloadIcon className="h-4 w-4 mr-2" />
          <span>Copy All Code</span>
        </>
      )}
    </Button>
  )
}

// Helper functions
function isCodeFile(path: string): boolean {
  const codeExtensions = [
    ".js",
    ".jsx",
    ".ts",
    ".tsx",
    ".py",
    ".rb",
    ".java",
    ".c",
    ".cpp",
    ".cs",
    ".go",
    ".php",
    ".swift",
    ".kt",
    ".rs",
    ".sh",
    ".bash",
    ".zsh",
    ".ps1",
    ".bat",
    ".cmd",
    ".sql",
  ]
  return codeExtensions.some((ext) => path.toLowerCase().endsWith(ext))
}

function isDocFile(path: string): boolean {
  const docExtensions = [
    ".md",
    ".mdx",
    ".txt",
    ".pdf",
    ".doc",
    ".docx",
    ".csv",
    ".json",
    ".yml",
    ".yaml",
    ".toml",
    ".ini",
    ".cfg",
    ".conf",
    ".config",
    ".properties",
  ]

  // Check for common doc files without extensions
  const lowercasePath = path.toLowerCase()
  const commonDocs = ["readme", "license", "licence", "changelog", "contributing", "authors"]

  if (!lowercasePath.includes(".")) {
    const filename = lowercasePath.split("/").pop() || ""
    if (commonDocs.includes(filename)) {
      return true
    }
  }

  return docExtensions.some((ext) => path.toLowerCase().endsWith(ext))
}

function isMediaFile(path: string): boolean {
  const mediaExtensions = [".jpg", ".jpeg", ".png", ".gif", ".svg", ".webp", ".mp4", ".webm", ".mp3", ".wav"]
  return mediaExtensions.some((ext) => path.toLowerCase().endsWith(ext))
}

function formatBytes(bytes: number): string {
  if (bytes === 0) return "0 Bytes"
  const k = 1024
  const sizes = ["Bytes", "KB", "MB", "GB"]
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
}

function highlightSearchTerms(text: string, searchQuery: string): string | JSX.Element {
  if (!searchQuery || searchQuery.trim() === "") {
    return text
  }

  // Simple implementation - in a real app, you'd want to use a proper syntax highlighter
  const parts = text.split(new RegExp(`(${searchQuery})`, "gi"))

  return (
    <>
      {parts.map((part, i) =>
        part.toLowerCase() === searchQuery.toLowerCase() ? (
          <span key={i} className="bg-yellow-500/30 text-white">
            {part}
          </span>
        ) : (
          part
        ),
      )}
    </>
  )
}

----
components/search/search-results.tsx
"use client"

import type { SearchResult } from "@/lib/types/search"
import { Badge } from "@/components/ui/badge"
import { StarIcon, FolderOpenIcon as IssueOpenedIcon, GitPullRequestIcon, MessageSquareIcon } from "lucide-react"
import Link from "next/link"
import Image from "next/image"

interface SearchResultsProps {
  results: SearchResult[]
  query: string
  isLoading: boolean
  onResultClick: () => void
}

export function SearchResults({ results, query, isLoading, onResultClick }: SearchResultsProps) {
  if (isLoading) {
    return (
      <div className="absolute top-full left-0 right-0 bg-background border rounded-md shadow-lg mt-1 p-2 max-h-[80vh] overflow-y-auto z-50">
        <div className="flex items-center justify-center p-4">
          <div className="animate-spin h-5 w-5 border-2 border-primary border-t-transparent rounded-full mr-2"></div>
          <p>Searching...</p>
        </div>
      </div>
    )
  }

  if (query.trim() === "") {
    return null
  }

  if (results.length === 0) {
    return (
      <div className="absolute top-full left-0 right-0 bg-background border rounded-md shadow-lg mt-1 p-4 max-h-[80vh] overflow-y-auto z-50">
        <p className="text-center text-muted-foreground">No results found for "{query}"</p>
      </div>
    )
  }

  return (
    <div className="absolute top-full left-0 right-0 bg-background border rounded-md shadow-lg mt-1 p-2 max-h-[80vh] overflow-y-auto z-50">
      <div className="text-sm text-muted-foreground px-3 py-2 border-b">
        {results.length} results for "{query}"
      </div>
      <ul className="divide-y">
        {results.map((result) => (
          <li key={result.id} className="hover:bg-muted/50 rounded-md">
            <Link href={result.url} className="block p-3" onClick={onResultClick}>
              <div className="flex items-start gap-3">
                <div className="flex-shrink-0">
                  {result.type === "repository" && (
                    <div className="w-8 h-8 rounded-full overflow-hidden">
                      <Image src={result.avatar || "/placeholder.svg"} alt={result.owner} width={32} height={32} />
                    </div>
                  )}
                  {result.type === "user" && (
                    <div className="w-8 h-8 rounded-full overflow-hidden">
                      <Image src={result.avatar || "/placeholder.svg"} alt={result.title} width={32} height={32} />
                    </div>
                  )}
                  {result.type === "issue" && <IssueOpenedIcon className="w-6 h-6 text-yellow-500" />}
                  {result.type === "pull-request" && <GitPullRequestIcon className="w-6 h-6 text-green-500" />}
                  {result.type === "discussion" && <MessageSquareIcon className="w-6 h-6 text-purple-500" />}
                </div>
                <div className="flex-1 min-w-0">
                  <div className="flex items-center gap-2">
                    <span className="font-medium truncate">{result.title}</span>
                    {result.type === "repository" && result.language && (
                      <Badge variant="outline" className="text-xs">
                        {result.language}
                      </Badge>
                    )}
                  </div>
                  <p className="text-sm text-muted-foreground line-clamp-2 mt-1">{result.description}</p>
                  {result.type === "repository" && (
                    <div className="flex items-center gap-4 mt-2 text-xs text-muted-foreground">
                      {result.stars !== undefined && (
                        <div className="flex items-center gap-1">
                          <StarIcon className="w-3.5 h-3.5" />
                          <span>{result.stars.toLocaleString()}</span>
                        </div>
                      )}
                      {result.updated && <div>Updated on {result.updated}</div>}
                    </div>
                  )}
                </div>
              </div>
            </Link>
          </li>
        ))}
      </ul>
      <div className="p-3 border-t">
        <Link
          href={`/search?q=${encodeURIComponent(query)}`}
          className="text-sm text-primary hover:underline block text-center"
          onClick={onResultClick}
        >
          See all results
        </Link>
      </div>
    </div>
  )
}

----
components/sections/cta-section.tsx
"use client"

import { Button } from "@/components/ui/button"
import { useEffect, useState, useRef } from "react"
import { motion } from "framer-motion"
import { TextReveal } from "@/components/animated-elements"

export default function CTASection() {
  const [mounted, setMounted] = useState(false)
  const canvasRef = useRef<HTMLCanvasElement>(null)

  useEffect(() => {
    setMounted(true)

    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // Set canvas dimensions
    const resizeCanvas = () => {
      canvas.width = canvas.offsetWidth
      canvas.height = canvas.offsetHeight
    }

    resizeCanvas()
    window.addEventListener("resize", resizeCanvas)

    // Particle class
    class Particle {
      x: number
      y: number
      size: number
      speedX: number
      speedY: number
      color: string
      alpha: number

      constructor() {
        this.x = Math.random() * canvas.width
        this.y = Math.random() * canvas.height
        this.size = Math.random() * 3 + 1
        this.speedX = Math.random() * 0.5 - 0.25
        this.speedY = Math.random() * 0.5 - 0.25
        this.color = this.getRandomColor()
        this.alpha = Math.random() * 0.5 + 0.1
      }

      getRandomColor() {
        const colors = [
          "rgba(37, 165, 95, 0.7)", // Primary green
          "rgba(37, 165, 95, 0.5)", // Lighter primary
          "rgba(20, 110, 60, 0.6)", // Darker green
          "rgba(70, 200, 120, 0.4)", // Lighter green
          "rgba(30, 30, 50, 0.5)", // Dark blue-ish
        ]
        return colors[Math.floor(Math.random() * colors.length)]
      }

      update() {
        this.x += this.speedX
        this.y += this.speedY

        // Bounce off edges
        if (this.x > canvas.width || this.x < 0) {
          this.speedX = -this.speedX
        }
        if (this.y > canvas.height || this.y < 0) {
          this.speedY = -this.speedY
        }
      }

      draw() {
        if (!ctx) return
        ctx.beginPath()
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2)
        ctx.fillStyle = this.color
        ctx.globalAlpha = this.alpha
        ctx.fill()
        ctx.globalAlpha = 1
      }
    }

    // Create particles
    const particleCount = Math.min(30, Math.floor((canvas.width * canvas.height) / 20000))
    const particles: Particle[] = []

    for (let i = 0; i < particleCount; i++) {
      particles.push(new Particle())
    }

    // Animation loop
    let animationFrameId: number

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height)

      // Draw gradient background
      const gradient = ctx.createRadialGradient(
        canvas.width / 2,
        canvas.height / 2,
        0,
        canvas.width / 2,
        canvas.height / 2,
        canvas.width * 0.8,
      )

      gradient.addColorStop(0, "rgba(10, 10, 15, 0.4)")
      gradient.addColorStop(0.5, "rgba(5, 5, 10, 0.2)")
      gradient.addColorStop(1, "rgba(0, 0, 0, 0)")

      ctx.fillStyle = gradient
      ctx.fillRect(0, 0, canvas.width, canvas.height)

      // Update and draw particles
      particles.forEach((particle) => {
        particle.update()
        particle.draw()
      })

      // Connect nearby particles with lines
      for (let i = 0; i < particles.length; i++) {
        for (let j = i + 1; j < particles.length; j++) {
          const dx = particles[i].x - particles[j].x
          const dy = particles[i].y - particles[j].y
          const distance = Math.sqrt(dx * dx + dy * dy)

          if (distance < 100) {
            ctx.beginPath()
            ctx.strokeStyle = `rgba(37, 165, 95, ${0.1 * (1 - distance / 100)})`
            ctx.lineWidth = 0.5
            ctx.moveTo(particles[i].x, particles[i].y)
            ctx.lineTo(particles[j].x, particles[j].y)
            ctx.stroke()
          }
        }
      }

      animationFrameId = requestAnimationFrame(animate)
    }

    animate()

    return () => {
      window.removeEventListener("resize", resizeCanvas)
      cancelAnimationFrame(animationFrameId)
    }
  }, [])

  return (
    <section className="py-12 md:py-20 px-4 md:px-6 relative">
      {/* No background elements - let the main AnimatedBackground show through */}

      <div className="container relative z-10">
        <motion.div
          className="max-w-[900px] mx-auto bg-gradient-to-r from-primary/10 to-black/80 border border-primary/30 rounded-xl p-6 md:p-12 text-center backdrop-blur-sm"
          initial={{ opacity: 0, y: 50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{
            type: "spring",
            stiffness: 100,
            damping: 15,
            delay: 0.2,
          }}
          whileHover={{
            boxShadow: "0 0 30px rgba(46, 204, 113, 0.3)",
            scale: 1.02,
            transition: { duration: 0.3 },
          }}
        >
          <TextReveal className="text-2xl md:text-3xl lg:text-4xl font-bold mb-4">
            Ready to transform how you understand code?
          </TextReveal>

          <motion.p
            className="text-lg md:text-xl text-muted-foreground max-w-[600px] mx-auto mb-8"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.4 }}
          >
            Join thousands of developers who are already saving time with GitHub.GG.
          </motion.p>

          <motion.div
            className="flex flex-col sm:flex-row gap-4 justify-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6 }}
          >
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Button size="lg" className="bg-primary hover:bg-primary/90">
                Try GitHub.GG Free
              </Button>
            </motion.div>
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Button size="lg" variant="outline">
                Learn More
              </Button>
            </motion.div>
          </motion.div>
        </motion.div>
      </div>
    </section>
  )
}

----
components/sections/features-section.tsx
"use client"

import Image from "next/image"
import { SparklesIcon } from "lucide-react"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { motion } from "framer-motion"
import { StaggerContainer, StaggerItem, ScaleIn } from "@/components/animated-elements"

export default function FeaturesSection() {
  return (
    <section id="features" className="pb-12 md:pb-20 mt-12 md:mt-20">
      <div className="container px-4 md:px-6">
        <Tabs defaultValue="summaries" className="w-full max-w-[1000px] mx-auto">
          <TabsList className="grid grid-cols-1 sm:grid-cols-3 w-full mb-8 h-auto">
            <TabsTrigger value="summaries" className="py-3">
              AI Summaries
            </TabsTrigger>
            <TabsTrigger value="exploration" className="py-3">
              Code Exploration
            </TabsTrigger>
            <TabsTrigger value="integration" className="py-3">
              GitHub Integration
            </TabsTrigger>
          </TabsList>
          <TabsContent value="summaries" className="mt-0">
            <motion.div
              className="grid grid-cols-1 md:grid-cols-2 gap-8 items-center"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5 }}
            >
              <div>
                <motion.h3
                  className="text-xl md:text-2xl font-bold mb-4"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 }}
                >
                  Instant AI Summaries
                </motion.h3>
                <motion.p
                  className="text-muted-foreground mb-6"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 }}
                >
                  Get immediate AI-generated summaries of repositories, files, and code sections to quickly understand
                  their purpose and functionality.
                </motion.p>
                <StaggerContainer>
                  {[
                    "Repository overviews",
                    "File purpose explanations",
                    "Function descriptions",
                    "Complex logic simplified",
                  ].map((item, i) => (
                    <StaggerItem key={i}>
                      <div className="flex items-start gap-3 mb-3">
                        <motion.div
                          className="h-6 w-6 rounded-full bg-primary/20 flex items-center justify-center flex-shrink-0 mt-0.5"
                          whileHover={{ scale: 1.2, backgroundColor: "rgba(46, 204, 113, 0.3)" }}
                        >
                          <SparklesIcon className="h-3.5 w-3.5 text-primary" />
                        </motion.div>
                        <span>{item}</span>
                      </div>
                    </StaggerItem>
                  ))}
                </StaggerContainer>
              </div>
              <ScaleIn delay={0.3}>
                <div className="relative rounded-xl overflow-hidden border border-border">
                  <Image
                    src="/placeholder.svg?height=400&width=500"
                    alt="GitHub.GG Interface"
                    width={500}
                    height={400}
                    className="w-full object-cover"
                  />
                </div>
              </ScaleIn>
            </motion.div>
          </TabsContent>
          <TabsContent value="exploration" className="mt-0">
            <motion.div
              className="grid grid-cols-1 md:grid-cols-2 gap-8 items-center"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5 }}
            >
              <div>
                <motion.h3
                  className="text-xl md:text-2xl font-bold mb-4"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 }}
                >
                  Interactive Code Exploration
                </motion.h3>
                <motion.p
                  className="text-muted-foreground mb-6"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 }}
                >
                  Chat with repositories to understand complex logic and structures through AI-assisted exploration.
                </motion.p>
                <StaggerContainer>
                  {[
                    "Question answering about code",
                    "Dependency tracing",
                    "Usage examples",
                    "Alternative implementations",
                  ].map((item, i) => (
                    <StaggerItem key={i}>
                      <div className="flex items-start gap-3 mb-3">
                        <motion.div
                          className="h-6 w-6 rounded-full bg-primary/20 flex items-center justify-center flex-shrink-0 mt-0.5"
                          whileHover={{ scale: 1.2, backgroundColor: "rgba(46, 204, 113, 0.3)" }}
                        >
                          <SparklesIcon className="h-3.5 w-3.5 text-primary" />
                        </motion.div>
                        <span>{item}</span>
                      </div>
                    </StaggerItem>
                  ))}
                </StaggerContainer>
              </div>
              <ScaleIn delay={0.3}>
                <div className="relative rounded-xl overflow-hidden border border-border">
                  <Image
                    src="/placeholder.svg?height=400&width=500"
                    alt="Code Exploration Feature"
                    width={500}
                    height={400}
                    className="w-full object-cover"
                  />
                </div>
              </ScaleIn>
            </motion.div>
          </TabsContent>
          <TabsContent value="integration" className="mt-0">
            <motion.div
              className="grid grid-cols-1 md:grid-cols-2 gap-8 items-center"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5 }}
            >
              <div>
                <motion.h3
                  className="text-xl md:text-2xl font-bold mb-4"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 }}
                >
                  Seamless GitHub Integration
                </motion.h3>
                <motion.p
                  className="text-muted-foreground mb-6"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 }}
                >
                  Works directly within your existing GitHub workflow - just change the domain and you're ready to go.
                </motion.p>
                <StaggerContainer>
                  {[
                    "No additional tools needed",
                    "Same URL structure as GitHub",
                    "Works with private repositories",
                    "Seamless authentication",
                  ].map((item, i) => (
                    <StaggerItem key={i}>
                      <div className="flex items-start gap-3 mb-3">
                        <motion.div
                          className="h-6 w-6 rounded-full bg-primary/20 flex items-center justify-center flex-shrink-0 mt-0.5"
                          whileHover={{ scale: 1.2, backgroundColor: "rgba(46, 204, 113, 0.3)" }}
                        >
                          <SparklesIcon className="h-3.5 w-3.5 text-primary" />
                        </motion.div>
                        <span>{item}</span>
                      </div>
                    </StaggerItem>
                  ))}
                </StaggerContainer>
              </div>
              <ScaleIn delay={0.3}>
                <div className="relative rounded-xl overflow-hidden border border-border">
                  <Image
                    src="/placeholder.svg?height=400&width=500"
                    alt="GitHub Integration Feature"
                    width={500}
                    height={400}
                    className="w-full object-cover"
                  />
                </div>
              </ScaleIn>
            </motion.div>
          </TabsContent>
        </Tabs>
      </div>
    </section>
  )
}

----
components/sections/hero-section.tsx
"use client"

import { SlideIn } from "@/components/animated-elements"
import UrlAnimation from "@/components/url-animation"
import { useState } from "react"

export default function HeroSection() {
  const [message, setMessage] = useState("")

  return (
    <section className="flex-1 flex flex-col justify-center py-12 md:py-20 px-4 w-full mx-auto items-center text-center">
      <SlideIn direction="up" duration={0.8} className="w-full">
        <UrlAnimation />
      </SlideIn>

      {/* Hero content removed as requested */}
    </section>
  )
}

----
components/sections/pricing-section.tsx
import { ZapIcon, BrainIcon, BoxIcon, RocketIcon } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import PricingCard from "@/components/pricing/pricing-card"

export default function PricingSection() {
  return (
    <section id="pricing" className="bg-black/50 backdrop-blur-sm py-12 md:py-20 border-t border-border/40">
      <div className="container px-4 md:px-6">
        <div className="text-center mb-10 md:mb-16">
          <Badge className="mb-4" variant="outline">
            Pricing
          </Badge>
          <h2 className="text-2xl md:text-3xl lg:text-5xl font-bold mb-4">Simple, Transparent Pricing</h2>
          <p className="text-lg md:text-xl text-muted-foreground max-w-[600px] mx-auto">
            Choose the plan that fits your needs.
          </p>
        </div>

        {/* For Individuals */}
        <div className="mb-16">
          <h3 className="text-2xl font-bold mb-8 text-center">For Individuals</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8 max-w-[1200px] mx-auto">
            <PricingCard
              title="Free"
              price="$0"
              description="Perfect for individual developers and casual use."
              features={[
                "Basic repository summaries",
                "File overviews",
                "Basic code explanations",
                "5 repositories/day",
              ]}
              buttonText="Sign in with GitHub"
              buttonVariant="outline"
              className="h-full"
              planType="free"
            />

            <PricingCard
              title="Pro"
              price="$19"
              description="For professional developers who need more power."
              features={[
                "Advanced repository analysis",
                "In-depth code explanations",
                "Interactive code exploration",
                "Private repository support",
                "Unlimited repositories",
                "Priority support",
              ]}
              buttonText="Upgrade to Pro"
              badge={{ text: "POPULAR" }}
              className="h-full"
              planType="pro"
            />

            <PricingCard
              title={
                <div className="flex items-center gap-2">
                  <ZapIcon className="h-6 w-6 text-yellow-400" />
                  ULTRA
                </div>
              }
              price="$4,269"
              description="Unleash the full power of AI for your development."
              features={[
                { text: "Unlimited repositories per day", icon: <ZapIcon className="h-3 w-3 text-yellow-400" /> },
                { text: "Custom RAG implementation", icon: <BrainIcon className="h-3 w-3 text-blue-400" /> },
                { text: "Your own AI space & environment", icon: <BoxIcon className="h-3 w-3 text-green-400" /> },
                { text: "Create your own AI assistant", icon: <RocketIcon className="h-3 w-3 text-red-400" /> },
                { text: "Tailored onboarding & training" },
                { text: "Email support" },
                { text: "Early access to new features" },
              ]}
              buttonText="Contact for ULTRA"
              className="h-full bg-gradient-to-br from-primary/20 to-purple-900/30 border-primary/50"
              badge={{
                text: "ULTRA",
                className: "bg-gradient-to-r from-primary to-purple-600 text-white",
              }}
              buttonVariant={null}
              iconColor="text-white"
              isUltra={true}
              planType="ultra"
            />
          </div>
        </div>

        {/* For Teams and Companies */}
        <div>
          <h3 className="text-2xl font-bold mb-8 text-center">For Teams and Companies</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 md:gap-8 max-w-[900px] mx-auto">
            <PricingCard
              title="Team"
              price="$49"
              priceDetail="/user/month"
              description="For collaborative teams."
              features={[
                "Everything in Pro plan",
                "Team collaboration features",
                "Centralized billing",
                "User management dashboard",
                "Private repository support",
                "Shared AI insights across team",
                "Priority email support",
              ]}
              buttonText="Start a Team Plan"
              buttonVariant="outline"
              className="h-full border-primary/30"
              planType="team"
            />

            <PricingCard
              title="Enterprise"
              price="Custom Pricing"
              description="For larger companies."
              features={[
                "Everything in Team plan",
                "SAML Single Sign-On",
                "Advanced security controls",
                "Audit logs & compliance",
                "Custom contracts & SLAs",
                "Dedicated account manager",
                "Custom AI model training",
                "Data isolation and training opt-out",
                "Priority access for better performance",
              ]}
              buttonText="Contact Us"
              buttonVariant="outline"
              className="h-full border-primary/30"
              planType="enterprise"
            />
          </div>
        </div>
      </div>
    </section>
  )
}

----
components/sections/repo-analysis-section.tsx
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { FileIcon, FolderIcon, CodeIcon, GitBranchIcon, UsersIcon, ClockIcon, SparklesIcon } from "lucide-react"
import RepoAdSection from "@/components/advertising/repo-ad-section"

export default function RepoAnalysisSection() {
  return (
    <section className="py-16 bg-black/60 backdrop-blur-sm border-y border-border/40">
      <div className="container px-4 md:px-6">
        <div className="text-center mb-10">
          <Badge className="mb-4" variant="outline">
            Repository Analysis
          </Badge>
          <h2 className="text-2xl md:text-3xl lg:text-4xl font-bold mb-4">Understand Any Codebase Instantly</h2>
          <p className="text-lg text-muted-foreground max-w-[700px] mx-auto">
            Get AI-powered insights into any GitHub repository with just a domain change.
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8 max-w-[1200px] mx-auto">
          {/* Main content - 3/4 width on desktop */}
          <div className="lg:col-span-3">
            <Tabs defaultValue="overview" className="w-full">
              <TabsList className="grid grid-cols-4 w-full mb-6">
                <TabsTrigger value="overview">Overview</TabsTrigger>
                <TabsTrigger value="files">Files</TabsTrigger>
                <TabsTrigger value="dependencies">Dependencies</TabsTrigger>
                <TabsTrigger value="insights">Insights</TabsTrigger>
              </TabsList>

              <TabsContent value="overview" className="mt-0">
                <Card className="bg-black/70 border-border/50 backdrop-blur-sm">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <GitBranchIcon className="h-5 w-5 text-primary" />
                      Repository Overview
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      <div className="flex flex-col md:flex-row gap-4 items-start">
                        <div className="w-full md:w-2/3">
                          <h3 className="text-xl font-semibold mb-3">Next.js</h3>
                          <p className="text-muted-foreground mb-4">
                            Next.js is a React framework that enables server-side rendering, static site generation, and
                            more. It provides a great developer experience with features like file-system routing, API
                            routes, and built-in CSS support.
                          </p>

                          <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-4">
                            <div className="flex items-center gap-2">
                              <UsersIcon className="h-4 w-4 text-primary" />
                              <span className="text-sm">2.4k contributors</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <FileIcon className="h-4 w-4 text-primary" />
                              <span className="text-sm">3.2k files</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <ClockIcon className="h-4 w-4 text-primary" />
                              <span className="text-sm">Last updated 2d ago</span>
                            </div>
                          </div>

                          <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
                            <h4 className="text-sm font-medium mb-2">Key Features</h4>
                            <ul className="text-sm text-muted-foreground space-y-1">
                              <li>‚Ä¢ Server-side rendering and static site generation</li>
                              <li>‚Ä¢ File-system based routing</li>
                              <li>‚Ä¢ API routes</li>
                              <li>‚Ä¢ Built-in CSS and Sass support</li>
                              <li>‚Ä¢ Fast refresh for development</li>
                            </ul>
                          </div>
                        </div>

                        <div className="w-full md:w-1/3">
                          <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50 h-full">
                            <h4 className="text-sm font-medium mb-3">Language Breakdown</h4>
                            <div className="space-y-3">
                              <div>
                                <div className="flex justify-between text-xs mb-1">
                                  <span>TypeScript</span>
                                  <span>68%</span>
                                </div>
                                <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
                                  <div className="h-full bg-blue-500 rounded-full" style={{ width: "68%" }}></div>
                                </div>
                              </div>
                              <div>
                                <div className="flex justify-between text-xs mb-1">
                                  <span>JavaScript</span>
                                  <span>24%</span>
                                </div>
                                <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
                                  <div className="h-full bg-yellow-500 rounded-full" style={{ width: "24%" }}></div>
                                </div>
                              </div>
                              <div>
                                <div className="flex justify-between text-xs mb-1">
                                  <span>CSS</span>
                                  <span>5%</span>
                                </div>
                                <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
                                  <div className="h-full bg-purple-500 rounded-full" style={{ width: "5%" }}></div>
                                </div>
                              </div>
                              <div>
                                <div className="flex justify-between text-xs mb-1">
                                  <span>Other</span>
                                  <span>3%</span>
                                </div>
                                <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
                                  <div className="h-full bg-gray-500 rounded-full" style={{ width: "3%" }}></div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
                        <h4 className="text-sm font-medium mb-3">AI Summary</h4>
                        <p className="text-sm text-muted-foreground">
                          Next.js is a production-ready React framework focused on developer experience and performance.
                          It simplifies the creation of React applications by providing built-in features like routing,
                          API handling, and various rendering strategies. The codebase is well-structured with clear
                          separation of concerns, making it accessible for contributors. The project is actively
                          maintained with regular updates and a strong community backing.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="files" className="mt-0">
                <Card className="bg-black/80 border-border/50">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <FolderIcon className="h-5 w-5 text-primary" />
                      File Structure
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50 mb-6">
                      <div className="flex items-center gap-2 mb-4">
                        <FolderIcon className="h-4 w-4 text-blue-400" />
                        <span className="font-medium">packages</span>
                      </div>

                      <div className="ml-6 space-y-3">
                        <div>
                          <div className="flex items-center gap-2 mb-2">
                            <FolderIcon className="h-4 w-4 text-blue-400" />
                            <span className="font-medium">next</span>
                          </div>

                          <div className="ml-6 space-y-2">
                            <div className="flex items-center gap-2">
                              <FolderIcon className="h-4 w-4 text-blue-400" />
                              <span>src</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <FileIcon className="h-4 w-4 text-gray-400" />
                              <span>package.json</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <FileIcon className="h-4 w-4 text-gray-400" />
                              <span>tsconfig.json</span>
                            </div>
                          </div>
                        </div>

                        <div>
                          <div className="flex items-center gap-2">
                            <FolderIcon className="h-4 w-4 text-blue-400" />
                            <span>create-next-app</span>
                          </div>
                        </div>

                        <div>
                          <div className="flex items-center gap-2">
                            <FolderIcon className="h-4 w-4 text-blue-400" />
                            <span>font</span>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
                      <h4 className="text-sm font-medium mb-3">AI Analysis</h4>
                      <p className="text-sm text-muted-foreground mb-4">
                        The Next.js repository follows a monorepo structure using Turborepo. The main package is in
                        packages/next, which contains the core framework code. Other packages include tools like
                        create-next-app for project scaffolding and specialized packages for features like font
                        optimization.
                      </p>
                      <p className="text-sm text-muted-foreground">Key directories in the main package include:</p>
                      <ul className="text-sm text-muted-foreground mt-2 space-y-1">
                        <li>
                          ‚Ä¢ <span className="text-blue-400">src/server</span>: Server-side rendering logic
                        </li>
                        <li>
                          ‚Ä¢ <span className="text-blue-400">src/client</span>: Client-side runtime
                        </li>
                        <li>
                          ‚Ä¢ <span className="text-blue-400">src/build</span>: Build-time optimization
                        </li>
                        <li>
                          ‚Ä¢ <span className="text-blue-400">src/shared</span>: Shared utilities
                        </li>
                      </ul>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="dependencies" className="mt-0">
                <Card className="bg-black/80 border-border/50">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <CodeIcon className="h-5 w-5 text-primary" />
                      Dependencies
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
                          <h4 className="text-sm font-medium mb-3">Production Dependencies</h4>
                          <ul className="text-sm space-y-2">
                            <li className="flex justify-between">
                              <span className="text-blue-400">react</span>
                              <span className="text-gray-400">^18.2.0</span>
                            </li>
                            <li className="flex justify-between">
                              <span className="text-blue-400">react-dom</span>
                              <span className="text-gray-400">^18.2.0</span>
                            </li>
                            <li className="flex justify-between">
                              <span className="text-blue-400">styled-jsx</span>
                              <span className="text-gray-400">5.1.1</span>
                            </li>
                            <li className="flex justify-between">
                              <span className="text-blue-400">@opentelemetry/api</span>
                              <span className="text-gray-400">1.4.1</span>
                            </li>
                            <li className="flex justify-between">
                              <span className="text-blue-400">postcss</span>
                              <span className="text-gray-400">8.4.14</span>
                            </li>
                          </ul>
                        </div>

                        <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
                          <h4 className="text-sm font-medium mb-3">Development Dependencies</h4>
                          <ul className="text-sm space-y-2">
                            <li className="flex justify-between">
                              <span className="text-purple-400">@types/react</span>
                              <span className="text-gray-400">^18.2.0</span>
                            </li>
                            <li className="flex justify-between">
                              <span className="text-purple-400">@types/react-dom</span>
                              <span className="text-gray-400">^18.2.0</span>
                            </li>
                            <li className="flex justify-between">
                              <span className="text-purple-400">typescript</span>
                              <span className="text-gray-400">^5.1.6</span>
                            </li>
                            <li className="flex justify-between">
                              <span className="text-purple-400">eslint</span>
                              <span className="text-gray-400">8.42.0</span>
                            </li>
                            <li className="flex justify-between">
                              <span className="text-purple-400">jest</span>
                              <span className="text-gray-400">^29.5.0</span>
                            </li>
                          </ul>
                        </div>
                      </div>

                      <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
                        <h4 className="text-sm font-medium mb-3">AI Dependency Analysis</h4>
                        <p className="text-sm text-muted-foreground mb-4">
                          Next.js maintains a minimal set of core dependencies, with React being the primary one. The
                          framework uses styled-jsx for CSS-in-JS styling by default, though it supports various styling
                          approaches.
                        </p>
                        <p className="text-sm text-muted-foreground">
                          The project has strong TypeScript support with comprehensive type definitions. Development
                          tooling includes ESLint for code quality and Jest for testing. The dependency management is
                          well-maintained with regular updates to keep dependencies secure and up-to-date.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="insights" className="mt-0">
                <Card className="bg-black/80 border-border/50">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <SparklesIcon className="h-5 w-5 text-primary" />
                      AI Insights
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
                        <h4 className="text-sm font-medium mb-3">Architecture Overview</h4>
                        <p className="text-sm text-muted-foreground">
                          Next.js follows a hybrid architecture that combines client and server rendering capabilities.
                          The framework is built around a series of compilation steps that transform React components
                          into optimized bundles. The core architecture includes:
                        </p>
                        <ul className="text-sm text-muted-foreground mt-3 space-y-1">
                          <li>‚Ä¢ A custom webpack configuration for optimized builds</li>
                          <li>‚Ä¢ A server-side rendering engine</li>
                          <li>‚Ä¢ A router for handling client-side navigation</li>
                          <li>‚Ä¢ A data fetching layer for server components and API routes</li>
                          <li>‚Ä¢ Various optimization plugins for images, fonts, and scripts</li>
                        </ul>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
                          <h4 className="text-sm font-medium mb-3">Code Quality</h4>
                          <div className="flex items-center gap-2 mb-3">
                            <div className="h-2.5 w-2.5 rounded-full bg-green-500"></div>
                            <span className="text-sm font-medium">Excellent</span>
                          </div>
                          <p className="text-sm text-muted-foreground">
                            The codebase maintains high quality with comprehensive tests, consistent coding standards,
                            and thorough documentation. TypeScript is used throughout, providing strong type safety.
                          </p>
                        </div>

                        <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
                          <h4 className="text-sm font-medium mb-3">Maintenance Activity</h4>
                          <div className="flex items-center gap-2 mb-3">
                            <div className="h-2.5 w-2.5 rounded-full bg-green-500"></div>
                            <span className="text-sm font-medium">Very Active</span>
                          </div>
                          <p className="text-sm text-muted-foreground">
                            The repository shows consistent activity with regular commits, prompt issue responses, and
                            frequent releases. The maintainers are actively engaged with the community.
                          </p>
                        </div>
                      </div>

                      <div className="bg-gray-900/50 p-4 rounded-lg border border-border/50">
                        <h4 className="text-sm font-medium mb-3">Key Insights</h4>
                        <ul className="text-sm text-muted-foreground space-y-3">
                          <li className="flex gap-3">
                            <span className="text-yellow-400 font-bold">‚Üí</span>
                            <span>
                              The App Router introduced in Next.js 13 represents a significant architectural shift
                              toward React Server Components.
                            </span>
                          </li>
                          <li className="flex gap-3">
                            <span className="text-yellow-400 font-bold">‚Üí</span>
                            <span>
                              The codebase shows a strong focus on performance optimization, particularly in areas like
                              image processing and JavaScript bundling.
                            </span>
                          </li>
                          <li className="flex gap-3">
                            <span className="text-yellow-400 font-bold">‚Üí</span>
                            <span>
                              Next.js maintains backward compatibility while introducing new features, showing careful
                              consideration for developer experience.
                            </span>
                          </li>
                        </ul>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>

          {/* Sidebar - 1/4 width on desktop */}
          <div className="lg:col-span-1">
            <RepoAdSection />

            <div className="mt-6 bg-black/70 border-border/50 backdrop-blur-sm rounded-lg border p-4">
              <h3 className="text-lg font-medium mb-4">Similar Repositories</h3>
              <div className="space-y-4">
                {[
                  { name: "remix-run/remix", desc: "Full stack React framework" },
                  { name: "sveltejs/kit", desc: "Svelte application framework" },
                  { name: "nuxt/nuxt", desc: "Vue.js framework" },
                ].map((repo, i) => (
                  <div key={i} className="border-b border-border/50 pb-3 last:border-0 last:pb-0">
                    <h4 className="font-medium text-sm text-blue-400 mb-1">{repo.name}</h4>
                    <p className="text-xs text-muted-foreground">{repo.desc}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

----
components/sections/stats-section.tsx
"use client"

import { useEffect, useState, useRef } from "react"
import { motion, useInView, useAnimation } from "framer-motion"
import { UsersIcon, SparklesIcon, Code2Icon } from "lucide-react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { AreaChart, Area, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts"
import { useMediaQuery } from "@/hooks/use-media-query"

export default function StatsSection() {
  // State for API data
  const [statsData, setStatsData] = useState({
    userActivity: {
      data: [],
      currentUsers: 0,
      growthPercentage: 0,
    },
    reposAnalyzed: {
      data: [],
      totalRepos: 0,
      growthPercentage: 0,
    },
    tokensUsed: {
      monthlyData: [],
      totalTokens: 0,
    },
  })

  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)

  // Check if we're on mobile
  const isMobile = useMediaQuery("(max-width: 768px)")

  // Fetch stats data from API
  useEffect(() => {
    const fetchStatsData = async () => {
      try {
        setIsLoading(true)
        const format = isMobile ? "mobile" : "full"
        const response = await fetch(`/api/stats?format=${format}`)

        if (!response.ok) {
          throw new Error(`API request failed with status ${response.status}`)
        }

        const data = await response.json()
        setStatsData(data)
        setError(null)
      } catch (err) {
        console.error("Error fetching stats data:", err)
        setError(err.message)
      } finally {
        setIsLoading(false)
      }
    }

    fetchStatsData()
  }, [isMobile])

  // Counter animation component
  function CountUp({ end, duration = 2, decimals = 0, suffix = "" }) {
    const [count, setCount] = useState(0)
    const ref = useRef(null)
    const isInView = useInView(ref, { once: true, amount: 0.3 })
    const controls = useAnimation()

    useEffect(() => {
      if (isInView) {
        controls.start("visible")

        let startTime
        let animationFrame

        const countUp = (timestamp) => {
          if (!startTime) startTime = timestamp
          const progress = timestamp - startTime
          const percentage = Math.min(progress / (duration * 1000), 1)

          // Easing function for smoother animation
          const easeOutQuart = 1 - Math.pow(1 - percentage, 4)
          const currentCount = Math.floor(easeOutQuart * end)

          setCount(currentCount)

          if (percentage < 1) {
            animationFrame = requestAnimationFrame(countUp)
          }
        }

        animationFrame = requestAnimationFrame(countUp)

        return () => {
          cancelAnimationFrame(animationFrame)
        }
      }
    }, [isInView, end, duration, controls])

    // Format the number with commas and decimals
    const formattedCount = new Intl.NumberFormat("en-US", {
      minimumFractionDigits: decimals,
      maximumFractionDigits: decimals,
    }).format(count)

    return (
      <span ref={ref}>
        {formattedCount}
        {suffix}
      </span>
    )
  }

  // Create a ref for the section
  const sectionRef = useRef(null)
  // Check if the section is in view
  const isInView = useInView(sectionRef, { once: true, amount: 0.2 })
  // Animation controls
  const controls = useAnimation()

  // Start animations when section comes into view
  useEffect(() => {
    if (isInView) {
      controls.start("visible")
    }
  }, [isInView, controls])

  // Loading state
  if (isLoading) {
    return (
      <section className="bg-black/60 backdrop-blur-sm pt-12 md:pt-20 border-y border-border/40" ref={sectionRef}>
        <div className="container px-4 md:px-6 text-center py-20">
          <div className="animate-pulse">Loading stats data...</div>
        </div>
      </section>
    )
  }

  // Error state
  if (error) {
    return (
      <section className="bg-black/60 backdrop-blur-sm pt-12 md:pt-20 border-y border-border/40" ref={sectionRef}>
        <div className="container px-4 md:px-6 text-center py-20">
          <div className="text-red-400">Error loading stats: {error}</div>
        </div>
      </section>
    )
  }

  // Extract data from the API response
  const { userActivity, reposAnalyzed, tokensUsed } = statsData

  return (
    <section className="bg-black/60 backdrop-blur-sm pt-12 md:pt-20 border-y border-border/40" ref={sectionRef}>
      <div className="container px-4 md:px-6">
        <div className="text-center mb-8 md:mb-12">
          <motion.div
            initial="hidden"
            animate={controls}
            variants={{
              hidden: { opacity: 0, y: -20 },
              visible: { opacity: 1, y: 0 },
            }}
            transition={{ duration: 0.5 }}
          >
            <Badge className="mb-4" variant="outline">
              Platform Stats
            </Badge>
          </motion.div>
          <motion.h2
            className="text-2xl md:text-3xl lg:text-4xl font-bold mb-4"
            initial="hidden"
            animate={controls}
            variants={{
              hidden: { opacity: 0, y: 20 },
              visible: { opacity: 1, y: 0 },
            }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            Growing Community
          </motion.h2>
          <motion.p
            className="text-lg md:text-xl text-muted-foreground max-w-[600px] mx-auto"
            initial="hidden"
            animate={controls}
            variants={{
              hidden: { opacity: 0 },
              visible: { opacity: 1 },
            }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            Join thousands of developers already using GitHub.GG
          </motion.p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-8 max-w-[1200px] mx-auto">
          {/* Active Users Card with Graph */}
          <Card className="bg-black/80 border-border/50 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="flex items-center gap-2 text-base md:text-lg">
                <UsersIcon className="h-5 w-5 text-primary" />
                Active Users This Month
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-[180px] w-full mb-4">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart data={userActivity.data}>
                    <defs>
                      <linearGradient id="userColorGradient" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="5%" stopColor="#8884d8" stopOpacity={0.8} />
                        <stop offset="95%" stopColor="#8884d8" stopOpacity={0.1} />
                      </linearGradient>
                    </defs>
                    <CartesianGrid strokeDasharray="3 3" stroke="#333" />
                    <XAxis dataKey="month" stroke="#666" />
                    <YAxis stroke="#666" />
                    <Tooltip
                      contentStyle={{ backgroundColor: "#222", border: "1px solid #444" }}
                      labelStyle={{ color: "#fff" }}
                    />
                    <Area
                      type="monotone"
                      dataKey="users"
                      stroke="#8884d8"
                      fillOpacity={1}
                      fill="url(#userColorGradient)"
                    />
                  </AreaChart>
                </ResponsiveContainer>
              </div>
              <div className="flex flex-col items-center">
                <motion.div
                  className="text-3xl md:text-5xl font-bold mb-2"
                  initial="hidden"
                  animate={controls}
                  variants={{
                    hidden: { opacity: 0, scale: 0.5 },
                    visible: { opacity: 1, scale: 1 },
                  }}
                  transition={{ type: "spring", stiffness: 100, delay: 0.2 }}
                >
                  <CountUp end={userActivity.currentUsers} duration={2.5} />
                </motion.div>
                <motion.p
                  className="text-sm md:text-base text-muted-foreground"
                  initial="hidden"
                  animate={controls}
                  variants={{
                    hidden: { opacity: 0 },
                    visible: { opacity: 1 },
                  }}
                  transition={{ delay: 0.4 }}
                >
                  <span className="text-green-400">‚Üë {userActivity.growthPercentage}%</span> from last month
                </motion.p>
              </div>
            </CardContent>
          </Card>

          {/* Token Usage Card */}
          <Card className="bg-black/80 border-border/50 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="flex items-center gap-2 text-base md:text-lg">
                <SparklesIcon className="h-5 w-5 text-primary" />
                Total Tokens Used
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-[180px] w-full flex items-center justify-center">
                {/* This would be a real chart in production */}
                <div className="w-full h-full relative">
                  <div className="absolute bottom-0 left-0 w-full h-full flex items-end">
                    {tokensUsed.monthlyData.map((height, i) => (
                      <div
                        key={i}
                        className="flex-1 mx-0.5 bg-gradient-to-t from-primary/80 to-primary/30 rounded-t"
                        style={{ height: `${height}%` }}
                      ></div>
                    ))}
                  </div>
                  <div className="absolute bottom-0 left-0 w-full h-[1px] bg-border"></div>
                </div>
              </div>
              <div className="flex justify-between mt-2 text-xs text-muted-foreground overflow-x-auto">
                <span className="px-1">Jan</span>
                <span className="px-1">Feb</span>
                <span className="px-1">Mar</span>
                <span className="px-1">Apr</span>
                <span className="px-1">May</span>
                <span className="px-1">Jun</span>
                <span className="px-1">Jul</span>
                <span className="px-1">Aug</span>
                <span className="px-1">Sep</span>
                <span className="px-1">Oct</span>
                <span className="px-1">Nov</span>
                <span className="px-1">Dec</span>
              </div>
              <div className="text-center mt-4">
                <motion.div
                  className="text-2xl md:text-3xl font-bold"
                  initial={{ opacity: 0, scale: 0.5 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ type: "spring", stiffness: 100, delay: 0.3 }}
                >
                  <CountUp end={tokensUsed.totalTokens} decimals={1} suffix="B+" duration={2} />
                </motion.div>
                <motion.p
                  className="text-xs md:text-sm text-muted-foreground"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.5 }}
                >
                  Total tokens processed in 2024
                </motion.p>
              </div>
            </CardContent>
          </Card>

          {/* Repositories Analyzed Card with Graph */}
          <Card className="bg-black/80 border-border/50 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="flex items-center gap-2 text-base md:text-lg">
                <Code2Icon className="h-5 w-5 text-primary" />
                Repositories Analyzed
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-[180px] w-full mb-4">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={reposAnalyzed.data}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#333" />
                    <XAxis dataKey="month" stroke="#666" />
                    <YAxis stroke="#666" />
                    <Tooltip
                      contentStyle={{ backgroundColor: "#222", border: "1px solid #444" }}
                      labelStyle={{ color: "#fff" }}
                      formatter={(value) => [`${(value / 1000000).toFixed(1)}M`, "Repositories"]}
                    />
                    <Bar dataKey="repos" fill="#ff6b81" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
              <div className="flex flex-col items-center">
                <motion.div
                  className="text-3xl md:text-5xl font-bold mb-2"
                  initial={{ opacity: 0, scale: 0.5 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ type: "spring", stiffness: 100, delay: 0.4 }}
                >
                  <CountUp end={reposAnalyzed.totalRepos / 1000000} decimals={1} suffix="M+" duration={2.5} />
                </motion.div>
                <motion.p
                  className="text-sm md:text-base text-muted-foreground"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.6 }}
                >
                  <span className="text-green-400">‚Üë {reposAnalyzed.growthPercentage}%</span> from last month
                </motion.p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </section>
  )
}

----
components/social-media-ad.tsx
import { Code2Icon, ClockIcon, BrainCircuitIcon } from "lucide-react"

export default function SocialMediaAd() {
  return (
    <div className="w-[1200px] h-[628px] bg-gradient-to-br from-black to-gray-900 flex flex-col items-center justify-center p-10 overflow-hidden relative">
      {/* Abstract code pattern background */}
      <div className="absolute inset-0 opacity-10">
        <div className="font-mono text-xs text-primary/50 leading-relaxed overflow-hidden">
          {Array(30)
            .fill(0)
            .map((_, i) => (
              <div key={i} className="whitespace-nowrap">
                {Array(50)
                  .fill(0)
                  .map((_, j) => (
                    <span
                      key={j}
                    >{`${Math.random() > 0.5 ? "{" : "}"}${Math.random() > 0.5 ? "<" : ">"}${Math.random() > 0.5 ? "(" : ")"}`}</span>
                  ))}
              </div>
            ))}
        </div>
      </div>

      <div className="z-10 flex flex-col items-center">
        {/* Logo & Tagline */}
        <div className="flex items-center gap-3 mb-6">
          <div className="w-12 h-12 bg-primary rounded-md flex items-center justify-center">
            <Code2Icon className="h-8 w-8 text-black" />
          </div>
          <span className="text-4xl font-bold text-white">GitHub.GG</span>
        </div>

        <h1 className="text-6xl font-bold text-center mb-6 max-w-[800px] leading-tight bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-400">
          Understand Code Instantly with AI
        </h1>

        <p className="text-2xl text-center text-gray-300 mb-10 max-w-[700px]">
          Change <span className="text-white font-semibold">github.com</span> to{" "}
          <span className="text-primary font-semibold">github.gg</span> and unlock AI-powered insights for any
          repository.
        </p>

        {/* Key features */}
        <div className="flex gap-8 mb-12">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center">
              <BrainCircuitIcon className="h-5 w-5 text-primary" />
            </div>
            <span className="text-gray-200">Instant AI Summaries</span>
          </div>
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center">
              <ClockIcon className="h-5 w-5 text-primary" />
            </div>
            <span className="text-gray-200">Save Hours of Time</span>
          </div>
        </div>

        {/* CTA */}
        <div className="px-8 py-4 bg-primary rounded-lg text-black font-semibold text-xl">Try GitHub.GG Free Today</div>
      </div>
    </div>
  )
}

----
components/theme-provider.tsx
'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

----
components/ui/accordion.tsx
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

----
components/ui/alert-dialog.tsx
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

----
components/ui/alert.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive: "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div ref={ref} role="alert" className={cn(alertVariants({ variant }), className)} {...props} />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h5 ref={ref} className={cn("mb-1 font-medium leading-none tracking-tight", className)} {...props} />
  ),
)
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("text-sm [&_p]:leading-relaxed", className)} {...props} />
  ),
)
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

----
components/ui/aspect-ratio.tsx
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

----
components/ui/avatar.tsx
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

----
components/ui/badge.tsx
import type * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
)

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />
}

export { Badge, badgeVariants }

----
components/ui/breadcrumb.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

----
components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

----
components/ui/calendar.tsx
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

----
components/ui/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

----
components/ui/carousel.tsx
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

----
components/ui/chart.tsx
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

----
components/ui/checkbox.tsx
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

----
components/ui/collapsible.tsx
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

----
components/ui/command.tsx
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

----
components/ui/context-menu.tsx
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

----
components/ui/dialog.tsx
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

----
components/ui/drawer.tsx
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

----
components/ui/dropdown-menu.tsx
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

----
components/ui/form.tsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

----
components/ui/github-star-button.tsx
"use client"

import { useState } from "react"
import { StarIcon, ChevronDownIcon } from "lucide-react"
import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

interface GitHubStarButtonProps {
  initialCount?: number
  initialStarred?: boolean
  className?: string
  onStar?: (starred: boolean) => void
}

export function GitHubStarButton({
  initialCount = 58500,
  initialStarred = false,
  className = "",
  onStar,
}: GitHubStarButtonProps) {
  const [starred, setStarred] = useState(initialStarred)
  const [starCount, setStarCount] = useState(initialCount)

  // Format star count (e.g., 58500 -> 58.5k)
  const formatStarCount = (count: number) => {
    if (count >= 1000) {
      return `${(count / 1000).toFixed(count >= 10000 ? 1 : 2).replace(/\.0$/, "")}k`
    }
    return count.toString()
  }

  const handleStarClick = () => {
    const newStarred = !starred
    setStarred(newStarred)
    setStarCount((prev) => (newStarred ? prev + 1 : prev - 1))
    if (onStar) onStar(newStarred)
  }

  return (
    <div className={`flex ${className}`}>
      <Button
        variant="outline"
        size="sm"
        className={`rounded-r-none border-r-0 bg-zinc-800 hover:bg-zinc-700 border-zinc-700 ${
          starred ? "text-yellow-300" : "text-zinc-300"
        }`}
        onClick={handleStarClick}
      >
        <StarIcon className={`h-4 w-4 mr-2 ${starred ? "fill-yellow-300" : ""}`} />
        Star
        <span className="ml-2">{formatStarCount(starCount)}</span>
      </Button>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="outline"
            size="sm"
            className="rounded-l-none px-2 bg-zinc-800 hover:bg-zinc-700 border-zinc-700 text-zinc-300"
          >
            <ChevronDownIcon className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end" className="w-48">
          <DropdownMenuItem onClick={() => window.open("https://github.com/lantos1618/github.gg/stargazers", "_blank")}>
            View stargazers
          </DropdownMenuItem>
          <DropdownMenuSeparator />
          <DropdownMenuItem onClick={() => window.open("https://github.com/lantos1618/github.gg/lists", "_blank")}>
            Add to lists
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  )
}

----
components/ui/hover-card.tsx
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

----
components/ui/input-otp.tsx
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

----
components/ui/input.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

----
components/ui/label.tsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

----
components/ui/loading-spinner.tsx
export default function LoadingSpinner() {
  return (
    <div className="flex justify-center items-center p-8 w-full">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
    </div>
  )
}

----
components/ui/menubar.tsx
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

----
components/ui/navigation-menu.tsx
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

----
components/ui/pagination.tsx
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

----
components/ui/popover.tsx
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

----
components/ui/progress.tsx
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

----
components/ui/radio-group.tsx
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

----
components/ui/resizable.tsx
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

----
components/ui/scroll-area.tsx
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

----
components/ui/select.tsx
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

----
components/ui/separator.tsx
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

----
components/ui/sheet.tsx
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

----
components/ui/sidebar.tsx
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-media-query"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

----
components/ui/skeleton.tsx
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

----
components/ui/slider.tsx
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn("relative flex w-full touch-none select-none items-center", className)}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

----
components/ui/sonner.tsx
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

----
components/ui/switch.tsx
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

----
components/ui/table.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

----
components/ui/tabs.tsx
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

----
components/ui/textarea.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

----
components/ui/toast.tsx
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

----
components/ui/toaster.tsx
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

----
components/ui/toggle-group.tsx
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

----
components/ui/toggle.tsx
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

----
components/ui/tooltip.tsx
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

----
components/ui/use-toast.ts
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

----
components/url-animation.tsx
"use client"

import { useState, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import Link from "next/link"

// Define animation stages
enum Stage {
  COM = 0,
  COM_STRIKE = 1,
  GG = 2,
}

export default function UrlAnimation() {
  const [mounted, setMounted] = useState(false)
  const [stage, setStage] = useState<Stage>(Stage.COM)
  const [currentRepoIndex, setCurrentRepoIndex] = useState(0)

  // List of GitHub repositories to cycle through
  const repos = [
    "preactjs/preact",
    "karpathy/micrograd",
    "bigskysoftware/htmx",
    "tinyplex/tinybase",
    "developit/mitt",
    "sindresorhus/ky",
    "lukeed/clsx",
    "ai/nanoid",
    "jamiebuilds/the-super-tiny-compiler",
  ]

  // Ensure client-side rendering
  useEffect(() => {
    setMounted(true)
  }, [])

  // Animation sequence timing
  useEffect(() => {
    if (!mounted) return

    const timer = setInterval(() => {
      setStage((prevStage) => {
        // When transitioning from GG back to COM, change the repo
        if (prevStage === Stage.GG) {
          setCurrentRepoIndex((prev) => (prev + 1) % repos.length)
        }
        return ((prevStage + 1) % 3) as Stage
      })
    }, 1500) // Reduced from 2000ms to 1500ms for faster overall animation

    return () => clearInterval(timer)
  }, [repos.length, mounted])

  if (!mounted) return null

  // Animation variants
  const comVariants = {
    initial: { opacity: 0, y: 10 },
    animate: {
      opacity: 1,
      y: 0,
      transition: { type: "spring", stiffness: 500, damping: 30 },
    },
    exit: {
      opacity: 0,
      y: -10,
      transition: { duration: 0.2 },
    },
  }

  const ggVariants = {
    initial: { opacity: 0, y: -50, rotateX: 90 },
    animate: {
      opacity: 1,
      y: 0,
      rotateX: 0,
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 20,
        mass: 1.2,
      },
    },
    exit: {
      opacity: 0,
      y: 30,
      transition: { duration: 0.3 },
    },
  }

  const repoVariants = {
    initial: { opacity: 0, x: -10 },
    animate: {
      opacity: 1,
      x: 0,
      transition: { type: "spring", stiffness: 500, damping: 30 },
    },
    exit: {
      opacity: 0,
      x: 10,
      transition: { duration: 0.2 },
    },
  }

  return (
    <div className="flex flex-col items-start gap-6 w-full max-w-3xl mx-auto">
      {/* Main URL display with fixed width container and left alignment */}
      <div className="flex flex-col items-start w-full px-6 py-4">
        <Link
          href={`/${repos[currentRepoIndex]}`}
          className="flex text-4xl md:text-5xl font-mono font-bold overflow-hidden cursor-pointer relative group mb-2"
          aria-label={`Visit github.gg/${repos[currentRepoIndex]}`}
        >
          {/* White underline animation for the URL */}
          <span className="absolute bottom-0 left-0 w-0 h-[2px] bg-white transition-all duration-300 group-hover:w-full"></span>

          {/* Static part */}
          <span className="text-white flex-shrink-0">github</span>

          {/* Container for domain with fixed width to prevent layout shifts */}
          <div className="w-[100px] md:w-[120px] relative h-[60px]">
            {/* Animated domain extension - only swap between .com and .gg */}
            <AnimatePresence mode="wait">
              {stage === Stage.GG ? (
                <motion.span
                  key="gg"
                  variants={ggVariants}
                  initial="initial"
                  animate="animate"
                  exit="exit"
                  className="text-primary absolute left-0"
                  style={{
                    display: "inline-block",
                    perspective: "1000px",
                    transformStyle: "preserve-3d",
                    padding: "0 2px 6px 0", // Increased bottom padding
                    marginBottom: "4px", // Increased bottom margin
                    width: "auto",
                    minWidth: "100%",
                    position: "relative", // Add relative positioning
                    top: "-2px", // Shift up slightly to prevent bottom cutoff
                  }}
                >
                  .gg
                </motion.span>
              ) : (
                <motion.span
                  key="com"
                  variants={comVariants}
                  initial="initial"
                  animate="animate"
                  exit="exit"
                  className={`${stage === Stage.COM_STRIKE ? "text-red-500" : "text-gray-400"} transition-colors duration-300 absolute left-0`}
                  data-strikethrough={stage === Stage.COM_STRIKE ? "true" : "false"}
                  style={{
                    padding: "0 2px 6px 0", // Increased bottom padding
                    marginBottom: "4px", // Increased bottom margin
                    position: "relative", // Add relative positioning
                    top: "-2px", // Shift up slightly to prevent bottom cutoff
                  }}
                >
                  <span
                    className={`${
                      stage === Stage.COM_STRIKE
                        ? "line-through decoration-red-500 decoration-[3px] text-red-500"
                        : "text-gray-400"
                    } transition-all duration-300 ease-in-out relative`}
                    style={{
                      textDecorationColor: stage === Stage.COM_STRIKE ? "#ef4444" : "transparent",
                    }}
                  >
                    .com
                  </span>
                </motion.span>
              )}
            </AnimatePresence>
          </div>

          {/* Repository path with overflow handling */}
          <div className="max-w-[300px] md:max-w-[400px] overflow-hidden">
            <AnimatePresence mode="wait">
              <motion.span
                key={currentRepoIndex}
                variants={repoVariants}
                initial="initial"
                animate="animate"
                exit="exit"
                className={`${stage === Stage.GG ? "text-green-300" : "text-gray-300"} whitespace-nowrap overflow-hidden text-ellipsis block`}
              >
                /{repos[currentRepoIndex]}
              </motion.span>
            </AnimatePresence>
          </div>
        </Link>
      </div>
    </div>
  )
}

----
components/user/user-profile.tsx
import Image from "next/image"
import { MapPinIcon, LinkIcon, CalendarIcon, BuildingIcon } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import Link from "next/link"

interface UserProfileProps {
  username: string
  userData: any
}

export default function UserProfile({ username, userData = {} }: UserProfileProps) {
  // Provide default empty object if userData is null or undefined
  const safeUserData = userData || {}

  return (
    <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
      {/* Sidebar */}
      <div className="md:col-span-1">
        <div className="flex flex-col items-center md:items-start">
          <div className="relative w-64 h-64 md:w-full md:h-auto aspect-square rounded-full overflow-hidden mb-4">
            <Image
              src={safeUserData.avatar_url || "/placeholder.svg?height=400&width=400&query=user avatar"}
              alt={username}
              fill
              className="object-cover"
            />
          </div>

          <h1 className="text-2xl font-bold mb-1">{safeUserData.name || username}</h1>
          <h2 className="text-xl text-muted-foreground mb-4">{username}</h2>

          <p className="text-sm text-muted-foreground mb-4 text-center md:text-left">
            {safeUserData.bio || "No bio provided."}
          </p>

          <Button className="w-full mb-4">Follow</Button>

          <div className="flex flex-col gap-2 text-sm w-full">
            {safeUserData.company && (
              <div className="flex items-center gap-2">
                <BuildingIcon className="h-4 w-4 text-muted-foreground" />
                <span>{safeUserData.company}</span>
              </div>
            )}

            {safeUserData.location && (
              <div className="flex items-center gap-2">
                <MapPinIcon className="h-4 w-4 text-muted-foreground" />
                <span>{safeUserData.location}</span>
              </div>
            )}

            {safeUserData.blog && (
              <div className="flex items-center gap-2">
                <LinkIcon className="h-4 w-4 text-muted-foreground" />
                <a
                  href={safeUserData.blog.startsWith("http") ? safeUserData.blog : `https://${safeUserData.blog}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-blue-500 hover:underline truncate"
                >
                  {safeUserData.blog.replace(/^https?:\/\//, "")}
                </a>
              </div>
            )}

            {safeUserData.created_at && (
              <div className="flex items-center gap-2">
                <CalendarIcon className="h-4 w-4 text-muted-foreground" />
                <span>
                  Joined{" "}
                  {new Date(safeUserData.created_at).toLocaleDateString("en-US", { month: "long", year: "numeric" })}
                </span>
              </div>
            )}
          </div>

          <div className="flex gap-4 mt-4 text-sm">
            <a href="#" className="flex items-center gap-1 hover:text-foreground">
              <span className="font-bold">{safeUserData.followers || 0}</span>
              <span className="text-muted-foreground">followers</span>
            </a>
            <a href="#" className="flex items-center gap-1 hover:text-foreground">
              <span className="font-bold">{safeUserData.following || 0}</span>
              <span className="text-muted-foreground">following</span>
            </a>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="md:col-span-3">
        <Tabs defaultValue="repositories">
          <TabsList className="w-full justify-start border-b rounded-none bg-transparent h-auto p-0">
            <TabsTrigger
              value="repositories"
              className="rounded-none border-b-2 border-transparent data-[state=active]:border-primary data-[state=active]:bg-transparent py-3 px-6"
            >
              Repositories
            </TabsTrigger>
            <TabsTrigger
              value="projects"
              className="rounded-none border-b-2 border-transparent data-[state=active]:border-primary data-[state=active]:bg-transparent py-3 px-6"
            >
              Projects
            </TabsTrigger>
            <TabsTrigger
              value="stars"
              className="rounded-none border-b-2 border-transparent data-[state=active]:border-primary data-[state=active]:bg-transparent py-3 px-6"
            >
              Stars
            </TabsTrigger>
          </TabsList>

          <TabsContent value="repositories" className="pt-6">
            <div className="space-y-4">
              {safeUserData.public_repos_data && safeUserData.public_repos_data.length > 0 ? (
                safeUserData.public_repos_data.map((repo: any) => (
                  <div key={repo.id} className="border rounded-lg p-4">
                    <div className="flex justify-between items-start mb-2">
                      <div>
                        <h3 className="font-semibold text-blue-500 hover:underline">
                          <Link href={`/${username}/${repo.name}`}>{repo.name}</Link>
                        </h3>
                        <p className="text-sm text-muted-foreground">
                          {repo.description || "No description provided."}
                        </p>
                      </div>
                      <Button variant="outline" size="sm">
                        Star
                      </Button>
                    </div>
                    <div className="flex items-center gap-4 text-xs text-muted-foreground">
                      {repo.language && (
                        <span className="flex items-center gap-1">
                          <span
                            className="h-3 w-3 rounded-full"
                            style={{
                              backgroundColor:
                                repo.language === "JavaScript"
                                  ? "#f1e05a"
                                  : repo.language === "TypeScript"
                                    ? "#3178c6"
                                    : repo.language === "Python"
                                      ? "#3572A5"
                                      : repo.language === "Java"
                                        ? "#b07219"
                                        : repo.language === "Go"
                                          ? "#00ADD8"
                                          : repo.language === "Rust"
                                            ? "#dea584"
                                            : repo.language === "C#"
                                              ? "#178600"
                                              : repo.language === "C++"
                                                ? "#f34b7d"
                                                : "#8257e5",
                            }}
                          ></span>
                          {repo.language}
                        </span>
                      )}
                      <span>Updated {new Date(repo.updated_at).toLocaleDateString()}</span>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-8 text-muted-foreground">No repositories found</div>
              )}
            </div>
          </TabsContent>

          <TabsContent value="projects" className="pt-6">
            <div className="text-center py-8 text-muted-foreground">No projects yet</div>
          </TabsContent>

          <TabsContent value="stars" className="pt-6">
            <div className="text-center py-8 text-muted-foreground">No starred repositories yet</div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}

----
components/video-ad-storyboard.tsx
import { Card, CardContent } from "@/components/ui/card"

export default function VideoAdStoryboard() {
  const scenes = [
    {
      duration: "0:00-0:03",
      description: "Developer looking frustrated staring at complex code on screen",
      voiceover: "Ever spent hours trying to understand someone else's code?",
      visualNotes: "Dark coding environment, close-up of confused expression",
    },
    {
      duration: "0:03-0:06",
      description: "Split screen showing GitHub repo URL transforming from github.com to github.gg",
      voiceover: "Just change github.com to github.gg...",
      visualNotes: "Animation of URL changing with typing sound effect",
    },
    {
      duration: "0:06-0:12",
      description: "Screen transforms to show AI-generated summary appearing alongside code",
      voiceover: "...and instantly get AI-powered insights that explain what the code does.",
      visualNotes: "Clean animation showing summary populating with highlighted code sections",
    },
    {
      duration: "0:12-0:18",
      description: "Quick demo of features: repository overview, file explanation, interactive chat",
      voiceover: "Understand repositories in minutes, not hours. Explore complex logic with AI assistance.",
      visualNotes: "Fast-paced sequence showing different features in action",
    },
    {
      duration: "0:18-0:22",
      description: "Developer looking satisfied, nodding with understanding",
      voiceover: "GitHub.GG helps developers at any level understand code faster and more efficiently.",
      visualNotes: "Show same developer now looking confident and productive",
    },
    {
      duration: "0:22-0:30",
      description: "GitHub.GG logo with tagline and call-to-action",
      voiceover: "Try GitHub.GG free today and transform how you understand code.",
      visualNotes: "Logo animation with 'Try Free' button prominent",
    },
  ]

  return (
    <div className="max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold mb-4">30-Second Video Ad Storyboard</h2>

      <div className="grid gap-4">
        {scenes.map((scene, index) => (
          <Card key={index} className="bg-black border-border">
            <CardContent className="p-6">
              <div className="flex flex-col md:flex-row gap-4">
                <div className="md:w-1/4 flex-shrink-0">
                  <div className="rounded bg-gray-800 h-32 flex items-center justify-center mb-2 border border-gray-700">
                    <span className="text-gray-400 text-sm">Scene {index + 1}</span>
                  </div>
                  <p className="text-sm text-muted-foreground">{scene.duration}</p>
                </div>

                <div className="md:w-3/4">
                  <h3 className="font-medium mb-2">Description:</h3>
                  <p className="text-muted-foreground mb-3">{scene.description}</p>

                  <h3 className="font-medium mb-2">Voiceover:</h3>
                  <p className="italic text-muted-foreground mb-3">"{scene.voiceover}"</p>

                  <h3 className="font-medium mb-2">Visual Notes:</h3>
                  <p className="text-sm text-muted-foreground">{scene.visualNotes}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}

----
components.json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
----
git2gpt.txt

----
hooks/use-copy-all-code.ts
import { useState } from 'react'
import { useSession } from 'next-auth/react'

export function useCopyAllCode() {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [content, setContent] = useState<string | null>(null)
  const { data: session } = useSession()

  const copyAllCode = async (owner: string, repo: string, branch?: string) => {
    setIsLoading(true)
    setError(null)
    
    try {
      const response = await fetch('/api/copy-all-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          owner,
          repo,
          branch,
        }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'Failed to copy all code')
      }

      setContent(data.content)
      return data.content
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred'
      setError(errorMessage)
      throw new Error(errorMessage)
    } finally {
      setIsLoading(false)
    }
  }

  return {
    copyAllCode,
    isLoading,
    error,
    content,
    isAuthenticated: !!session,
  }
}

export default useCopyAllCode

----
hooks/use-media-query.ts
"use client"

import { useState, useEffect } from "react"

/**
 * A custom hook that returns whether the current viewport matches the given media query
 * @param query - The media query to match against (e.g., '(max-width: 768px)')
 * @returns boolean - Whether the media query matches
 */
export function useMediaQuery(query: string): boolean {
  const [matches, setMatches] = useState(false)

  useEffect(() => {
    // Check if we're in a browser environment
    if (typeof window === "undefined") {
      return
    }

    const media = window.matchMedia(query)

    // Initial check
    setMatches(media.matches)


    // Update matches when the media query changes
    const listener = (event: MediaQueryListEvent) => {
      setMatches(event.matches)
    }

    // Add listener
    media.addEventListener("change", listener)


    // Clean up
    return () => {
      media.removeEventListener("change", listener)
    }
  }, [query])

  return matches
}

const MOBILE_BREAKPOINT = 768
const MOBILE_QUERY = `(max-width: ${MOBILE_BREAKPOINT - 1}px)`

/**
 * A custom hook that returns whether the current viewport is mobile-sized
 * @returns boolean - Whether the viewport is mobile-sized
 */
export function useIsMobile(): boolean {
  return useMediaQuery(MOBILE_QUERY)
}

----
hooks/use-toast.ts
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

----
lib/analytics.ts
type WindowWithGA = Window & {
  gtag: (
    command: string,
    action: string,
    params?: {
      page_path?: string
      [key: string]: any
    },
  ) => void
}

declare const window: WindowWithGA

// Google Analytics Measurement ID from environment variable
export const GA_MEASUREMENT_ID = process.env.NEXT_PUBLIC_GA_MEASUREMENT_ID

// Initialize Google Analytics
export const initGA = () => {
  if (typeof window !== "undefined" && !window.gtag && GA_MEASUREMENT_ID) {
    // Create script elements for Google Analytics
    const script1 = document.createElement("script")
    script1.async = true
    script1.src = `https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`

    const script2 = document.createElement("script")
    script2.innerHTML = `
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', '${GA_MEASUREMENT_ID}', {
        page_path: window.location.pathname,
      });
    `

    // Add scripts to document head
    document.head.appendChild(script1)
    document.head.appendChild(script2)
  }
}

// Track page views
export const pageview = (url: string) => {
  if (typeof window !== "undefined" && window.gtag && GA_MEASUREMENT_ID) {
    window.gtag("config", GA_MEASUREMENT_ID, {
      page_path: url,
    })
  }
}

// Track events
export const event = ({
  action,
  category,
  label,
  value,
}: {
  action: string
  category: string
  label?: string
  value?: number
}) => {
  if (typeof window !== "undefined" && window.gtag) {
    window.gtag("event", action, {
      event_category: category,
      event_label: label,
      value: value,
    })
  }
}

----
lib/browser-polyfills.ts
// This file provides browser-compatible polyfills for Node.js modules used by isomorphic-git

// Mock implementation of AsyncLock
class AsyncLock {
  acquire(key: string, fn: () => Promise<any>, cb?: (err: Error | null, result?: any) => void): Promise<any> {
    return Promise.resolve()
      .then(() => fn())
      .then((result) => {
        if (cb) cb(null, result)
        return result
      })
      .catch((err) => {
        if (cb) cb(err)
        throw err
      })
  }
}

// Export the polyfills
export const polyfills = {
  AsyncLock,
}

// Add polyfills to global scope in browser environment
if (typeof window !== "undefined") {
  ;(window as any).AsyncLock = AsyncLock
}

----
lib/github.ts
import { Octokit } from "@octokit/rest"
import JSZip from 'jszip'
import { Readable } from 'stream'

const PUBLIC_GITHUB_TOKEN = process.env.PUBLIC_GITHUB_TOKEN || ""

// File processing options
export interface FileProcessingOptions {
  /** Maximum file size in bytes (default: 1MB) */
  maxFileSize?: number
  /** Maximum number of files to process (default: 1000) */
  maxFiles?: number
  /** File extensions to include (if specified, only these will be included) */
  includeExtensions?: string[]
  /** File paths to exclude (supports glob patterns) */
  excludePaths?: string[]
  /** Whether to include file content (default: true) */
  includeContent?: boolean
}

// Default file processing options
const DEFAULT_OPTIONS: Required<FileProcessingOptions> = {
  maxFileSize: 1024 * 1024, // 1MB
  maxFiles: 1000,
  includeExtensions: [],
  excludePaths: ['**/node_modules/**', '**/.git/**', '**/__MACOSX/**', '**/.*'],
  includeContent: true
}

// Custom error class for GitHub service errors
export class GitHubServiceError extends Error {
  statusCode: number
  
  constructor(message: string, statusCode: number = 500) {
    super(message)
    this.name = 'GitHubServiceError'
    this.statusCode = statusCode
    Object.setPrototypeOf(this, GitHubServiceError.prototype)
  }
}

// Helper function to check if a file should be included based on options
function shouldIncludeFile(relativePath: string, options: FileProcessingOptions = {}): boolean {
  if (!relativePath) return false
  
  const mergedOptions = { ...DEFAULT_OPTIONS, ...options }
  
  // Check if file is in excluded paths
  if (mergedOptions.excludePaths?.some(pattern => 
    minimatch(relativePath, pattern, { matchBase: true })
  )) {
    return false
  }
  
  // Check file extension
  if (mergedOptions.includeExtensions?.length > 0) {
    const ext = relativePath.split('.').pop()?.toLowerCase()
    if (!ext || !mergedOptions.includeExtensions.includes(`.${ext}`)) {
      return false
    }
  }
  
  return true
}

// Helper function to handle the GitHub API response and convert it to a buffer
async function streamToBuffer(response: Response): Promise<Buffer> {
  if (!response.body) {
    throw new Error('No response body')
  }
  
  const reader = response.body.getReader()
  const chunks: Uint8Array[] = []
  let totalLength = 0
  
  while (true) {
    const { done, value } = await reader.read()
    
    if (done) {
      break
    }
    
    chunks.push(value)
    totalLength += value.length
  }
  
  // Combine all chunks into a single Uint8Array
  const result = new Uint8Array(totalLength)
  let offset = 0
  for (const chunk of chunks) {
    result.set(chunk, offset)
    offset += chunk.length
  }
  
  return Buffer.from(result.buffer)
}

// Create an Octokit instance with the public token
export function createOctokit(token?: string): Octokit {
  return new Octokit({
    auth: token || PUBLIC_GITHUB_TOKEN,
    request: {
      timeout: 10000, // 10 second timeout
    },
  })
}

export async function getUserData(user: string, accessToken?: string) {
  // Validate username format to avoid unnecessary API calls
  if (!user || !isValidGitHubUsername(user)) {
    throw new Error("Invalid GitHub username format")
  }

  try {
    const octokit = createOctokit(accessToken)
    const { data } = await octokit.rest.users.getByUsername({
      username: user,
    })

    // Fetch public repos data
    const public_repos_data = await getPublicRepos(user, accessToken)

    return {
      ...data,
      public_repos_data,
    }
  } catch (error) {
    console.error("Error fetching user data:", error)
    return null
  }
}

// Helper function to validate GitHub username format
function isValidGitHubUsername(username: string): boolean {
  // GitHub usernames can only contain alphanumeric characters and hyphens
  // They cannot have multiple consecutive hyphens
  // They cannot begin or end with a hyphen
  // They can be up to 39 characters long
  const validUsernameRegex = /^[a-zA-Z0-9](?:[a-zA-Z0-9]|-(?=[a-zA-Z0-9])){0,38}$/
  return validUsernameRegex.test(username)
}

async function getPublicRepos(user: string, accessToken?: string) {
  try {
    const octokit = createOctokit(accessToken)
    const { data } = await octokit.rest.repos.listForUser({
      username: user,
      type: "owner",
      sort: "updated",
      direction: "desc",
      per_page: 5,
    })
    return data
  } catch (error) {
    console.error("Error fetching public repos:", error)
    return []
  }
}

export async function getRepoData(user: string, repo: string) {
  try {
    const octokit = createOctokit()
    const { data } = await octokit.rest.repos.get({
      owner: user,
      repo: repo,
    })
    return data
  } catch (error) {
    console.error("Error fetching repo data:", error)
    throw error
  }
}

export async function getRepoIssues(
  username: string,
  reponame: string,
  options: { page?: number; state?: "open" | "closed" | "all" } = {},
) {
  const { page = 1, state = "open" } = options

  try {
    const response = await fetch(
      `https://api.github.com/repos/${username}/${reponame}/issues?page=${page}&state=${state}&per_page=10`,
      {
        headers: {
          Accept: "application/vnd.github.v3+json",
          ...(process.env.GITHUB_TOKEN ? { Authorization: `token ${process.env.GITHUB_TOKEN}` } : {}),
        },
        next: { revalidate: 60 }, // Cache for 60 seconds
      },
    )

    if (!response.ok) {
      throw new Error(`Failed to fetch issues: ${response.status}`)
    }

    return await response.json()
  } catch (error) {
    console.error("Error fetching repo issues:", error)
    return []
  }
}

export async function getIssueData(username: string, reponame: string, issueId: string) {
  try {
    const response = await fetch(`https://api.github.com/repos/${username}/${reponame}/issues/${issueId}`, {
      headers: {
        Accept: "application/vnd.github.v3+json",
        ...(process.env.GITHUB_TOKEN ? { Authorization: `token ${process.env.GITHUB_TOKEN}` } : {}),
      },
      next: { revalidate: 60 }, // Cache for 60 seconds
    })

    if (!response.ok) {
      throw new Error(`Failed to fetch issue: ${response.status}`)
    }

    return await response.json()
  } catch (error) {
    console.error("Error fetching issue data:", error)
    throw error
  }
}

export async function getAllRepoFiles(
  user: string,
  repo: string,
  branch?: string,
  accessToken?: string,
  options: FileProcessingOptions = {}
): Promise<{ 
  files: Array<{
    path: string;
    name: string;
    size: number;
    type: 'file' | 'dir' | 'symlink';
    content?: string;
    encoding?: string;
    tooLarge?: boolean;
  }>; 
  branch: string 
}> {
  try {
    const octokit = createOctokit(accessToken)
    const mergedOptions = { ...DEFAULT_OPTIONS, ...options }

    // Get repository metadata to determine the default branch if not provided
    const { data: repoData } = await octokit.rest.repos.get({
      owner: user,
      repo: repo,
    })
    
    const branchToUse = branch || repoData.default_branch
    if (!branchToUse) {
      throw new GitHubServiceError("Could not determine default branch for repository.", 400)
    }

    // Try to fetch via zipball first (more efficient)
    try {
      const response = await octokit.repos.downloadZipballArchive({
        owner: user,
        repo,
        ref: branchToUse,
        request: {
          // @ts-ignore - The type definition is missing this property
          timeout: 30000 // 30 second timeout
        }
      })

      const zip = new JSZip()
      await zip.loadAsync(response.data as ArrayBuffer)

      const files: RepoFile[] = []
      const promises: Promise<void>[] = []
      const rootDir = Object.keys(zip.files)[0] || ''
      let fileCount = 0

      // Process files in parallel
      for (const [relativePath, file] of Object.entries(zip.files)) {
        if (fileCount >= mergedOptions.maxFiles) break
        if (file.dir) continue
        
        // The path in zip is like 'owner-repo-sha12345/path/to/file.txt'
        // We need to strip the root directory
        const correctedPath = relativePath.startsWith(rootDir) 
          ? relativePath.substring(rootDir.length)
          : relativePath

        if (!correctedPath || !shouldIncludeFile(correctedPath, mergedOptions)) {
          continue
        }

        fileCount++
        const promise = (async () => {
          try {
            if (mergedOptions.includeContent) {
              const content = await file.async('string')
              if (content.length > mergedOptions.maxFileSize) {
                files.push({
                  path: correctedPath,
                  name: correctedPath.split('/').pop() || '',
                  size: content.length,
                  type: 'file',
                  tooLarge: true,
                  content: ''
                })
                return
              }
              
              files.push({
                path: correctedPath,
                name: correctedPath.split('/').pop() || '',
                content: content,
                size: content.length,
                type: 'file',
                encoding: 'utf-8'
              })
            } else {
              files.push({
                path: correctedPath,
                name: correctedPath.split('/').pop() || '',
                size: 0,
                type: 'file',
                encoding: 'utf-8'
              })
            }
          } catch (e) {
            console.warn(`Could not process file ${correctedPath}:`, e)
          }
        })()
        promises.push(promise)

        if (promises.length >= 10) { // Process in batches of 10
          await Promise.all(promises.splice(0, promises.length))
        }
      }

      // Wait for any remaining promises
      await Promise.all(promises)

      // Sort files by path for consistent ordering
      files.sort((a, b) => a.path.localeCompare(b.path))

      return { files, branch: branchToUse }
    } catch (zipError) {
      console.warn('Zipball download failed, falling back to recursive tree API:', zipError)
      
      // Fallback to recursive tree API
      try {
        const { data: treeData } = await octokit.rest.git.getTree({
          owner: user,
          repo: repo,
          tree_sha: branchToUse,
          recursive: 'true',
        })

        const files: Array<{
          path: string;
          name: string;
          size: number;
          type: 'file' | 'dir' | 'symlink';
          content?: string;
          encoding?: string;
          tooLarge?: boolean;
        }> = []
        
        for (const item of treeData.tree) {
          if (files.length >= mergedOptions.maxFiles) break
          if (item.type !== 'blob' || !item.path) continue
          
          const path = item.path
          if (!shouldIncludeFile(path, mergedOptions)) continue
          
          files.push({
            path,
            name: path.split('/').pop() || '',
            size: item.size || 0,
            type: 'file',
            content: ''
          })
        }
        
        return { files, branch: branchToUse }
      } catch (treeError) {
        console.error('Recursive tree API also failed:', treeError)
        throw new GitHubServiceError(
          'Failed to fetch repository contents using both zipball and tree API methods.',
          500
        )
      }
    }
  } catch (error) {
    console.error('Error in getAllRepoFiles:', error)
    if (error instanceof GitHubServiceError) throw error
    throw new GitHubServiceError(
      error instanceof Error ? error.message : 'Failed to fetch repository contents',
      500
    )
  }
}

export async function getCommitData(user: string, repo: string, sha: string) {
  try {
    const octokit = createOctokit()
    const { data } = await octokit.rest.git.getCommit({
      owner: user,
      repo: repo,
      commit_sha: sha,
    })
    return data
  } catch (error) {
    console.error("Error fetching commit data:", error)
    throw error
  }
}

export async function getCompareData(user: string, repo: string, base: string, head: string) {
  try {
    const octokit = createOctokit()
    const { data } = await octokit.rest.repos.compareCommits({
      owner: user,
      repo: repo,
      base: base,
      head: head,
    })
    return data
  } catch (error) {
    console.error("Error fetching compare data:", error)
    throw error
  }
}

export async function getFileTreeData(user: string, repo: string, branch: string, path: string) {
  try {
    const octokit = createOctokit()
    const { data } = await octokit.rest.git.getTree({
      owner: user,
      repo: repo,
      tree_sha: branch,
      recursive: "false",
    })

    const treeData = data.tree.map((item) => ({
      path: path ? `${path}/${item.path}` : item.path,
      name: item.path,
      type: item.type,
    }))

    return treeData
  } catch (error) {
    console.error("Error fetching file tree data:", error)
    return []
  }
}

export async function getFileContent(user: string, repo: string, branch: string, path: string) {
  try {
    const octokit = createOctokit()
    const { data } = await octokit.rest.repos.getContent({
      owner: user,
      repo: repo,
      path: path,
      ref: branch,
    })

    if (Array.isArray(data)) {
      throw new Error("Expected a file, but got a directory")
    }

    if (data.type !== "file") {
      throw new Error("Expected a file, but got a different type")
    }

    // Get the filename and extension
    const filename = path.split("/").pop() || ""

    // Always attempt to decode as text first
    try {
      const content = Buffer.from(data.content, "base64").toString("utf-8")

      // Check if content appears to be binary by looking for null bytes or high concentration of non-printable characters
      const isBinary = content.includes("\0") || countNonPrintableChars(content) / content.length > 0.1

      if (isBinary) {
        return {
          name: data.name,
          path: data.path,
          size: data.size,
          content: "Binary file not shown",
          isBinary: true,
        }
      }

      return {
        name: data.name,
        path: data.path,
        size: data.size,
        content: content,
        isBinary: false,
      }
    } catch (e) {
      // If decoding fails, treat as binary
      console.warn(`Failed to decode ${path} as text:`, e)
      return {
        name: data.name,
        path: data.path,
        size: data.size,
        content: "Binary file not shown",
        isBinary: true,
      }
    }
  } catch (error) {
    console.error("Error fetching file content:", error)
    throw error
  }
}

// Helper function to count non-printable characters
function countNonPrintableChars(str: string): number {
  let count = 0
  for (let i = 0; i < str.length; i++) {
    const code = str.charCodeAt(i)
    // Count control characters (except common whitespace) and other non-printable chars
    if ((code < 32 && ![9, 10, 13].includes(code)) || (code >= 127 && code <= 159)) {
      count++
    }
  }
  return count
}

// Note: getRepositoryAsText and FileContent interface have been removed in favor of RepoArchiveService

----
lib/mock/search-data.ts
import type { SearchResult } from "../types/search"

export const mockSearchResults: SearchResult[] = [
  {
    id: "1",
    type: "repository",
    title: "facebook/react",
    description: "A declarative, efficient, and flexible JavaScript library for building user interfaces.",
    url: "/facebook/react",
    owner: "facebook",
    avatar: "/social-network-connections.png",
    stars: 203456,
    language: "JavaScript",
    updated: "2023-04-15",
    matchingText: "React is a JavaScript library for building user interfaces",
  },
  {
    id: "2",
    type: "repository",
    title: "vercel/next.js",
    description: "The React Framework for the Web",
    url: "/vercel/next.js",
    owner: "vercel",
    avatar: "/modern-web-deployment.png",
    stars: 98765,
    language: "TypeScript",
    updated: "2023-04-18",
    matchingText: "Next.js gives you the best developer experience",
  },
  {
    id: "3",
    type: "repository",
    title: "tinyplex/tinybase",
    description: "The reactive data store for local-first apps",
    url: "/tinyplex/tinybase",
    owner: "tinyplex",
    avatar: "/abstract-tinyplex.png",
    stars: 4321,
    language: "TypeScript",
    updated: "2023-04-10",
    matchingText: "TinyBase is a reactive data store for local-first apps",
  },
  {
    id: "4",
    type: "user",
    title: "gaearon",
    description: "Working on @reactjs. Co-author of Redux and Create React App. Building tools for humans.",
    url: "/gaearon",
    owner: "gaearon",
    avatar: "/thoughtful-developer.png",
    matchingText: "Dan Abramov - Working on React",
  },
  {
    id: "5",
    type: "issue",
    title: "Memory leak in useEffect cleanup",
    description: "Issue #23456 opened 2 days ago by user123",
    url: "/facebook/react/issues/23456",
    owner: "facebook/react",
    avatar: "/tangled-threads.png",
    updated: "2023-04-17",
    matchingText: "When using useEffect with async operations, there's a memory leak",
  },
]

export function searchMockData(query: string): SearchResult[] {
  if (!query || query.trim() === "") return []

  const normalizedQuery = query.toLowerCase().trim()

  return mockSearchResults.filter((result) => {
    return (
      result.title.toLowerCase().includes(normalizedQuery) ||
      result.description.toLowerCase().includes(normalizedQuery) ||
      (result.matchingText && result.matchingText.toLowerCase().includes(normalizedQuery)) ||
      (result.language && result.language.toLowerCase().includes(normalizedQuery)) ||
      result.owner.toLowerCase().includes(normalizedQuery)
    )
  })
}

----
lib/repo-analysis-service.ts
import { analyzeRepositoryWithSocket } from "./socket-api-service"
import { Octokit } from "@octokit/rest"
import { createOctokit, getAllRepoFiles } from "./github"

// Type definitions for repository analysis

// Base interface for all repository items
interface RepoItemBase {
  path: string
  name: string
  size: number
  sha: string
  type: string
}

// File type
interface RepoFile extends RepoItemBase {
  type: 'file'
}

// Directory type
interface RepoDirectory extends RepoItemBase {
  type: 'dir'
}

// Symlink type
interface RepoSymlink extends RepoItemBase {
  type: 'symlink'
  target?: string
}

// Submodule type
interface RepoSubmodule extends RepoItemBase {
  type: 'submodule'
  submoduleUrl?: string
}

// Union type for all possible repository items
export type RepoFileItem = RepoFile | RepoDirectory | RepoSymlink | RepoSubmodule

// Type for GitHub API language data
type GitHubLanguages = Record<string, number>

export interface RepoAnalysisResult {
  files: RepoFileItem[]
  fileCount: number
  directoryCount: number
  languages: GitHubLanguages
  readme?: string
  analysisTimeMs: number
  apiRequestsUsed: number
  isPublic: boolean
  security?: any
  totalSize: number
  mainLanguage: string
}

export async function analyzeRepository(
  owner: string,
  repo: string,
  accessToken?: string,
): Promise<RepoAnalysisResult> {
  const startTime = Date.now()
  const files: RepoFileItem[] = []
  let readme: string | undefined
  let isPublic = true
  let totalSize = 0
  let mainLanguage = ""

  // Initialize Octokit and await the instance
  const octokit = await createOctokit(accessToken)

  try {
    // Get repository metadata to check visibility
    const { data: repoData } = await octokit.repos.get({ owner, repo })
    isPublic = !repoData.private
    
    // If the repository is private and no access token is provided, throw an error
    if (!isPublic && !accessToken) {
      throw new Error("Authentication required to access private repositories")
    }

    // Get all files in the repository using the efficient recursive tree API
    const { files: repoFiles } = await getAllRepoFiles(owner, repo)
    
    // Convert the file list to our format
    files.push(...repoFiles.map(file => ({
      path: file.path,
      name: file.name,
      size: file.size,
      type: 'file' as const,
      sha: file.sha || '', // Use the SHA if available, otherwise empty string
    })))

    // Try to find and fetch the README
    const readmeFile = repoFiles.find(file => 
      file.name.match(/^readme(\.(md|txt|markdown))?$/i)
    )
    
    if (readmeFile) {
      try {
        const { content } = await getFileContent(owner, repo, readmeFile.path, accessToken)
        readme = content
      } catch (error) {
        console.error("Error fetching README content:", error)
      }
    }

    // Get languages used in the repository
    const { data: languagesData } = await octokit.repos.listLanguages({
      owner,
      repo,
    })

    // Calculate total size of all files
    totalSize = files.reduce((sum, file) => sum + (file.size || 0), 0)


    // Get the main language (language with most bytes of code)
    const languages: GitHubLanguages = languagesData || {}
    const mainLangEntry = Object.entries(languages).reduce<{ lang: string; bytes: number }>(
      (max, [lang, bytes]) => {
        const currentBytes = typeof bytes === 'number' ? bytes : 0
        return currentBytes > max.bytes ? { lang, bytes: currentBytes } : max
      },
      { lang: "", bytes: 0 }
    )
    mainLanguage = mainLangEntry.lang

    const endTime = Date.now()
    const analysisTimeMs = endTime - startTime

    const result: RepoAnalysisResult = {
      files,
      fileCount: files.length,
      directoryCount: 0, // Not tracking directories separately anymore
      languages,
      readme,
      analysisTimeMs,
      apiRequestsUsed: 0, // Not tracking this anymore
      isPublic,
      totalSize,
      mainLanguage,
    }

    // Add Socket security analysis if API key is configured
    if (process.env.NEXT_PUBLIC_SOCKET_API_KEY) {
      try {
        const socketAnalysis = await analyzeRepositoryWithSocket(owner, repo)
        result.security = socketAnalysis
      } catch (error) {
        console.error("Error running Socket security analysis:", error)
      }
    }

    return result
  } catch (error) {
    console.error("Error analyzing repository:", error)
    throw error
  }
}

// Helper function to get file content
export async function getFileContent(
  owner: string,
  repo: string,
  path: string,
  accessToken?: string,
): Promise<{ content: string; isBinary: boolean; size: number }> {
  const octokit = await createOctokit(accessToken)
  
  try {
    // First try to get the content as text
    const response = await octokit.request({
      method: "GET",
      url: `/repos/${owner}/${repo}/contents/${encodeURIComponent(path)}`,
      headers: {
        Accept: "application/vnd.github.v3.raw",
      },
    })

    return {
      content: response.data as unknown as string,
      isBinary: false,
      size: (response.data as any).size || 0,
    }
  } catch (error: any) {
    if (error.status === 403 && error.response?.headers?.["x-ratelimit-remaining"] === "0") {
      throw new Error(
        `GitHub API rate limit exceeded. Please try again later or provide a GitHub token.`
      )
    }
    
    // If we get here, the content might be binary
    throw new Error(`Could not fetch file content: ${path} - ${error.message}`)
  }
}

// Helper function to detect binary content
function detectBinaryContent(content: string): boolean {
  // Check for null bytes (a clear indicator of binary content)
  if (content.includes("\0")) {
    return true
  }

  // Count non-printable characters
  let nonPrintableCount = 0
  const sampleSize = Math.min(content.length, 1000) // Check first 1000 chars

  for (let i = 0; i < sampleSize; i++) {
    const code = content.charCodeAt(i)
    // Count control characters (except common whitespace) and other non-printable chars
    if ((code < 32 && ![9, 10, 13].includes(code)) || (code >= 127 && code <= 159)) {
      nonPrintableCount++
    }
  }

  // If more than 5% of characters are non-printable, consider it binary
  return nonPrintableCount / sampleSize > 0.05
}

----
lib/socket-api-service.ts
// Socket API service for security analysis
// Based on https://docs.socket.dev/reference/introduction-to-socket-api

export interface SocketVulnerability {
  id: string
  title: string
  severity: "critical" | "high" | "medium" | "low"
  package: string
  currentVersion: string
  patchedVersion: string
  description: string
  createdAt: string
  cve?: string
}

export interface SocketSecurityScore {
  score: number // 0-100
  grade: "A" | "B" | "C" | "D" | "F"
  issues: {
    critical: number
    high: number
    medium: number
    low: number
  }
}

export interface SocketDependency {
  name: string
  version: string
  latestVersion: string
  securityScore: SocketSecurityScore
  vulnerabilities: SocketVulnerability[]
  license: string
}

export interface SocketRepoAnalysis {
  overallScore: SocketSecurityScore
  dependencies: SocketDependency[]
  vulnerabilities: SocketVulnerability[]
  securityPolicies: {
    hasSecurityPolicy: boolean
    hasDependabotEnabled: boolean
    hasCodeScanning: boolean
    hasSecretScanning: boolean
  }
}

// This would be your actual Socket API key in a real implementation
const SOCKET_API_KEY = process.env.SOCKET_API_KEY || ""

export async function analyzeRepositoryWithSocket(owner: string, repo: string): Promise<SocketRepoAnalysis> {
  // In a real implementation, this would make actual API calls to Socket
  // For now, we'll return mock data that matches the Socket API structure

  // This simulates a Socket API call
  // In production, you would use:
  // const response = await fetch('https://api.socket.dev/v1/repo-analysis', {
  //   method: 'POST',
  //   headers: {
  //     'Authorization': `Bearer ${SOCKET_API_KEY}`,
  //     'Content-Type': 'application/json'
  //   },
  //   body: JSON.stringify({ owner, repo })
  // });
  // return await response.json();

  // Mock data for demonstration
  return {
    overallScore: {
      score: 78,
      grade: "B",
      issues: {
        critical: 0,
        high: 1,
        medium: 2,
        low: 3,
      },
    },
    dependencies: [
      {
        name: "lodash",
        version: "4.17.15",
        latestVersion: "4.17.21",
        securityScore: {
          score: 65,
          grade: "C",
          issues: {
            critical: 0,
            high: 1,
            medium: 0,
            low: 0,
          },
        },
        vulnerabilities: [
          {
            id: "CVE-2021-23337",
            title: "Prototype Pollution in Lodash",
            severity: "high",
            package: "lodash",
            currentVersion: "4.17.15",
            patchedVersion: "4.17.21",
            description:
              "Prototype pollution vulnerability in lodash before 4.17.21 allows attackers to modify object properties via the set, setWith, and update functions.",
            createdAt: "2021-02-15T00:00:00Z",
            cve: "CVE-2021-23337",
          },
        ],
        license: "MIT",
      },
      {
        name: "express",
        version: "4.17.1",
        latestVersion: "4.17.3",
        securityScore: {
          score: 72,
          grade: "C",
          issues: {
            critical: 0,
            high: 0,
            medium: 1,
            low: 1,
          },
        },
        vulnerabilities: [
          {
            id: "CVE-2022-24999",
            title: "Regular Expression Denial of Service in Express",
            severity: "medium",
            package: "express",
            currentVersion: "4.17.1",
            patchedVersion: "4.17.3",
            description:
              "The express package before 4.17.3 for Node.js has a Regular Expression Denial of Service vulnerability via the req.fresh property.",
            createdAt: "2022-03-10T00:00:00Z",
            cve: "CVE-2022-24999",
          },
        ],
        license: "MIT",
      },
    ],
    vulnerabilities: [
      {
        id: "CVE-2021-23337",
        title: "Prototype Pollution in Lodash",
        severity: "high",
        package: "lodash",
        currentVersion: "4.17.15",
        patchedVersion: "4.17.21",
        description:
          "Prototype pollution vulnerability in lodash before 4.17.21 allows attackers to modify object properties via the set, setWith, and update functions.",
        createdAt: "2021-02-15T00:00:00Z",
        cve: "CVE-2021-23337",
      },
      {
        id: "CVE-2022-24999",
        title: "Regular Expression Denial of Service in Express",
        severity: "medium",
        package: "express",
        currentVersion: "4.17.1",
        patchedVersion: "4.17.3",
        description:
          "The express package before 4.17.3 for Node.js has a Regular Expression Denial of Service vulnerability via the req.fresh property.",
        createdAt: "2022-03-10T00:00:00Z",
        cve: "CVE-2022-24999",
      },
    ],
    securityPolicies: {
      hasSecurityPolicy: true,
      hasDependabotEnabled: true,
      hasCodeScanning: false,
      hasSecretScanning: true,
    },
  }
}

----
lib/types/search.ts
export interface SearchResult {
  id: string
  type: "repository" | "user" | "issue" | "pull-request" | "discussion"
  title: string
  description: string
  url: string
  owner: string
  avatar: string
  stars?: number
  language?: string
  updated?: string
  matchingText?: string
}

export interface SearchResponse {
  results: SearchResult[]
  totalCount: number
  page: number
  pageSize: number
  query: string
}

----
lib/types/settings.ts
export interface WebhookConfig {
  url: string
  secret?: string
  events: string[]
  active: boolean
}

export interface BotConfig {
  enabled: boolean
  type: "code-analysis" | "security-scanner" | "dependency-updater" | "custom"
  config: string
}

export interface AnalysisToolConfig {
  enabled: boolean
  name: string
  description: string
}

export interface CodeAnalysisConfig {
  enabled: boolean
  tools: AnalysisToolConfig[]
  targetBranches: string[]
  runOn: "all-prs" | "main-only" | "all-branches" | "tagged-releases"
}

export interface SecurityPolicy {
  requireReviews: boolean
  requireStatusChecks: boolean
  requireSignedCommits: boolean
}

export interface RepoSettings {
  webhooks: WebhookConfig[]
  bots: BotConfig[]
  codeAnalysis: CodeAnalysisConfig
  securityPolicies: SecurityPolicy
}

----
lib/utils.ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

----
middleware.ts
import { NextResponse } from "next/server"
import type { NextRequest } from "next/server"

// List of reserved paths that should not be treated as usernames
const RESERVED_PATHS = ["search", "login", "signup", "explore", "settings", "notifications", "docs"]

export function middleware(request: NextRequest) {
  const url = request.nextUrl.clone()
  const pathname = url.pathname

  // Check if the path is directly under the root and is a reserved path
  const segments = pathname.split("/").filter(Boolean)

  // If this is a login path, let it pass through without any modifications
  if (segments[0] === "login") {
    return NextResponse.next()
  }

  // If this is a docs path, let it pass through without any modifications
  if (segments[0] === "docs") {
    return NextResponse.next()
  }

  // For other reserved paths
  if (segments.length === 1 && RESERVED_PATHS.includes(segments[0])) {
    return NextResponse.next()
  }

  // Handle user and repo routes
  if (segments.length >= 1) {
    // This could be a username or a username/repo path
    return NextResponse.next()
  }

  return NextResponse.next()
}

export const config = {
  matcher: [
    // Match all paths except those starting with api, _next, static, etc.
    "/((?!api|_next/static|_next/image|favicon.ico).*)",
  ],
}

----
next.config.mjs
let userConfig = undefined
try {
  // try to import ESM first
  userConfig = await import('./v0-user-next.config.mjs')
} catch (e) {
  try {
    // fallback to CJS import
    userConfig = await import("./v0-user-next.config");
  } catch (innerError) {
    // ignore error
  }
}

/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
  },
  experimental: {
    webpackBuildWorker: true,
    parallelServerBuildTraces: true,
    parallelServerCompiles: true,
  },
  webpack: (config, { isServer }) => {
    // Only apply these fallbacks in the browser build
    if (!isServer) {
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
        path: false,
        os: false,
        crypto: false,
        stream: false,
        'async-lock': false, // Provide an empty fallback for async-lock
      };
    }
    return config;
  },
}

if (userConfig) {
  // ESM imports will have a "default" property
  const config = userConfig.default || userConfig

  for (const key in config) {
    if (
      typeof nextConfig[key] === 'object' &&
      !Array.isArray(nextConfig[key])
    ) {
      nextConfig[key] = {
        ...nextConfig[key],
        ...config[key],
      }
    } else {
      nextConfig[key] = config[key]
    }
  }
}

export default nextConfig

----
package.json
{
  "name": "github.gg",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "bun --bun next dev",
    "build": "bun --bun next build",
    "start": "bun --bun next start",
    "lint": "bun --bun next lint",
    "test": "bun test",
    "test:auth": "bun run scripts/test-auth.ts",
    "clean": "rm -rf .next node_modules",
    "reset": "bun clean && bun install",
    "format": "bunx prettier --write .",
    "check-types": "bun tsc --noEmit"
  },
  "dependencies": {
    "@auth/core": "^0.39.1",
    "@emotion/is-prop-valid": "latest",
    "@hookform/resolvers": "^3.9.1",
    "@octokit/rest": "^22.0.0",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "latest",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "crypto": "latest",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "framer-motion": "latest",
    "input-otp": "1.4.1",
    "jszip": "latest",
    "lucide-react": "^0.454.0",
    "mermaid": "latest",
    "next": "^15.2.4",
    "next-auth": "^4.24.11",
    "next-themes": "^0.4.4",
    "react": "^19.0.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "react-spring": "latest",
    "recharts": "latest",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.6",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/bun": "latest",
    "@types/jest": "^29.5.14",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/supertest": "^6.0.3",
    "postcss": "^8",
    "supertest": "^7.1.1",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}

----
package.json.addition
{
  "dependencies": {
    "@radix-ui/react-slider": "^1.1.2"
  }
}

----
postcss.config.mjs
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

----
public/placeholder-logo.png
ÔøΩPNG

   
IHDR      ÔøΩ   MÔøΩÔøΩ   0PLTE                                                Z?   tRNS ÔøΩ ÔøΩ@ÔøΩÔøΩ`P0pÔøΩÔøΩÔøΩw  ÔøΩIDATxÔøΩÔøΩÿΩJ3QÔøΩ7'ÔøΩÔøΩ%ÔøΩ|?ÔøΩ ÔøΩÔøΩÔøΩEÔøΩlÔøΩ7ÔøΩÔøΩÔøΩ(XÔøΩDÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩw`ÔøΩÔøΩÔøΩÔøΩ[ÔøΩ*tÔøΩÔøΩÔøΩÔøΩDÔøΩÔøΩÔøΩmDÔøΩ}ÔøΩÔøΩ4;;ÔøΩDDDDDDDDDDDD_ÔøΩ_ƒ∞ÔøΩÔøΩ!ÔøΩyÔøΩ`ÔøΩ_ÔøΩ:ÔøΩÔøΩ;ƒªÔøΩ'|ÔøΩ	ÔøΩÔøΩ;.I"ÔøΩÔøΩÔøΩÔøΩ3*5ÔøΩÔøΩÔøΩÔøΩJÔøΩ1ÔøΩÔøΩ ÔøΩTÔøΩÔøΩFIÔøΩÔøΩ	ÔøΩÔøΩ=ÔøΩÔøΩ3‹ÉÔøΩ2~ÔøΩbÔøΩÔøΩÔøΩ0ÔøΩÔøΩU9\ÔøΩÔøΩ]ÔøΩ4ÔøΩ#w0ÔøΩÔøΩGt\&1ÔøΩ?21,ÔøΩÔøΩÔøΩo!eÔøΩmÔøΩÔøΩƒªRÔøΩÔøΩÔøΩÔøΩÔøΩ5ÔøΩÔøΩ ÿΩAJÔøΩ9ÔøΩÔøΩR)ÔøΩ5ÔøΩ0.FFASa«ÉÔøΩTÔøΩ#|ÔøΩKÔøΩÔøΩÔøΩIÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ1ÔøΩ
MÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩN"ÔøΩÔøΩ$ÔøΩÔøΩÔøΩÔøΩGÔøΩVÔøΩTÔøΩÔøΩÔøΩT^^ÔøΩÔøΩAÔøΩ$SÔøΩÔøΩh(ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩG]co"J◊∏^^ÔøΩ'ÔøΩ=ÔøΩÔøΩÔøΩ%ÔøΩ	ÔøΩWÔøΩ6–´ÔøΩWÔøΩÔøΩwÔøΩaÔøΩﬂá*ÔøΩ^^ÔøΩYGÔøΩcÔøΩÔøΩÔøΩ`'FÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ^ 5_ÔøΩ,ÔøΩSÔøΩ%    IENDÔøΩB`ÔøΩ
----
public/placeholder-logo.svg
<svg xmlns="http://www.w3.org/2000/svg" width="215" height="48" fill="none"><path fill="#000" d="M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z"/><path fill="#171717" fill-rule="evenodd" d="m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z" clip-rule="evenodd"/></svg>
----
public/placeholder-user.jpg
ÔøΩÔøΩÔøΩÔøΩ JFIF      ÔøΩÔøΩ C 
	
		
$ &%# #"(-90(*6+"#2D26;=@@@&0FKE>J9?@=ÔøΩÔøΩ C
=)#)==================================================ÔøΩÔøΩ  ÔøΩ ÔøΩ ÔøΩÔøΩ             ÔøΩÔøΩ                 ÔøΩÔøΩ     ŸÄ                                                           |ÔøΩr4ÔøΩ-ÔøΩ       Ãà"xÔøΩ'ÔøΩ0      ÔøΩ√çÔøΩÔøΩ8ÔøΩHÔøΩNÔøΩ      qÔøΩÔøΩÔøΩÔøΩÔøΩQÔøΩÔøΩ      ÔøΩÔøΩÔøΩÔøΩÔøΩVÔøΩ`=       ÔøΩ($q"_ÔøΩÔøΩ               
ÔøΩS8ÔøΩPÔøΩÔøΩ0     VFbPÔøΩÔøΩ!
Io40     ÔøΩÔøΩ[?p #ÔøΩ|ÔøΩ@    !.EÔøΩ  3ÔøΩÔøΩ4p    Bq  ÔøΩZ
    s   ÔøΩ                                                          ÔøΩÔøΩ C 		       AQRÔøΩ!1@UaÔøΩÔøΩ02TqÔøΩÔøΩÔøΩ56cpsÔøΩÔøΩ "#$PSÔøΩÔøΩÔøΩÔøΩÔøΩ  ? ÔøΩÔøΩRÔøΩÔøΩÔøΩ,ÔøΩÔøΩÔøΩÔøΩÔøΩ
ÔøΩnÔøΩkÔøΩÔøΩn8rZÔøΩÔøΩÔøΩÔøΩÔøΩ9VvÔøΩ ÔøΩVÔøΩÔøΩms$9zW èhÔøΩ-+@ZÔøΩ2ÔøΩPGEÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩEY9ÔøΩÔøΩiÔøΩœΩÔøΩS	ÔøΩÔøΩOÔøΩÔøΩ»îÔøΩÔøΩ_IÔøΩÔøΩWÈ´µÔøΩ}ÔøΩÔøΩÔøΩÔøΩÔøΩBÔøΩ’éTÔøΩÔøΩ>%rÔøΩ[e/,WÔøΩD}ÔøΩÔøΩDÔøΩ>bÔøΩe>ÔøΩvÔøΩZÔøΩp&ÔøΩ*VSÔøΩÔøΩVÔøΩsVÔøΩc ÔøΩ:ÔøΩÔøΩ~KÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ CÔøΩÔøΩ:ÔøΩÔøΩkÔøΩ'An| ∂ÔøΩ}\Ó≤ÖÔøΩÔøΩCÔøΩ ÔøΩfÔøΩÔøΩÔøΩÔøΩaÔøΩ;ÔøΩhÔøΩÔøΩJÔøΩÔøΩÔøΩÔøΩq!i=ÔøΩÔøΩÔøΩ"ÔøΩqÔøΩNFÔøΩIZÔøΩ`ÔøΩwƒù5hAjÔøΩ	
ÔøΩRXl‰éâÔøΩlkÔøΩÔøΩÔøΩ@IÔøΩ%lÔøΩÔøΩ’ÜÔøΩÔøΩÔøΩFDY-ÔøΩÔøΩÔøΩÔøΩEqÔøΩiÔøΩÔøΩÔøΩÔøΩOÔøΩIÔøΩ_ÔøΩ2bÔøΩl«ãÔøΩYuÔøΩÔøΩkÔøΩÔøΩÔøΩAOÔøΩÔøΩÔøΩÔøΩŸ£ÔøΩÔøΩ‹≠ÔøΩnÔøΩÔøΩcamÔøΩjNÔøΩjÔøΩÔøΩÔøΩVLÔøΩ}ÔøΩ;ÔøΩÔøΩoﬁÜ6ÔøΩÔøΩ’∑sÔøΩÔøΩ,ÔøΩÔøΩÔøΩ÷ÑÔøΩÔøΩÔøΩlÔøΩiÔøΩÔøΩÔøΩÔøΩl{IÔøΩOÔøΩÔøΩ(!%J $ÔøΩÔøΩÔøΩnÔøΩ-@GÔøΩÔøΩÔøΩÔøΩnÔøΩÔøΩ‹Æi!ÔøΩÍ¥ÅGÔøΩ:ÔøΩ^ÔøΩÔøΩnÔøΩg3lÔøΩF%ÔøΩÔøΩÔøΩ9]ÔøΩPqÔøΩÔøΩ)ÔøΩ:ÔøΩÔøΩÔøΩ@ÔøΩ*…çm◊ÖÔøΩVLY'ÔøΩs+ÔøΩzÔøΩÔøΩÔøΩVÔøΩm ÔøΩJ9ÔøΩÔøΩSÔøΩ_ÔøΩÔøΩÔøΩ#ÔøΩÔøΩ;ÔøΩÔøΩÔøΩÔøΩÔøΩ«ä!5ÔøΩ#ÔøΩq\ÔøΩM@ÔøΩÔøΩ@ÔøΩ]yzÔøΩÔøΩÔøΩÔøΩÔøΩA;eÔøΩkÔøΩÔøΩ@ÔøΩ sÔøΩ^ÔøΩÔøΩÔøΩGÔøΩÔøΩÔøΩÔøΩ\ÔøΩ5FÔøΩÔøΩ(ÔøΩÔøΩ SÔøΩÔøΩLyÔøΩÔøΩÔøΩcÔøΩi8ÔøΩÔøΩÔøΩÔøΩÔøΩoÔøΩ8TÔøΩÔøΩiÔøΩNÔøΩÔøΩ7DÔøΩÔøΩÔøΩÔøΩt-ÔøΩ pÔøΩ3`rÔøΩ q
rÔøΩ;|ÔøΩ.ÔøΩÔøΩbTGÔøΩÔøΩ[i HÔøΩÔøΩÕö-ÔøΩ
ÔøΩÔøΩOjÔøΩHÔøΩÔøΩÔøΩÔøΩMÔøΩÿíFEÔøΩ{ÔøΩ3XÔøΩnÔøΩÔøΩÔøΩeÔøΩ ÔøΩR3/ÔøΩ~ÔøΩÔøΩÔøΩÔøΩÔøΩ
ÔøΩÔøΩ aÔøΩÔøΩÔøΩÔøΩ!ÔøΩj&@^rÔøΩÔøΩÔøΩÔøΩÔøΩYÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩlÔøΩZ? ÔøΩ7ÎïµÔøΩÔøΩ)kiÔøΩwÔøΩÔøΩ\.ÔøΩuÔøΩÔøΩÔøΩÔøΩÔøΩXÔøΩÔøΩ\.ÔøΩuÔøΩÔøΩÔøΩÔøΩÔøΩXÔøΩÔøΩ\.ÔøΩuÔøΩÔøΩÔøΩÔøΩÔøΩXÔøΩÔøΩ\.ÔøΩuÔøΩÔøΩpÔøΩMÔøΩÔøΩÔøΩÔøΩo(NÔøΩÔøΩ3ÔøΩVgÔøΩÔøΩÔøΩÔøΩÔøΩZÔøΩsÔøΩÔøΩ%ÔøΩ\ÔøΩ]q}dÔøΩk\_Y5ÔøΩÔøΩÔøΩMGÔøΩÔøΩÔøΩÔøΩÔøΩQÔøΩÔøΩq}dÔøΩk\_Y5ÔøΩÔøΩÔøΩMGÔøΩÔøΩÔøΩÔøΩÔøΩQÔøΩÔøΩq}dÔøΩkV|5ÔøΩÔøΩÔøΩ8ÔøΩÔøΩÔøΩ//ÔøΩÔøΩÔøΩÔøΩ                ÔøΩÔøΩÔøΩ ? ÔøΩÔøΩ                ÔøΩÔøΩÔøΩ ? ÔøΩÔøΩ
----
public/placeholder.jpg
ÔøΩÔøΩÔøΩÔøΩ JFIF   H H  ÔøΩÔøΩ ÔøΩExif  MM *                  J       R(       ÔøΩi       Z       H      H    ÔøΩ       ÔøΩ       ÔøΩ           ÔøΩÔøΩ 8Photoshop 3.0 8BIM      8BIM%     ÔøΩÔøΩŸè ÔøΩÔøΩ	ÔøΩÔøΩÔøΩB~ÔøΩÔøΩ    ÔøΩÔøΩ           	
ÔøΩÔøΩ ÔøΩ s !1"AQ2aq#ÔøΩ ÔøΩBÔøΩR3ÔøΩ$b0ÔøΩrÔøΩCÔøΩ4ÔøΩÔøΩS@%c5ÔøΩsÔøΩPDÔøΩÔøΩÔøΩ&T6dÔøΩtÔøΩ`“ÑÔøΩpÔøΩ'E7eÔøΩUuÔøΩÔøΩ√ÖÔøΩÔøΩFvÔøΩÔøΩGVfÔøΩ	
()*89:HIJWXYZghijwxyzÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ        	
ÔøΩÔøΩ ÔøΩ ÔøΩ ! 1A0"2Q@3#aBqR4ÔøΩP$ÔøΩÔøΩCÔøΩb5SÔøΩÔøΩ%`ÔøΩDÔøΩrÔøΩÔøΩc6p&ETÔøΩ'ÔøΩÔøΩ	
()*789:FGHIJUVWXYZdefghijstuvwxyzÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ C 

	


")$+*($''-2@7-0=0''8L9=CEHIH+6OUNFT@GHEÔøΩÔøΩ C

!!E.'.EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEÔøΩÔøΩ    ÔøΩkÔøΩÔøΩ  ÔøΩÔøΩ ?ÔøΩÔøΩ ?ÔøΩÔøΩ  ?ÔøΩÔøΩ 3     !1AQaqÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ 0@P`pÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ  ?!ÔøΩÔøΩÔøΩ    ÔøΩÔøΩ 3   	 !1AQa qëÅ°ÔøΩÔøΩÔøΩÔøΩÔøΩ0@P`pÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ ?ÔøΩÔøΩÔøΩ ?ÔøΩÔøΩÔøΩ  ?ÔøΩÔøΩÔøΩ
----
public/placeholder.svg
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
----
styles/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

----
tailwind.config.ts
import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "#25a55f", // Darker green with better contrast
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config

----
tsconfig.json
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

--END--
